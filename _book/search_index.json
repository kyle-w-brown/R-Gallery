[
["index.html", "R-Gallery-Book Chapter 1 Introduction", " R-Gallery-Book Kyle W. Brown 2021-01-21 Chapter 1 Introduction Welcome the R Gallery Book, a complete guide to the R Graph Gallery website. This information is taken directly from R graph gallery with careful detail in reproducing plots and completing ideas. This material created by Kyle W. Brown as way to have one single reading collection of updated R gallery plots and graphs. While this book was created to encapsulate the entire R Graph Gallery website into one readable source, another purpose is serving as introductory level into data visualization using R programming language. "],
["distributions.html", "Chapter 2 Distributions 2.1 Boxplot 2.2 Density 2.3 Histogram 2.4 Ridgeline Chart 2.5 Violin", " Chapter 2 Distributions Figure 2.1: Ridgeline Chart 2.1 Boxplot This is the boxplot section of the gallery. If you want to know more about this kind of chart, visit data-to-viz.com. If you’re looking for a simple way to implement it in R, pick an example below. Boxplots are a commonly used chart that compares a distribution of several groups. However, you should keep in mind that data distribution is hidden behind each box. For instance, a normal distribution could look exactly the same as a bimodal distribution. Please read more explanation on this matter, and consider a violin plot or a ridgline chart instead. 2.1.0.1 Boxplot with Individual Data Points A boxplot summarizes the distribution of a continuous variable. it is often criticized for hiding the underlying distribution of each group. Thus, showing individual observation using jitter on top of boxes is a good practice. This section explains how to do so using ggplot2. If you’re not convinced about that danger of using basic boxplot, please read this section that explains it in depth. Fortunately, ggplot2 makes it a breeze to add invdividual observation on top of boxes thanks to the geom_jitter() function. This function shifts all dots by a random value ranging from 0 to size, avoiding overlaps. Now, do you see the bimodal distribution hidden behind group B? # Libraries library(tidyverse) library(hrbrthemes) library(viridis) # create a dataset data &lt;- data.frame( name=c( rep(&quot;A&quot;,500), rep(&quot;B&quot;,500), rep(&quot;B&quot;,500), rep(&quot;C&quot;,20), rep(&#39;D&#39;, 100) ), value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) ) # Plot data %&gt;% ggplot( aes(x=name, y=value, fill=name)) + geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha=0.6) + geom_jitter(color=&quot;black&quot;, size=0.4, alpha=0.9) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;A boxplot with jitter&quot;) + xlab(&quot;&quot;) In case you’re not convinced, here is how the basic boxplot](https://www.r-graph-gallery.com/boxplot.html) and the basic violin plot look like: # Boxplot basic data %&gt;% ggplot( aes(x=name, y=value, fill=name)) + geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha=0.6, option=&quot;A&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;Basic boxplot&quot;) + xlab(&quot;&quot;) # Violin basic data %&gt;% ggplot( aes(x=name, y=value, fill=name)) + geom_violin() + scale_fill_viridis(discrete = TRUE, alpha=0.6, option=&quot;A&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;Violin chart&quot;) + xlab(&quot;&quot;) 2.1.1 Ggplot2 Boxplot are built thanks to the geom_boxplot() geom of ggplot2. See its basic usage on the first example below. Note that reordering groups is an important step to get a more insightful figure. Also, showing individual data points with jittering is a good way to avoid hiding the underlying distribution. 2.1.1.1 Basic Ggplot2 Boxplot The ggplot2 library allows to make a boxplot using geom_boxplot(). You have to specify a quantitative variable for the Y axis, and a qualitative variable for the X axis ( a group). # Load ggplot2 library(ggplot2) # The mtcars dataset is natively available # head(mtcars) # A really basic boxplot. ggplot(mtcars, aes(x=as.factor(cyl), y=mpg)) + geom_boxplot(fill=&quot;slateblue&quot;, alpha=0.2) + xlab(&quot;cyl&quot;) 2.1.2 Ggplot2 Boxplot Parameters This chart extends the previous most basic boxplot described in graph #262. It describes the option you can apply to the geom_boxplot() function to custom the general chart appearance. Note on notches: useful to compare groups: if no overlap between 2 groups, medians are significantly different. # Load ggplot2 library(ggplot2) # The mpg dataset is natively available #head(mpg) # geom_boxplot proposes several arguments to custom appearance ggplot(mpg, aes(x=class, y=hwy)) + geom_boxplot( # custom boxes color=&quot;blue&quot;, fill=&quot;blue&quot;, alpha=0.2, # Notch? notch=TRUE, notchwidth = 0.8, # custom outliers outlier.colour=&quot;red&quot;, outlier.fill=&quot;red&quot;, outlier.size=3 ) 2.1.3 Control ggplot2 Boxplot Colors A boxplot summarizes the distribution of a continuous variable. Different color scales can be apply to it, and this section describes how to do so using the ggplot2 library. It is notably described how to highlight a specific group of interest. 2.1.3.1 General Color Customization These for examples illustrate the most common color scales used in boxplot. Note the use of RcolorBrewer and viridis to automatically generate nice color palette. # library library(ggplot2) # The mtcars dataset is natively available in R #head(mpg) # Top Left: Set a unique color with fill, colour, and alpha ggplot(mpg, aes(x=class, y=hwy)) + geom_boxplot(color=&quot;red&quot;, fill=&quot;orange&quot;, alpha=0.2) # Top Right: Set a different color for each group ggplot(mpg, aes(x=class, y=hwy, fill=class)) + geom_boxplot(alpha=0.3) + theme(legend.position=&quot;none&quot;) # Bottom Left ggplot(mpg, aes(x=class, y=hwy, fill=class)) + geom_boxplot(alpha=0.3) + theme(legend.position=&quot;none&quot;) + scale_fill_brewer(palette=&quot;BuPu&quot;) # Bottom Right ggplot(mpg, aes(x=class, y=hwy, fill=class)) + geom_boxplot(alpha=0.3) + theme(legend.position=&quot;none&quot;) + scale_fill_brewer(palette=&quot;Dark2&quot;) 2.1.4 Highlighting a Group Highlighting the main message conveid by your chart is an important step in dataviz. If your story focuses on a specific group, you should highlight it in your boxplot. To do so, first create a new column with mutate where you store the binary information: highlight or not. Then just provide this column to the fill argument of ggplot2 and eventually custom the appearance of the highlighted group with scale_fill_manual and scale_alpha_manual. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Work with the natively available mpg dataset mpg %&gt;% # Add a column called &#39;type&#39;: do we want to highlight the group or not? mutate( type=ifelse(class==&quot;subcompact&quot;,&quot;Highlighted&quot;,&quot;Normal&quot;)) %&gt;% # Build the boxplot. In the &#39;fill&#39; argument, give this column ggplot( aes(x=class, y=hwy, fill=type, alpha=type)) + geom_boxplot() + scale_fill_manual(values=c(&quot;#69b3a2&quot;, &quot;grey&quot;)) + scale_alpha_manual(values=c(1,0.1)) + theme_ipsum() + theme(legend.position = &quot;none&quot;) + xlab(&quot;&quot;) 2.1.5 Grouped Boxplot A grouped boxplot is a boxplot where categories are organized in groups and subgroups. Here we visualize the distribution of 7 groups (called A to G) and 2 subgroups (called low and high). Note that the group must be called in the X argument of ggplot2. The subgroup is called in the fill argument. # library library(ggplot2) # create a data frame variety=rep(LETTERS[1:7], each=40) treatment=rep(c(&quot;high&quot;,&quot;low&quot;),each=20) note=seq(1:280)+sample(1:150, 280, replace=T) data=data.frame(variety, treatment , note) # grouped boxplot ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() 2.1.6 Using Small Multiple Note that an alternative to grouped boxplot is to use faceting: each subgroup (left) or each group (right) is represented in a distinct panel. # One box per treatment p1 &lt;- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + facet_wrap(~treatment) # one box per variety p2 &lt;- ggplot(data, aes(x=variety, y=note, fill=treatment)) + geom_boxplot() + facet_wrap(~variety, scale=&quot;free&quot;) p1 p2 2.1.7 Ggplot2 Boxplot with Variable Width Boxplots hide the category sample sizes. One way to tackle this issue is to build boxplot with width proportionnal to sample size. Here is how to do it with R and ggplot2. Boxplot are often critized for hiding the underlying distribution of each category. Since individual data points are hidden, it is also impossible to know what sample size is available for each category. In this example, box widths are proportional to sample size thanks to the varwidth option. On top of that, the exact sample size is added to the X axis labels for more accuracy. # library library(ggplot2) # create data names &lt;- c(rep(&quot;A&quot;, 20) , rep(&quot;B&quot;, 5) , rep(&quot;C&quot;, 30), rep(&quot;D&quot;, 100)) value &lt;- c( sample(2:5, 20 , replace=T) , sample(4:10, 5 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 100 , replace=T) ) data &lt;- data.frame(names,value) # prepare a special xlab with the number of obs for each group my_xlab &lt;- paste(levels(data$names),&quot;\\n(N=&quot;,table(data$names),&quot;)&quot;,sep=&quot;&quot;) # plot ggplot(data, aes(x=names, y=value, fill=names)) + geom_boxplot(varwidth = TRUE, alpha=0.2) + theme(legend.position=&quot;none&quot;) + scale_x_discrete(labels=my_xlab) 2.1.8 Ggplot2 Boxplot from Continuous Variable Let’s say we want to study the relationship between 2 numeric variables. It is possible to cut on of them in different bins, and to use the created groups to build a boxplot. Here, the numeric variable called carat from the diamonds dataset in cut in 0.5 length bins thanks to the cut_width function. Then, we just need to provide the newly created variable to the X axis of ggplot2. # library library(ggplot2) library(dplyr) library(hrbrthemes) # Start with the diamonds dataset, natively available in R: p &lt;- diamonds %&gt;% # Add a new column called &#39;bin&#39;: cut the initial &#39;carat&#39; in bins mutate( bin=cut_width(carat, width=0.5, boundary=0) ) %&gt;% # plot ggplot( aes(x=bin, y=price) ) + geom_boxplot(fill=&quot;#69b3a2&quot;) + theme_ipsum() + xlab(&quot;Carat&quot;) p 2.1.9 Ggplot2 Boxplot with Mean Value Ggplot2 allows to show the average value of each group using the stat_summary() function. No more need to calculate your mean values before plotting. # Library library(ggplot2) # create data names=c(rep(&quot;A&quot;, 20) , rep(&quot;B&quot;, 8) , rep(&quot;C&quot;, 30), rep(&quot;D&quot;, 80)) value=c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) ) data=data.frame(names,value) # plot p &lt;- ggplot(data, aes(x=names, y=value, fill=names)) + geom_boxplot(alpha=0.7) + stat_summary(fun.y=mean, geom=&quot;point&quot;, shape=20, size=14, color=&quot;red&quot;, fill=&quot;red&quot;) + theme(legend.position=&quot;none&quot;) + scale_fill_brewer(palette=&quot;Set1&quot;) p 2.1.10 Basic R Build boxplot with base R is totally double thanks to the boxplot() function. A boxplot summarizes the distribution of a numeric variable for one or several groups. It can be useful to add colors to specific groups to highlight them. For example, positive and negative controls are likely to be in different colors. #Create data names &lt;- c(rep(&quot;Maestro&quot;, 20) , rep(&quot;Presto&quot;, 20) , rep(&quot;Nerak&quot;, 20), rep(&quot;Eskimo&quot;, 20), rep(&quot;Nairobi&quot;, 20), rep(&quot;Artiko&quot;, 20)) value &lt;- c( sample(3:10, 20 , replace=T) , sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), sample(6:10, 20 , replace=T) , sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) ) data &lt;- data.frame(names,value) # Prepare a vector of colors with specific color for Nairobi and Eskimo myColors &lt;- ifelse(levels(data$names)==&quot;Nairobi&quot; , rgb(0.1,0.1,0.7,0.5) , ifelse(levels(data$names)==&quot;Eskimo&quot;, rgb(0.8,0.1,0.3,0.6), &quot;grey90&quot; ) ) # Build the plot boxplot(data$value ~ data$names , col=myColors , ylab=&quot;disease&quot; , xlab=&quot;- variety -&quot;) # Add a legend legend(&quot;bottomleft&quot;, legend = c(&quot;Positiv control&quot;,&quot;Negativ control&quot;) , col = c(rgb(0.1,0.1,0.7,0.5) , rgb(0.8,0.1,0.3,0.6)) , bty = &quot;n&quot;, pch=20 , pt.cex = 3, cex = 1, horiz = FALSE, inset = c(0.03, 0.1)) 2.1.11 Basic R: X Axis Labels on Several Lines It is a common practice to display the X axis label on several lines. Here is an example applied to a boxplot. It can be handy to display X axis labels on several lines. For instance, to add the number of values present in each box of a boxplot. How it works: Change the names of your categories using the names() function. Use \\n to start new line. Increase the distance between the labels and the X axis with the mgp argument of the par() function. It avoids overlap with the axis. Note: mgp is a numeric vector of length 3, which sets the axis label locations relative to the edge of the inner plot window. Default value : c(3,1,0). First value : location the labels (xlab and ylab in plot). Second value : location of the tick-mark labels (what we want to lower). Third Value : position of the tick marks # Create 2 vectors a &lt;- sample(2:24, 20 , replace=T) b &lt;- sample(4:14, 8 , replace=T) # Make a list of these 2 vectors C &lt;- list(a,b) # Change the names of the elements of the list : names(C) &lt;- c(paste(&quot;Category 1\\n n=&quot; , length(a) , sep=&quot;&quot;), paste(&quot;Category 2\\n n=&quot; , length(b) , sep=&quot;&quot;)) # Change the mgp argument: avoid text overlaps axis par(mgp=c(3,2,0)) # Final Boxplot boxplot(C , col=&quot;#69b3a2&quot; , ylab=&quot;value&quot; ) 2.1.12 Boxplot with Jitter in Base R Boxplot hides the distribution behind each group. This section show how to tackle this issue in base R, adding individual observation using dots with jittering. Boxplot can be dangerous: the exact distribution of each group is hidden behind boxes as explained in data-to-viz. If the amount of observation is not too high, you can add individual observations on top of boxes, using jittering to avoid dot overlap. In base R, it is done manually creating a function that adds dot one by one, computing a random X position for all of them. library(formatR) # Create data names &lt;- c(rep(&quot;A&quot;, 80) , rep(&quot;B&quot;, 50) , rep(&quot;C&quot;, 70)) value &lt;- c( rnorm(80 , mean=10 , sd=9) , rnorm(50 , mean=2 , sd=15) , rnorm(70 , mean=30 , sd=10) ) data &lt;- data.frame(names,value) # Basic boxplot boxplot(data$value ~ data$names , col=terrain.colors(4) ) # Add data points mylevels &lt;- levels(data$names) #levelProportions &lt;- summary(data$names)/nrow(data) for(i in 1:length(mylevels)){ thislevel &lt;- mylevels[i] thisvalues &lt;- data[data$names==thislevel, &quot;value&quot;] # take the x-axis indices and add a jitter, proportional to the N in each level myjitter &lt;- jitter(rep(i, length(thisvalues)), amount=levelProportions[i]/2) points(myjitter, thisvalues, pch=20, col=rgb(0,0,0,.9)) } 2.1.13 Ordering Boxplots in Base R This section is dedicated to boxplot ordering in base R. It describes 3 common use cases of reordering issue with code and explanation. 2.1.13.1 Reordering Category by Median The most common need is to reorder categories by increasing median. It allows to quickly spot what group has the highest value and how categories are ranked. It is accomplished using the reorder() function in combination with the with() function as suggested below: # Create data : 7 varieties / 20 samples per variety / a numeric value for each sample variety &lt;- rep( c(&quot;soldur&quot;, &quot;silur&quot;, &quot;lloyd&quot;, &quot;pescadou&quot;, &quot;X4582&quot;, &quot;Dudur&quot;, &quot;Classic&quot;), each=20) note &lt;- c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), sample(1:7, 30 , replace=T), sample(3:10, 70 , replace=T) ) data &lt;- data.frame(variety, note) # Create a vector named &quot;new_order&quot; containing the desired order new_order &lt;- with(data, reorder(variety , note, median , na.rm=T)) # Draw the boxplot using this new order boxplot(data$note ~ new_order , ylab=&quot;sickness&quot; , col=&quot;#69b3a2&quot;, boxwex=0.4 , main=&quot;&quot;) 2.1.14 Give a Specific Order Boxplot categories are provided in a column of the input data frame. This column needs to be a factor, and has several levels. Categories are displayed on the chart following the order of this factor, often in alphabetical order. Sometimes, we need to show groups in a specific order (A,D,C,B here). This can be done by reordering the levels, using the factor() function. #Creating data names &lt;- c(rep(&quot;A&quot;, 20) , rep(&quot;B&quot;, 20) , rep(&quot;C&quot;, 20), rep(&quot;D&quot;, 20)) value &lt;- c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) ) data &lt;- data.frame(names,value) # Classic boxplot (A-B-C-D order) # boxplot(data$value ~ data$names) # I reorder the groups order : I change the order of the factor data$names data$names &lt;- factor(data$names , levels=c(&quot;A&quot;, &quot;D&quot;, &quot;C&quot;, &quot;B&quot;)) #The plot is now ordered ! boxplot(data$value ~ data$names , col=rgb(0.3,0.5,0.4,0.6) , ylab=&quot;value&quot; , xlab=&quot;names in desired order&quot;) 2.1.15 Grouped and Ordered Boxplot In a grouped boxplot, categories are organized in groups and subgroups. For instance, let’s take several varieties (group) that are grown in high or low temperature (subgroup). Here both subgroups are represented one beside each other, and groups are ranked by increasing median: # Create dummy data variety &lt;- rep( c(&quot;soldur&quot;, &quot;silur&quot;, &quot;lloyd&quot;, &quot;pescadou&quot;, &quot;X4582&quot;, &quot;Dudur&quot;, &quot;Classic&quot;), each=40) treatment &lt;- rep(c(rep(&quot;high&quot; , 20) , rep(&quot;low&quot; , 20)) , 7) note &lt;- c( rep(c(sample(0:4, 20 , replace=T) , sample(1:6, 20 , replace=T)),2), rep(c(sample(5:7, 20 , replace=T), sample(5:9, 20 , replace=T)),2), c(sample(0:4, 20 , replace=T) , sample(2:5, 20 , replace=T), rep(c(sample(6:8, 20 , replace=T) , sample(7:10, 20 , replace=T)),2) )) data=data.frame(variety, treatment , note) # Reorder varieties (group) (mixing low and high treatments for the calculations) new_order &lt;- with(data, reorder(variety , note, mean , na.rm=T)) # Then I make the boxplot, asking to use the 2 factors : variety (in the good order) AND treatment : par(mar=c(3,4,3,1)) myplot &lt;- boxplot(note ~ treatment*new_order , data=data , boxwex=0.4 , ylab=&quot;sickness&quot;, main=&quot;sickness of several wheat lines&quot; , col=c(&quot;slateblue1&quot; , &quot;tomato&quot;) , xaxt=&quot;n&quot;) # To add the label of x axis my_names &lt;- sapply(strsplit(myplot$names , &#39;\\\\.&#39;) , function(x) x[[2]] ) my_names &lt;- my_names[seq(1 , length(my_names) , 2)] axis(1, at = seq(1.5 , 14 , 2), labels = my_names , tick=FALSE , cex=0.3) # Add the grey vertical lines for(i in seq(0.5 , 20 , 2)){ abline(v=i,lty=1, col=&quot;grey&quot;) } # Add a legend legend(&quot;bottomright&quot;, legend = c(&quot;High treatment&quot;, &quot;Low treatment&quot;), col=c(&quot;slateblue1&quot; , &quot;tomato&quot;), pch = 15, bty = &quot;n&quot;, pt.cex = 3, cex = 1.2, horiz = F, inset = c(0.1, 0.1)) 2.1.16 Add Text over Boxplot in Base R This examples demonstrates how to build a boxplot with sample size written on top of each box. It is useful to indicate what sample size is hidden behind each box. Basic R implementation. The first challenge here is to recover the position of the top part of each box. This is done by saving the boxplot() result in an object (called boundaries here). Now, typing boundaries$stats gives a dataframe with all information concerning boxes. Then, it is possible to use the text function to add labels on top of each box. This function takes 3 inputs: x axis positions of the labels. In our case, it will be 1,2,3,4 for 4 boxes. y axis positions, available in the boundaries$stats object. text of the labels : the number of value per group or whatever else. # Dummy data names &lt;- c(rep(&quot;A&quot;, 20) , rep(&quot;B&quot;, 8) , rep(&quot;C&quot;, 30), rep(&quot;D&quot;, 80)) value &lt;- c( sample(2:5, 20 , replace=T) , sample(4:10, 8 , replace=T), sample(1:7, 30 , replace=T), sample(3:8, 80 , replace=T) ) data &lt;- data.frame(names,value) # Draw the boxplot. Note result is also stored in a object called boundaries boundaries &lt;- boxplot(data$value ~ data$names , col=&quot;#69b3a2&quot; , ylim=c(1,11)) # Now you can type boundaries$stats to get the boundaries of the boxes # Add sample size on top nbGroup &lt;- nlevels(data$names) text( x=c(1:nbGroup), y=boundaries$stats[nrow(boundaries$stats),] + 0.5, paste(&quot;n = &quot;,table(data$names),sep=&quot;&quot;) ) 2.1.17 Tukey Test and Boxplot in R A Tukey test compares all possible pair of means for a set of categories. This section explains how to perform it in R and host to represent the result on a boxplot. Tukey test is a single-step multiple comparison procedure and statistical test. It is a section-hoc analysis, what means that it is used in conjunction with an ANOVA. It allows to find means of a factor that are significantly different from each other, comparing all possible pairs of means with a t-test like method. (Read more for the exact procedure) In R, the multcompView allows to run the Tukey test thanks to the TukeyHSD() function. It also offers a chart that shows the mean difference for each pair of group. # library library(multcompView) # Create data set.seed(1) treatment &lt;- rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;), each=20) value=c( sample(2:5, 20 , replace=T) , sample(6:10, 20 , replace=T), sample(1:7, 20 , replace=T), sample(3:10, 20 , replace=T) , sample(10:20, 20 , replace=T) ) data=data.frame(treatment,value) # What is the effect of the treatment on the value ? model=lm( data$value ~ data$treatment ) ANOVA=aov(model) # Tukey test to study each pair of treatment : TUKEY &lt;- TukeyHSD(x=ANOVA, &#39;data$treatment&#39;, conf.level=0.95) # Tuckey test representation : plot(TUKEY , las=1 , col=&quot;brown&quot;) 2.1.18 Tukey test result on top of boxplot The previous chart showed no significant difference between groups A and C, and between D and B. It is possible to represent this information in a boxplot. Group A and C are represented using a similar way: same color, and same ‘b’ letter on top. And so on for B-D and for E. Tukey test results on top of Bhart showed no significant difference between groups A and C, and between D and B. It is possible to represent this information in a boxplot. Group A and C are represented using a similar way: same color, and same ‘b’ letter on top. And so on for B-D and for E. # I need to group the treatments that are not different each other together. generate_label_df &lt;- function(TUKEY, variable){ # Extract labels and factor levels from Tukey section-hoc Tukey.levels &lt;- TUKEY[[variable]][,4] Tukey.labels &lt;- data.frame(multcompLetters(Tukey.levels)[&#39;Letters&#39;]) #I need to put the labels in the same order as in the boxplot : Tukey.labels$treatment=rownames(Tukey.labels) Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ] return(Tukey.labels) } # Apply the function on my dataset LABELS &lt;- generate_label_df(TUKEY , &quot;data$treatment&quot;) # A panel of colors to draw each group with the same color : my_colors &lt;- c( rgb(143,199,74,maxColorValue = 255), rgb(242,104,34,maxColorValue = 255), rgb(111,145,202,maxColorValue = 255) ) # Draw the basic boxplot a &lt;- boxplot(data$value ~ data$treatment , ylim=c(min(data$value) , 1.1*max(data$value)) , col=my_colors[as.numeric(LABELS[,1])] , ylab=&quot;value&quot; , main=&quot;&quot;) # I want to write the letter over each box. Over is how high I want to write it. over &lt;- 0.1*max( a$stats[nrow(a$stats),] ) #Add the labels text( c(1:nlevels(data$treatment)) , a$stats[nrow(a$stats),]+over , LABELS[,1] , col=my_colors[as.numeric(LABELS[,1])] ) Note: Tukey test is also called: Tukey’s range test / Tukey method / Tukey’s honest significance test / Tukey’s HSD (honest significant difference) test / Tukey-Kramer method 2.1.19 Control Box Type with the bty Option The bty option of the par() function allows to control the box style of base R charts. This section provides a few examples illustrating how this option works. The bty option of the par() function allows to custom the box around the plot. Several letters are possible. Shape of the letter represents the boundaries: o: complete box (default parameter), n: no box 7: top + right L: bottom + left C: top + left + bottom U: left + bottom + right # Cut the screen in 4 parts par(mfrow=c(2,2)) #Create data a=seq(1,29)+4*runif(29,0.4) b=seq(1,29)^2+runif(29,0.98) # First graph par(bty=&quot;l&quot;) boxplot(a , col=&quot;#69b3a2&quot; , xlab=&quot;bottom &amp; left box&quot;) # Second par(bty=&quot;o&quot;) boxplot(b , col=&quot;#69b3a2&quot; , xlab=&quot;complete box&quot;, horizontal=TRUE) # Third par(bty=&quot;c&quot;) boxplot(a , col=&quot;#69b3a2&quot; , xlab=&quot;up &amp; bottom &amp; left box&quot;, width=0.5) # Fourth par(bty=&quot;n&quot;) boxplot(a , col=&quot;#69b3a2&quot; , xlab=&quot;no box&quot;) 2.1.20 Split Base R Plot Window with layout() The layout() function of R allows to split the plot window in areas with custom sizes. Here are a few examples illustrating how to use it with reproducible code and explanation. Layout divides the device up into as many rows and columns as there are in matrix mat. Here a matrix is created with matrix(c(1,2), ncol=1) -&gt; 1 column, 2 rows. This is what I get in the chart! 2.1.20.1 2 Rows Note: this could be done using par(mfrow=c(1,2)) as well. But this option does not allow the customization we’ll see further in this section. # Dummy data a &lt;- seq(129,1)+4*runif(129,0.4) b &lt;- seq(1,129)^2+runif(129,0.98) # Create the layout nf &lt;- layout( matrix(c(1,2), ncol=1) ) # Fill with plots hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=&quot;distribution of a&quot; , main=&quot;&quot;) boxplot(a , xlab=&quot;a&quot; , col=rgb(0.8,0.8,0.3,0.5) , las=2) 2.1.20.2 2 Columns Here I create the matrix with matrix(c(1,2), ncol=2) -&gt; 2 columns, 1 row. This is what I get in the chart! Note: if you swap to c(2,1), second chart will be on top, first at the bottom # Dummy data a &lt;- seq(129,1)+4*runif(129,0.4) b &lt;- seq(1,129)^2+runif(129,0.98) # Create the layout nf &lt;- layout( matrix(c(1,2), ncol=2) ) # Fill with plots hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=&quot;distribution of a&quot; , main=&quot;&quot;) boxplot(a , xlab=&quot;a&quot; , col=rgb(0.8,0.8,0.3,0.5) , las=2) 2.1.21 Subdivide Second Row matrix(c(1,1,2,3), nrow=2) creates a matrix of 2 rows and 2 columns. First 2 panels will be for the first chart, the third for chart2 and the last for chart 3. # Dummy data a &lt;- seq(129,1)+4*runif(129,0.4) b &lt;- seq(1,129)^2+runif(129,0.98) # Create the layout nf &lt;- layout( matrix(c(1,1,2,3), nrow=2, byrow=TRUE) ) # Fill with plots hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=&quot;distribution of a&quot; , main=&quot;&quot;) boxplot(a , xlab=&quot;a&quot; , col=rgb(0.8,0.8,0.3,0.5) , las=2) boxplot(b , xlab=&quot;b&quot; , col=rgb(0.4,0.2,0.3,0.5) , las=2) 2.1.22 Custom Proportions You can custom columns and row proportions with widths and heights. Here, widths=c(3,1) means first column takes three quarters of the plot window width, second takes one quarter. # Dummy data a &lt;- seq(129,1)+4*runif(129,0.4) b &lt;- seq(1,129)^2+runif(129,0.98) # Set the layout nf &lt;- layout( matrix(c(1,1,2,3), ncol=2, byrow=TRUE), widths=c(3,1), heights=c(2,2) ) #Add the plots hist(a , breaks=30 , border=F , col=rgb(0.1,0.8,0.3,0.5) , xlab=&quot;distribution of a&quot; , main=&quot;&quot;) boxplot(a , xlab=&quot;a&quot; , col=rgb(0.8,0.8,0.3,0.5) , las=2) boxplot(b , xlab=&quot;b&quot; , col=rgb(0.4,0.2,0.3,0.5) , las=2) 2.2 Density Welcome in the density plot section of the gallery. If you want to know more about this kind of chart, visit data-to-viz.com. A density plot shows the distribution of a numeric variable. In ggplot2, the geom_density() function takes care of the kernel density estimation and plot the results. A common task in dataviz is to compare the distribution of several groups. 2.2.1 Basic density chart with ggplot2 A density plot is a representation of the distribution of a numeric variable. It is a smoothed version of the histogram and is used in the same kind of situation. Here is a basic example built with the ggplot2 library. Density plots are built in ggplot2 thanks to the geom_density geom. Only one numeric variable is need as input. # Libraries library(ggplot2) library(dplyr) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv&quot;, header=TRUE) # Make the histogram data %&gt;% filter( price&lt;300 ) %&gt;% ggplot( aes(x=price)) + geom_density(fill=&quot;#69b3a2&quot;, color=&quot;#e9ecef&quot;, alpha=0.8) 2.2.2 Custom with theme_ipsum The hrbrthemes package offer a set of pre-built themes for your charts. I am personnaly a big fan of the theme_ipsum: easy to use and makes your chart look more professional: # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv&quot;, header=TRUE) # Make the histogram data %&gt;% filter( price&lt;300 ) %&gt;% ggplot( aes(x=price)) + geom_density(fill=&quot;#69b3a2&quot;, color=&quot;#e9ecef&quot;, alpha=0.8) + ggtitle(&quot;Night price distribution of Airbnb appartements&quot;) + theme_ipsum() 2.2.3 Mirror Density Chart with ggplot2 A density plot is a representation of the distribution of a numeric variable. Comparing the distribution of 2 variables is a common challenge that can be tackled with the mirror density chart: 2 density charts are put face to face what allows to efficiently compare them. Here is how to build it with ggplot2 library. 2.2.4 Density with geom_density A density chart is built thanks to the geom_density geom of ggplot2 (see a basic example). It is possible to plot this density upside down by specifying y = -..density... It is advised to use geom_label to indicate variable names. # Libraries library(ggplot2) library(hrbrthemes) # Dummy data data &lt;- data.frame( var1 = rnorm(1000), var2 = rnorm(1000, mean=2) ) # Chart p &lt;- ggplot(data, aes(x=x) ) + # Top geom_density( aes(x = var1, y = ..density..), fill=&quot;#69b3a2&quot; ) + geom_label( aes(x=4.5, y=0.25, label=&quot;variable1&quot;), color=&quot;#69b3a2&quot;) + # Bottom geom_density( aes(x = var2, y = -..density..), fill= &quot;#404080&quot;) + geom_label( aes(x=4.5, y=-0.25, label=&quot;variable2&quot;), color=&quot;#404080&quot;) + theme_ipsum() + xlab(&quot;value of x&quot;) p 2.2.5 Histogram with geom_histogram Of course it is possible to apply exactly the same technique using geom_histogram instead of geom_density to get a mirror histogram: # Chart p &lt;- ggplot(data, aes(x=x) ) + geom_histogram( aes(x = var1, y = ..density..), fill=&quot;#69b3a2&quot; ) + geom_label( aes(x=4.5, y=0.25, label=&quot;variable1&quot;), color=&quot;#69b3a2&quot;) + geom_histogram( aes(x = var2, y = -..density..), fill= &quot;#404080&quot;) + geom_label( aes(x=4.5, y=-0.25, label=&quot;variable2&quot;), color=&quot;#404080&quot;) + theme_ipsum() + xlab(&quot;value of x&quot;) p 2.2.6 Density Chart with Several Groups A density plot is a representation of the distribution of a numeric variable. Comparing the distribution of several variables with density charts is possible. Here are a few examples with their ggplot2 implementation. 2.2.7 Multi density chart A multi density chart is a density chart where several groups are represented. It allows to compare their distribution. The issue with this kind of chart is that it gets easily cluttered: groups overlap each other and the figure gets unreadable. An easy workaround is to use transparency. However, it won’t solve the issue completely and is is often better to consider the examples suggested further in this document. # Libraries library(ggplot2) library(hrbrthemes) library(dplyr) library(tidyr) library(viridis) # The diamonds dataset is natively available with R. # Without transparency (left) p1 &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) + geom_density(adjust=1.5) + theme_ipsum() p1 # With transparency (right) p2 &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) + geom_density(adjust=1.5, alpha=.4) + theme_ipsum() p2 Here is an example with another dataset where it works much better. Groups have very distinct distribution, it is easy to spot them even if on the same chart. Note that it is much better to add group name next to their distribution instead of having a legend beside the chart. # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv&quot;, header=TRUE, sep=&quot;,&quot;) data &lt;- data %&gt;% gather(key=&quot;text&quot;, value=&quot;value&quot;) %&gt;% mutate(text = gsub(&quot;\\\\.&quot;, &quot; &quot;,text)) %&gt;% mutate(value = round(as.numeric(value),0)) # A dataframe for annotations annot &lt;- data.frame( text = c(&quot;Almost No Chance&quot;, &quot;About Even&quot;, &quot;Probable&quot;, &quot;Almost Certainly&quot;), x = c(5, 53, 65, 79), y = c(0.15, 0.4, 0.06, 0.1) ) # Plot data %&gt;% filter(text %in% c(&quot;Almost No Chance&quot;, &quot;About Even&quot;, &quot;Probable&quot;, &quot;Almost Certainly&quot;)) %&gt;% ggplot( aes(x=value, color=text, fill=text)) + geom_density(alpha=0.6) + scale_fill_viridis(discrete=TRUE) + scale_color_viridis(discrete=TRUE) + geom_text( data=annot, aes(x=x, y=y, label=text, color=text), hjust=0, size=4.5) + theme_ipsum() + theme( legend.position=&quot;none&quot; ) + ylab(&quot;&quot;) + xlab(&quot;Assigned Probability (%)&quot;) 2.2.8 Small Multiple with facet_wrap() Using small multiple is often the best option in my opinion. Distribution of each group gets easy to read, and comparing groups is still possible if they share the same X axis boundaries. # Using Small multiple ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) + geom_density(adjust=1.5) + theme_ipsum() + facet_wrap(~cut) + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), axis.ticks.x=element_blank() ) 2.2.9 Stacked Density Chart Another solution is to stack the groups. This allows to see what group is the most frequent for a given value, but it makes it hard to understand the distribution of a group that is not on the bottom of the chart. Visit data to viz for a complete explanation on this matter. # Stacked density plot: p &lt;- ggplot(data=diamonds, aes(x=price, group=cut, fill=cut)) + geom_density(adjust=1.5, position=&quot;fill&quot;) + theme_ipsum() p 2.2.10 Marginal distribution with ggplot2 and ggExtra This section explains how to add marginal distributions to the X and Y axis of a ggplot2 scatterplot. It can be done using histogram, boxplot or density plot using the ggExtra library. 2.2.10.1 Basic use of ggMarginal() Here are 3 examples of marginal distribution added on X and Y axis of a scatterplot. The ggExtra library makes it a breeze thanks to the ggMarginal() function. Three main types of distribution are available: histogram, density and boxplot. # library library(ggplot2) library(ggExtra) # The mtcars dataset is proposed in R head(mtcars) # classic plot : p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) + geom_point() + theme(legend.position=&quot;none&quot;) # with marginal histogram p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;) # marginal density p2 &lt;- ggMarginal(p, type=&quot;density&quot;) # marginal boxplot p3 &lt;- ggMarginal(p, type=&quot;boxplot&quot;) p1 p2 p3 2.2.10.2 More Customization Three additional examples to show possible customization: Change marginal plot size with size. Custom marginal plot appearance with all usual parameters. Show only one marginal plot with margins = 'x' or margins = 'y'. # library library(ggplot2) library(ggExtra) # The mtcars dataset is proposed in R head(mtcars) # classic plot : p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) + geom_point() + theme(legend.position=&quot;none&quot;) # Set relative size of marginal plots (main plot 10x bigger than marginals) p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;, size=10) # Custom marginal plots: p2 &lt;- ggMarginal(p, type=&quot;histogram&quot;, fill = &quot;slateblue&quot;, xparams = list( bins=10)) # Show only marginal plot for x axis p3 &lt;- ggMarginal(p, margins = &#39;x&#39;, color=&quot;purple&quot;, size=4) p1 p2 p3 2.3 Histogram Welcome to the histogram section of the R graph gallery. If you want to know more about this kind of chart, visit data-to-viz.com. If you’re looking for a simple way to implement it in R, pick an example below. 2.3.1 GGPLOT2 Histograms can be built with ggplot2 thanks to the geom_histogram() function. It requires only 1 numeric variable as input. This function automatically cut the variable in bins and count the number of data point per bin. Remember to try different bin size using the binwidth argument. 2.3.2 Basic histogram with ggplot2 A histogram is a representation of the distribution of a numeric variable. This document explains how to build it with R and the ggplot2 package. You can find more examples in the histogram section. 2.3.3 Basic Histogram with geom_histogram It is relatively straightforward to build a histogram with ggplot2 thanks to the geom_histogram() function. Only one numeric variable is needed in the input. Note that a warning message is triggered with this code: we need to take care of the bin width as explained in the next section. # library library(ggplot2) # dataset: data=data.frame(value=rnorm(100)) # basic histogram p &lt;- ggplot(data, aes(x=value)) + geom_histogram() p 2.3.4 Control Bin Size with binwidth A histogram takes as input a numeric variable and cuts it into several bins. Playing with the bin size is a very important step, since its value can have a big impact on the histogram appearance and thus on the message you’re trying to convey. This concept is explained in depth in data-to-viz. Ggplot2 makes it a breeze to change the bin size thanks to the binwidth argument of the geom_histogram function. See below the impact it can have on the output. # Libraries library(tidyverse) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/1_OneNum.csv&quot;, header=TRUE) # plot p &lt;- data %&gt;% filter( price&lt;300 ) %&gt;% ggplot( aes(x=price)) + geom_histogram( binwidth=3, fill=&quot;#69b3a2&quot;, color=&quot;#e9ecef&quot;, alpha=0.9) + ggtitle(&quot;Bin size = 3&quot;) + theme_ipsum() + theme( plot.title = element_text(size=15) ) p 2.3.5 Histogram with Several Groups - ggplot2 A histogram displays the distribution of a numeric variable. A common task is to compare this distribution through several groups. This document explains how to do so using R and ggplot2. 2.3.5.1 Several Histograms on the Same Axis If the number of group or variable you have is relatively low, you can display all of them on the same axis, using a bit of transparency to make sure you do not hide any data. Note: with 2 groups, you can also build a mirror histogram # library library(ggplot2) library(dplyr) library(hrbrthemes) # Build dataset with different distributions data &lt;- data.frame( type = c( rep(&quot;variable 1&quot;, 1000), rep(&quot;variable 2&quot;, 1000) ), value = c( rnorm(1000), rnorm(1000, mean=4) ) ) # Represent it p &lt;- data %&gt;% ggplot( aes(x=value, fill=type)) + geom_histogram( color=&quot;#e9ecef&quot;, alpha=0.6, position = &#39;identity&#39;) + scale_fill_manual(values=c(&quot;#69b3a2&quot;, &quot;#404080&quot;)) + theme_ipsum() + labs(fill=&quot;&quot;) p 2.3.6 Using Small Multiple If the number of group you need to represent is high, drawing them on the same axis often results in a cluttered and unreadable figure. A good workaround is to use small multiple where each group is represented in a fraction of the plot window, making the figure easy to read. This is pretty easy to build thanks to the facet_wrap() function of ggplot2. Note: read more about the dataset used in this example here. # Libraries library(tidyverse) library(hrbrthemes) library(viridis) library(forcats) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv&quot;, header=TRUE, sep=&quot;,&quot;) data &lt;- data %&gt;% gather(key=&quot;text&quot;, value=&quot;value&quot;) %&gt;% mutate(text = gsub(&quot;\\\\.&quot;, &quot; &quot;,text)) %&gt;% mutate(value = round(as.numeric(value),0)) # plot p &lt;- data %&gt;% mutate(text = fct_reorder(text, value)) %&gt;% ggplot( aes(x=value, color=text, fill=text)) + geom_histogram(alpha=0.6, binwidth = 5) + scale_fill_viridis(discrete=TRUE) + scale_color_viridis(discrete=TRUE) + theme_ipsum() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), strip.text.x = element_text(size = 8) ) + xlab(&quot;&quot;) + ylab(&quot;Assigned Probability (%)&quot;) + facet_wrap(~text) p 2.3.7 Base R Of course it is possible to build high quality histograms without ggplot2 or the tidyverse. Here are a few examples illustrating how to proceed. 2.3.8 Two Histograms with Melt Colors A histogram displays the distribution of a numeric variable. This sections explains how to plot 2 histograms on the same axis in Basic R, without any package. Histograms are commonly used in data analysis to observe distribution of variables. A common task in data visualization is to compare the distribution of 2 variables simultaneously. Here is a tip to plot 2 histograms together (using the add function) with transparency (using the rgb function) to keep information when shapes overlap. #Create data set.seed(1) Ixos=rnorm(4000 , 120 , 30) Primadur=rnorm(4000 , 200 , 30) # First distribution hist(Ixos, breaks=30, xlim=c(0,300), col=rgb(1,0,0,0.5), xlab=&quot;height&quot;, ylab=&quot;nbr of plants&quot;, main=&quot;distribution of height of 2 durum wheat varieties&quot; ) # Second with add=T to plot on top hist(Primadur, breaks=30, xlim=c(0,300), col=rgb(0,0,1,0.5), add=T) # Add legend legend(&quot;topright&quot;, legend=c(&quot;Ixos&quot;,&quot;Primadur&quot;), col=c(rgb(1,0,0,0.5), rgb(0,0,1,0.5)), pt.cex=2, pch=15 ) par( mfrow=c(1,2), mar=c(4,4,1,0) ) hist(Ixos, breaks=30 , xlim=c(0,300) , col=rgb(1,0,0,0.5) , xlab=&quot;height&quot; , ylab=&quot;nbr of plants&quot; , main=&quot;&quot; ) hist(Primadur, breaks=30 , xlim=c(0,300) , col=rgb(0,0,1,0.5) , xlab=&quot;height&quot; , ylab=&quot;&quot; , main=&quot;&quot;) 2.3.9 Boxplot on top of Histogram This example illustrates how to split the plotting window in base R thanks to the layout function. Contrary to the par(mfrow=...) solution, layout() allows greater control of panel parts. Here a boxplot is added on top of the histogram, allowing to quickly observe summary statistics of the distribution. # Create data my_variable=c(rnorm(1000 , 0 , 2) , rnorm(1000 , 9 , 2)) # Layout to split the screen layout(mat = matrix(c(1,2),2,1, byrow=TRUE), height = c(1,8)) # Draw the boxplot and the histogram par(mar=c(0, 3.1, 1.1, 2.1)) boxplot(my_variable , horizontal=TRUE , ylim=c(-10,20), xaxt=&quot;n&quot; , col=rgb(0.8,0.8,0,0.5) , frame=F) par(mar=c(4, 3.1, 1.1, 2.1)) hist(my_variable , breaks=40 , col=rgb(0.2,0.8,0.5,0.5) , border=F , main=&quot;&quot; , xlab=&quot;value of the variable&quot;, xlim=c(-10,20)) 2.3.10 Histogram with Colored Tail This example demonstrates how to color parts of the histogram. First of all, the hist function must be called without plotting the result using the plot=F option. It allows to store the position of each bin in an object (my_hist here). Those bin borders are now available in the $breaks slot of the object, what allows to build a color vector using ifelse statements. Finally, this color vector can be used in a plot call. # Create data my_variable=rnorm(2000, 0 , 10) # Calculate histogram, but do not draw it my_hist=hist(my_variable , breaks=40 , plot=F) # Color vector my_color= ifelse(my_hist$breaks &lt; -10, rgb(0.2,0.8,0.5,0.5) , ifelse (my_hist$breaks &gt;=10, &quot;purple&quot;, rgb(0.2,0.2,0.2,0.2) )) # Final plot plot(my_hist, col=my_color , border=F , main=&quot;&quot; , xlab=&quot;value of the variable&quot;, xlim=c(-40,40) ) 2.3.11 Mirrored Histogram in Base R The mirrored histogram allows to compare the distribution of 2 variables. First split the screen with the par(mfrow()) command. The top histogram needs a xaxt=\"n\" statement to discard its X axis. For the second one, inverse the values of the ylim argument to flip it upside down. Use the margin command to adjust the position of the 2 charts. #Create Data x1 = rnorm(100) x2 = rnorm(100)+rep(2,100) par(mfrow=c(2,1)) #Make the plot par(mar=c(0,5,3,3)) hist(x1 , main=&quot;&quot; , xlim=c(-2,5), ylab=&quot;Frequency for x1&quot;, xlab=&quot;&quot;, ylim=c(0,25) , xaxt=&quot;n&quot;, las=1 , col=&quot;slateblue1&quot;, breaks=10) par(mar=c(5,5,0,3)) hist(x2 , main=&quot;&quot; , xlim=c(-2,5), ylab=&quot;Frequency for x2&quot;, xlab=&quot;Value of my variable&quot;, ylim=c(25,0) , las=1 , col=&quot;tomato3&quot; , breaks=10) 2.3.12 Histogram without Border This sections explains how to get rid of histograms border in Basic R. It is purely about appearance preferences. Basically, you just need to add border=F to the hist function to remove the border of histogram bars. # Create data my_variable=c(rnorm(1000 , 0 , 2) , rnorm(1000 , 9 , 2)) # Draw the histogram with border=F hist(my_variable , breaks=40 , col=rgb(0.2,0.8,0.5,0.5) , border=F , main=&quot;&quot;) 2.4 Ridgeline Chart Welcome in the ridgeline chart section of the gallery. Sometimes called joyplot, this kind of chart allows to visualize the distribution of several numeric variables, as stated in data-to-viz.com. Here are several examples implemented using R and the ridgelines R package. 2.4.0.1 The ggridges Package In term of code, a ridgeline chart is simply a set of many density plots. Thus, starting by learning the basics of density chart is probably a good idea. 2.4.1 Basic Ridgeline Plot The ridgeline plot allows to study the distribution of a numeric variable for several groups. This document explains how to build it with R and the ggridges library. A Ridgelineplot (formerly called Joyplot) allows to study the distribution of a numeric variable for several groups. In this example, we check the distribution of diamond prices according to their quality. This graph is made using the ggridges library, which is a ggplot2 extension and thus respect the syntax of the grammar of graphic. We specify the price column for the X axis and the cut column for the Y axis. Adding fill=cut allows to use one colour per category and display them as separate groups. # library library(ggridges) library(ggplot2) # Diamonds dataset is provided by R natively #head(diamonds) # basic example ggplot(diamonds, aes(x = price, y = cut, fill = cut)) + geom_density_ridges() + theme_ridges() + theme(legend.position = &quot;none&quot;) 2.4.2 Shape Variation It is possible to represent the density with different aspects. For instance, using stat=\"binline\" makes a histogram like shape to represent each distribution. # library library(ggridges) library(ggplot2) library(dplyr) library(tidyr) library(forcats) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv&quot;, header=TRUE, sep=&quot;,&quot;) data &lt;- data %&gt;% gather(key=&quot;text&quot;, value=&quot;value&quot;) %&gt;% mutate(text = gsub(&quot;\\\\.&quot;, &quot; &quot;,text)) %&gt;% mutate(value = round(as.numeric(value),0)) %&gt;% filter(text %in% c(&quot;Almost Certainly&quot;,&quot;Very Good Chance&quot;,&quot;We Believe&quot;,&quot;Likely&quot;,&quot;About Even&quot;, &quot;Little Chance&quot;, &quot;Chances Are Slight&quot;, &quot;Almost No Chance&quot;)) # Plot data %&gt;% mutate(text = fct_reorder(text, value)) %&gt;% ggplot( aes(y=text, x=value, fill=text)) + geom_density_ridges(alpha=0.6, stat=&quot;binline&quot;, bins=20) + theme_ridges() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), strip.text.x = element_text(size = 8) ) + xlab(&quot;&quot;) + ylab(&quot;Assigned Probability (%)&quot;) 2.4.3 Color Relative to Numeric Value It is possible to set color depending on the numeric variable instead of the categoric one. (code from the ridgeline R package by Claus O. Wilke) # library library(ggridges) library(ggplot2) library(viridis) library(hrbrthemes) # Plot ggplot(lincoln_weather, aes(x = `Mean Temperature [F]`, y = `Month`, fill = ..x..)) + geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01) + scale_fill_viridis(name = &quot;Temp. [F]&quot;, option = &quot;C&quot;) + labs(title = &#39;Temperatures in Lincoln NE in 2016&#39;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), strip.text.x = element_text(size = 8) ) 2.5 Violin Violin plots allow to visualize the distribution of a numeric variable for one or several groups. They are very well adapted for large dataset, as stated in data-to-viz.com. Since group labels need to be read, it makes sense to build an horizontal version: labels become much more readable. This document provide an R implementation using ggplot2 and Base R. 2.5.1 Base R Violin Plot Violin plots are useful to compare the distribution of several groups. Ggplot2 provides a great way to build them, but the vioplot library is an alternative in case you don’t want to use the tidyverse. The Vioplot library builds the violin plot as a boxplot with a rotated kernel density plot on each side. If you want to represent several groups, the trick is to use the with function as demonstrated below. # Load the vioplot library library(vioplot) # Create data treatment &lt;- c(rep(&quot;A&quot;, 40) , rep(&quot;B&quot;, 40) , rep(&quot;C&quot;, 40) ) value &lt;- c( sample(2:5, 40 , replace=T) , sample(c(1:5,12:17), 40 , replace=T), sample(1:7, 40 , replace=T) ) data &lt;- data.frame(treatment,value) # Draw the plot with(data , vioplot( value[treatment==&quot;A&quot;] , value[treatment==&quot;B&quot;], value[treatment==&quot;C&quot;], col=rgb(0.1,0.4,0.7,0.7) , names=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) )) 2.5.2 Basic ggplot Violin Plot Building a violin plot with ggplot2 is pretty straightforward thanks to the dedicated geom_violin() function. # Library library(ggplot2) # create a dataset data &lt;- data.frame( name=c( rep(&quot;A&quot;,500), rep(&quot;B&quot;,500), rep(&quot;B&quot;,500), rep(&quot;C&quot;,20), rep(&#39;D&#39;, 100) ), value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) ) # Most basic violin chart p &lt;- ggplot(data, aes(x=name, y=value, fill=name)) + # fill=name allow to automatically dedicate a color for each group geom_violin() p 2.5.3 Note on Input Format Ggplot2 expects input data to be in a long format: each row is dedicated to one observation. Your input needs 2 column: A categorical variable for the X axis: Needs to be have the class factor. A numeric variable for the Y axis: Needs to have the class numeric. 2.5.3.1 From Long Format You already have the good format. It’s going to be a breeze to plot it with geom_violin() as follow: # Library library(ggplot2) library(dplyr) # Create data data &lt;- data.frame( name=c( rep(&quot;A&quot;,500), rep(&quot;B&quot;,500), rep(&quot;B&quot;,500), rep(&quot;C&quot;,20), rep(&#39;D&#39;, 100) ), value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) %&gt;% round(2) ) head(data) ## name value ## 1 A 11.75 ## 2 A 4.68 ## 3 A 3.22 ## 4 A 7.51 ## 5 A 18.28 ## 6 A 3.34 # Basic violin ggplot(data, aes(x=name, y=value, fill=name)) + geom_violin() 2.5.4 From Wide Format In this case we need to reformat the input. This is possible thanks to the gather() function of the tidyr library that is part of the tidyverse. # Let&#39;s use the iris dataset as an example: data_wide &lt;- iris[ , 1:4] head(data_wide) ## Sepal.Length Sepal.Width Petal.Length Petal.Width ## 1 5.1 3.5 1.4 0.2 ## 2 4.9 3.0 1.4 0.2 ## 3 4.7 3.2 1.3 0.2 ## 4 4.6 3.1 1.5 0.2 ## 5 5.0 3.6 1.4 0.2 ## 6 5.4 3.9 1.7 0.4 library(tidyr) library(ggplot2) library(dplyr) data_wide %&gt;% gather(key=&quot;MesureType&quot;, value=&quot;Val&quot;) %&gt;% ggplot( aes(x=MesureType, y=Val, fill=MesureType)) + geom_violin() 2.5.5 Reorder a variable with ggplot2 Reordering groups in a ggplot2 chart can be a struggle. This is due to the fact that ggplot2 takes into account the order of the factor levels, not the order you observe in your data frame. You can sort your input data frame with sort() or arrange(), it will never have any impact on your ggplot2 output. This section explains how to reorder the level of your factor through several examples. Examples are based on 2 dummy datasets: # Library library(ggplot2) library(dplyr) # Dataset 1: one value per group data &lt;- data.frame( name=c(&quot;north&quot;,&quot;south&quot;,&quot;south-east&quot;,&quot;north-west&quot;,&quot;south-west&quot;,&quot;north-east&quot;,&quot;west&quot;,&quot;east&quot;), val=sample(seq(1,10), 8 ) ) # Dataset 2: several values per group (natively provided in R) # mpg 2.5.6 Method 1: the forcats library The Forecats library is a library from the tidyverse especially made to handle factors in R. It provides a suite of useful tools that solve common problems with factors. The fact_reorder() function allows to reorder the factor. The fact_reorder() function allows to reorder the factor (data$name for example) following the value of another column (data$val here). # load the library library(forcats) # Reorder following the value of another column: data %&gt;% mutate(name = fct_reorder(name, val)) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#f68060&quot;, alpha=.6, width=.4) + coord_flip() + xlab(&quot;&quot;) + theme_bw() # Reverse side data %&gt;% mutate(name = fct_reorder(name, desc(val))) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#f68060&quot;, alpha=.6, width=.4) + coord_flip() + xlab(&quot;&quot;) + theme_bw() If you have several values per level of your factor, you can specify which function to apply to determine the order. The default is to use the median, but you can use the number of data points per group to make the classification: # Using median mpg %&gt;% mutate(class = fct_reorder(class, hwy, .fun=&#39;median&#39;)) %&gt;% ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) + geom_boxplot() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) # Using number of observation per group mpg %&gt;% mutate(class = fct_reorder(class, hwy, .fun=&#39;length&#39; )) %&gt;% ggplot( aes(x=class, y=hwy, fill=class)) + geom_boxplot() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) + xlab(&quot;&quot;) The last common operation is to provide a specific order to your levels, using the fct_relevel() function as follow: # Reorder following a precise order p &lt;- data %&gt;% mutate(name = fct_relevel(name, &quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;)) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;) + xlab(&quot;&quot;) p 2.5.7 Method 2: Using Dplyr Only The mutate() function of dplyr allows to create a new variable or modify an existing one. It is possible to use it to recreate a factor with a specific order. Here are 2 examples: The first use arrange() to sort your data frame, and reorder the factor following this desired order. The second specifies a custom order for the factor giving the levels one by one. data %&gt;% arrange(val) %&gt;% # First sort by val. This sort the dataframe but NOT the factor levels mutate(name=factor(name, levels=name)) %&gt;% # This trick update the factor levels ggplot( aes(x=name, y=val)) + geom_segment( aes(xend=name, yend=0)) + geom_point( size=4, color=&quot;orange&quot;) + coord_flip() + theme_bw() + xlab(&quot;&quot;) data %&gt;% arrange(val) %&gt;% mutate(name = factor(name, levels=c(&quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;))) %&gt;% ggplot( aes(x=name, y=val)) + geom_segment( aes(xend=name, yend=0)) + geom_point( size=4, color=&quot;orange&quot;) + theme_bw() + xlab(&quot;&quot;) 2.5.8 Method 3: the reorder() Function of Base R In case your an unconditional user of R, here is how to control the order using the reorder() function inside a with() call: # reorder is close to order, but is made to change the order of the factor levels. mpg$class = with(mpg, reorder(class, hwy, median)) p &lt;- mpg %&gt;% ggplot( aes(x=class, y=hwy, fill=class)) + geom_violin() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) p 2.5.9 Horizontal Violin Plot with ggplot2 Building a violin plot with ggplot2 is pretty straightforward thanks to the dedicated geom_violin() function. Here, calling coord_flip() allows to flip X and Y axis and thus get a horizontal version of the chart. Moreover, note the use of the theme_ipsum of the hrbrthemes library that improves general appearance. # Libraries library(ggplot2) library(dplyr) library(tidyr) library(forcats) library(hrbrthemes) library(viridis) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/zonination/perceptions/master/probly.csv&quot;, header=TRUE, sep=&quot;,&quot;) # Data is at wide format, we need to make it &#39;tidy&#39; or &#39;long&#39; data &lt;- data %&gt;% gather(key=&quot;text&quot;, value=&quot;value&quot;) %&gt;% mutate(text = gsub(&quot;\\\\.&quot;, &quot; &quot;,text)) %&gt;% mutate(value = round(as.numeric(value),0)) %&gt;% filter(text %in% c(&quot;Almost Certainly&quot;,&quot;Very Good Chance&quot;,&quot;We Believe&quot;,&quot;Likely&quot;,&quot;About Even&quot;, &quot;Little Chance&quot;, &quot;Chances Are Slight&quot;, &quot;Almost No Chance&quot;)) # Plot p &lt;- data %&gt;% mutate(text = fct_reorder(text, value)) %&gt;% # Reorder data ggplot( aes(x=text, y=value, fill=text, color=text)) + geom_violin(width=2.1, size=0.2) + scale_fill_viridis(discrete=TRUE) + scale_color_viridis(discrete=TRUE) + theme_ipsum() + theme( legend.position=&quot;none&quot; ) + coord_flip() + # This switch X and Y axis and allows to get the horizontal version xlab(&quot;&quot;) + ylab(&quot;Assigned Probability (%)&quot;) p 2.5.10 Violin Plot with included Boxplot and Sample Size in ggplot2 It can be handy to include a boxplot in the violin plot to see both the distribution of the data and its summary statistics. Moreover, adding sample size of each group on the X axis is often a necessary step. Here is how to do it with R and ggplot2. Building a violin plot with ggplot2 is pretty straightforward thanks to the dedicated geom_violin() function. It is possible to use geom_boxplot() with a small width in addition to display a boxplot that provides summary statistics. Moreover, note a small trick that allows to provide sample size of each group on the X axis: a new column called myaxis is created and is then used for the X axis. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) library(viridis) # create a dataset data &lt;- data.frame( name=c( rep(&quot;A&quot;,500), rep(&quot;B&quot;,500), rep(&quot;B&quot;,500), rep(&quot;C&quot;,20), rep(&#39;D&#39;, 100) ), value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) ) # sample size sample_size = data %&gt;% group_by(name) %&gt;% summarize(num=n()) # Plot data %&gt;% left_join(sample_size) %&gt;% mutate(myaxis = paste0(name, &quot;\\n&quot;, &quot;n=&quot;, num)) %&gt;% ggplot( aes(x=myaxis, y=value, fill=name)) + geom_violin(width=1.4) + geom_boxplot(width=0.1, color=&quot;grey&quot;, alpha=0.2) + scale_fill_viridis(discrete = TRUE) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;A Violin wrapping a boxplot&quot;) + xlab(&quot;&quot;) 2.5.11 Grouped Violin Chart with ggplot2 This is an extension of the classic violin plot. Here, data are organized in groups and subgroups, allowing to build a grouped violin chart. Chart is implemented using R and the ggplot2 library. A grouped violin plot displays the distribution of a numeric variable for groups and subgroups. Here, groups are days of the week, and subgroups are Males and Females. Ggplot2 allows this kind of representation thanks to the position=\"dodge\" option of the geom_violin() function. Groups must be provided to x, subgroups must be provided to fill. # Libraries library(ggplot2) library(dplyr) library(forcats) library(hrbrthemes) library(viridis) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/10_OneNumSevCatSubgroupsSevObs.csv&quot;, header=T, sep=&quot;,&quot;) %&gt;% mutate(tip = round(tip/total_bill*100, 1)) # Grouped data %&gt;% mutate(day = fct_reorder(day, tip)) %&gt;% mutate(day = factor(day, levels=c(&quot;Thur&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;))) %&gt;% ggplot(aes(fill=sex, y=tip, x=day)) + geom_violin(position=&quot;dodge&quot;, alpha=0.5, outlier.colour=&quot;transparent&quot;) + scale_fill_viridis(discrete=T, name=&quot;&quot;) + theme_ipsum() + xlab(&quot;&quot;) + ylab(&quot;Tip (%)&quot;) + ylim(0,40) "],
["correlation.html", "Chapter 3 Correlation 3.1 Bubble Plot 3.2 Connected Scatterplot 3.3 Density 2D 3.4 Scatterplot", " Chapter 3 Correlation Figure 3.1: Heatmap Normalization 3.1 Bubble Plot A bubble plot is a scatter plot with a third numeric variable mapped to circle size. This page describes several methods to build one with R. 3.1.0.1 A Bubble Chart is a Scatterplot A bubble chart is basically a scatterplot with a third numeric variable used for circle size. Thus, remember all the tips described in the scatterplot section also apply here. 3.1.0.2 Step by Step with ggplot2 ggplot2 allows to create bubble chart thanks to the geom_point() function. Next examples will lead you through the process step by step: 3.1.1 Most Basic bubble Chart with geom_point() A bubble plot is a scatterplot where a third dimension is added: the value of an additional numeric variable is represented through the size of the dots. (source: data-to-viz). With ggplot2, bubble chart are built thanks to the geom_point() function. At least three variable must be provided to aes(): x, y and size. The legend will automatically be built by ggplot2. Here, the relationship between life expectancy (y) and gdp per capita (x) of world countries is represented. The population of each country is represented through circle size. # Libraries library(ggplot2) library(dplyr) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot ggplot(data, aes(x=gdpPercap, y=lifeExp, size = pop)) + geom_point(alpha=0.7) 3.1.2 Control Circle Size with scale_size() The first thing we need to improve on the previous chart is the bubble size. scale_size() allows to set the size of the smallest and the biggest circles using the range argument. Note that you can customize the legend name with name. Note: circles often overlap. To avoid having big circles on top of the chart you have to reorder your dataset first, as in the code below. ToDo: give more details about how to map a numeric variable to circle size. Use of scale_radius, scale_size and scale_size_area. See this post. # Libraries library(ggplot2) library(dplyr) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot data %&gt;% arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) + geom_point(alpha=0.5) + scale_size(range = c(.1, 24), name=&quot;Population (M)&quot;) 3.1.3 Add a Fourth Dimension: Color If you have one more variable in your dataset, why not showing it using circle color? Here, the continent of each country is used to control circle color: # Libraries library(ggplot2) library(dplyr) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot data %&gt;% arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) + geom_point(alpha=0.5) + scale_size(range = c(.1, 24), name=&quot;Population (M)&quot;) 3.1.4 Make it Pretty A few classic improvement: Use of the viridis package for nice color palette. Use of theme_ipsum() of the hrbrthemes package. Custom axis titles with xlab and ylab. Add stroke to circle: change shape to 21 and specify color (stroke) and fill. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) library(viridis) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot data %&gt;% arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) + geom_point(alpha=0.5, shape=21, color=&quot;black&quot;) + scale_size(range = c(.1, 24), name=&quot;Population (M)&quot;) + scale_fill_viridis(discrete=TRUE, guide=FALSE, option=&quot;A&quot;) + theme_ipsum() + theme(legend.position=&quot;bottom&quot;) + ylab(&quot;Life Expectancy&quot;) + xlab(&quot;Gdp per Capita&quot;) + theme(legend.position = &quot;none&quot;) 3.1.5 Interactive Version Here is an interactive bubble chart built in R, thanks to the ggplotly() function of the plotly library. Try to hover circles to get a tooltip, or select an area of interest for zooming. Double click to reinitialize. 3.1.5.1 Interactive Bubble Chart This section explains how to build an interactive bubble chart with R, using ggplot2 and the ggplotly() function of the plotly package. 3.1.5.2 Most Basic Bubble Chart with geom_point() This section follows the previous step by step description of building bubble chart with ggplot2. The idea is to turn the chart interactive: You can zoom by selecting an area of interest Hover a circle to get information about it Export to png Slide axis Double click to re-initialize. This is done thanks to the ggplotly() function of the plotly package that turn any ggplot2 chart object interactive. Note the little trick to custom the tooltip content. # Libraries library(ggplot2) library(dplyr) library(plotly) library(viridis) library(hrbrthemes) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Interactive version p &lt;- data %&gt;% mutate(gdpPercap=round(gdpPercap,0)) %&gt;% mutate(pop=round(pop/1000000,2)) %&gt;% mutate(lifeExp=round(lifeExp,1)) %&gt;% # Reorder countries to having big bubbles on top arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% # prepare text for tooltip mutate(text = paste(&quot;Country: &quot;, country, &quot;\\nPopulation (M): &quot;, pop, &quot;\\nLife Expectancy: &quot;, lifeExp, &quot;\\nGdp per capita: &quot;, gdpPercap, sep=&quot;&quot;)) %&gt;% # Classic ggplot ggplot( aes(x=gdpPercap, y=lifeExp, size = pop, color = continent, text=text)) + geom_point(alpha=0.7) + scale_size(range = c(1.4, 19), name=&quot;Population (M)&quot;) + scale_color_viridis(discrete=TRUE, guide=FALSE) + theme_ipsum() + theme(legend.position=&quot;none&quot;) # turn ggplot interactive with plotly pp &lt;- ggplotly(p, tooltip=&quot;text&quot;) pp # save the widget # library(htmlwidgets) # saveWidget(pp, file=paste0( getwd(), &quot;/HtmlWidget/ggplotlyBubblechart.html&quot;)) 3.2 Connected Scatterplot Welcome to the connected scatterplot section of the gallery. If you want to know more about this kind of chart, visit data-to-viz.com. If you’re looking for a simple way to implement it in R and ggplot2, pick an example below. 3.2.1 Connected Scatterplot with R and Ggplot2 This section explains how to build a basic connected scatterplot with R and ggplot2. It provides several reproducible examples with explanation and R code. 3.2.1.1 Most Basic Connected Scatterplot: geom_point() and geom_line() A connected scatterplot is basically a hybrid between a scatterplot and a line plot. Thus, you just have to add a geom_point() on top of the geom_line() to build it. # Libraries library(ggplot2) library(dplyr) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Plot data %&gt;% tail(10) %&gt;% ggplot( aes(x=date, y=value)) + geom_line() + geom_point() 3.2.2 Customize the Connected Scatterplot Custom the general theme with the theme_ipsum() function of the hrbrthemes package. Add a title with ggtitle(). Custom circle and line with arguments like shape, size, color and more. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Plot data %&gt;% tail(10) %&gt;% ggplot( aes(x=date, y=value)) + geom_line( color=&quot;grey&quot;) + geom_point(shape=21, color=&quot;black&quot;, fill=&quot;#69b3a2&quot;, size=6) + theme_ipsum() + ggtitle(&quot;Evolution of bitcoin price&quot;) 3.2.3 Connected Scatterplot to show an Evolution The connected scatterplot can also be a powerfull technique to tell a story about the evolution of 2 variables. Let???s consider a dataset composed of 3 columns: Year Number of baby born called Amanda this year Number of baby born called Ashley The scatterplot beside allows to understand the evolution of these 2 names. Note that the code is pretty different in this case. geom_segment() is used of geom_line(). This is because geom_line() automatically sort data points depending on their X position to link them. # Libraries library(ggplot2) library(dplyr) library(babynames) library(ggrepel) library(tidyr) # data data &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Amanda&quot;)) %&gt;% filter(sex==&quot;F&quot;) %&gt;% filter(year&gt;1970) %&gt;% dplyr::select(year, name, n) %&gt;% spread(key = name, value=n, -1) # plot data %&gt;% ggplot(aes(x=Amanda, y=Ashley, label=year)) + geom_point() + geom_segment(aes( xend=c(tail(Amanda, n=-1), NA), yend=c(tail(Ashley, n=-1), NA) ) ) It makes sense to add arrows and labels to guide the reader in the chart: # data data &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Amanda&quot;)) %&gt;% filter(sex==&quot;F&quot;) %&gt;% filter(year&gt;1970) %&gt;% dplyr::select(year, name, n) %&gt;% spread(key = name, value=n, -1) # Select a few date to label the chart tmp_date &lt;- data %&gt;% sample_frac(0.3) # plot data %&gt;% ggplot(aes(x=Amanda, y=Ashley, label=year)) + geom_point(color=&quot;#69b3a2&quot;) + geom_text_repel(data=tmp_date) + geom_segment(color=&quot;#69b3a2&quot;, aes( xend=c(tail(Amanda, n=-1), NA), yend=c(tail(Ashley, n=-1), NA) ), arrow=arrow(length=unit(0.3,&quot;cm&quot;)) ) + theme_ipsum() 3.2.4 Connected Scatterplot for Time Series Connected scatterplots are often used for time series. Remember the R graph gallery offers a dedicated section, with heaps of examples. For instance, here is an interactive chart made with the dygraphs library. # Library library(dygraphs) library(xts) # To make the convertion data-frame / xts format library(tidyverse) library(lubridate) # Read the data (hosted on the gallery website) data &lt;- read.table(&quot;https://python-graph-gallery.com/wp-content/uploads/bike.csv&quot;, header=T, sep=&quot;,&quot;) %&gt;% head(300) # Check type of variable # str(data) # Since my time is currently a factor, I have to convert it to a date-time format! data$datetime &lt;- ymd_hms(data$datetime) # Then you can create the xts necessary to use dygraph don &lt;- xts(x = data$count, order.by = data$datetime) # Finally the plot p &lt;- dygraph(don) %&gt;% dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors=&quot;#D8AE5A&quot;) %&gt;% dyRangeSelector() %&gt;% dyCrosshair(direction = &quot;vertical&quot;) %&gt;% dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %&gt;% dyRoller(rollPeriod = 1) # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs318.html&quot;)) 3.2.5 Connected Scatterplot using Base R Basic R also allows to build connected scatterplot thanks to the line() function. You just need to use the b option of the type argument. See examples below. 3.2.5.1 Add a Legend to a Base R Chart This section explains how to add a legend to a chart made with base R, using the legend() function. It provides several reproducible examples with explanation and R code. It is done using the legend() function. The main arguments are: This page aims to explain how to add a legend to a plot made in base R. It is done using the legend() function. The main arguments are: legend: names to display bty: type of box around the legend. See graph #73 horiz: legend in column or in row col: symbol color pch: symbol type. See graph #6 pt.cex: symbol size cex: text size text.col: text color topright: legend position: bottomright, bottom, bottomleft, left, topleft, top, topright, right, center inset: % (from 0 to 1) to draw the legend away from x and y axis You can also give the X and Y coordinate of the legend: legend(3, 5, ...) Note that an equivalent page exist concerning legends with ggplot2. # Create data: a=c(1:5) b=c(5,3,4,5,5) c=c(4,5,4,3,1) # Make a basic graph plot( b~a , type=&quot;b&quot; , bty=&quot;l&quot; , xlab=&quot;value of a&quot; , ylab=&quot;value of b&quot; , col=rgb(0.2,0.4,0.1,0.7) , lwd=3 , pch=17 , ylim=c(1,5) ) lines(c ~a , col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type=&quot;b&quot; ) # Add a legend legend(&quot;bottomleft&quot;, legend = c(&quot;Group 1&quot;, &quot;Group 2&quot;), col = c(rgb(0.2,0.4,0.1,0.7), rgb(0.8,0.4,0.1,0.7)), pch = c(17,19), bty = &quot;n&quot;, pt.cex = 2, cex = 1.2, text.col = &quot;black&quot;, horiz = F , inset = c(0.1, 0.1)) 3.2.6 Manage Dates Data with Base R This section explains how to deal with date data in base R. It takes a connected scatterplot as an example and display several options to deal with dates. 3.2.6.1 Important note about the lubridate() library. I strongly advise to have a look to the lubridate() library. It allows to easily manipulate the date format, and is very powerful in conjunction with ggplot2. Have a look to the time series section of the gallery. 3.2.6.1.1 Is your date recognized as a date? R offers a special data type for dates. It is important to use it since it will make the creation of charts lot easier. The str() function allows to check the type of each column. In the example beside, the date column is recognized as a factor. # Create data set.seed(124) date &lt;- paste( &quot;2015/03/&quot; , sample(seq(1,31),6) , sep=&quot;&quot;) value &lt;- sample(seq(1,100) , 6) data &lt;- data.frame(date,value) # Date and time are recognized as factor: str(data) ## &#39;data.frame&#39;:\t6 obs. of 2 variables: ## $ date : chr &quot;2015/03/1&quot; &quot;2015/03/7&quot; &quot;2015/03/10&quot; &quot;2015/03/27&quot; ... ## $ value: int 6 45 74 33 15 91 3.2.6.2 Why it Matters The issue is that your plot is gonna be very disappointing if the date is not recognized properly, as shown beside # Create data set.seed(124) date &lt;- paste(&quot;2015/03/&quot; , sample(seq(1,31),6) , sep=&quot;&quot;) value &lt;- sample(seq(1,100) , 6) data &lt;- data.frame(date,value) # Date and time are recognized as factor: str(data) ## &#39;data.frame&#39;:\t6 obs. of 2 variables: ## $ date : chr &quot;2015/03/1&quot; &quot;2015/03/7&quot; &quot;2015/03/10&quot; &quot;2015/03/27&quot; ... ## $ value: int 6 45 74 33 15 91 3.2.7 Switch to Date Format You can use the as.Date() function to specify that a column is at the date format. Now, with a bit of customization, we can get a nice connected scatterplot from our data: # Create data set.seed(124) date &lt;- paste( &quot;2015/03/&quot; , sample(seq(1,31),6) , sep=&quot;&quot;) value &lt;- sample(seq(1,100) , 6) data &lt;- data.frame(date,value) # Let&#39;s change the date to the &quot;date&quot; format: data$date &lt;- as.Date(data$date) # So we can sort the table: data &lt;- data[order(data$date) , ] # Easy to make it better now: plot(data$value~data$date , type=&quot;b&quot; , lwd=3 , col=rgb(0.1,0.7,0.1,0.8) , ylab=&quot;value of ...&quot; , xlab=&quot;date&quot; , bty=&quot;l&quot; , pch=20 , cex=4) abline(h=seq(0,100,10) , col=&quot;grey&quot;, lwd=0.8) 3.2.8 Base R Graph Parameters: Cheatsheet This section aims to remind the options offered to customize a graph in base R. Understand in a sec how to use lwd, pch, type, lty, cex, and more. Base R offers many option to customize the chart appearance. Basically everthing is double with those few options: cex: shape size lwd: line width col: control colors lty: line type pch: marker shape type: link between dots Note: visit the cheatsheet section for more. # initialization par(mar=c(3,3,3,3)) num &lt;- 0 ; num1 &lt;- 0 plot(0,0 , xlim=c(0,21) , ylim=c(0.5,6.5), col=&quot;white&quot; , yaxt=&quot;n&quot; , ylab=&quot;&quot; , xlab=&quot;&quot;) #fill the graph for (i in seq(1,20)){ points(i,1 , pch=i , cex=3) points(i,2 , col=i , pch=16 , cex=3) points(i,3 , col=&quot;black&quot; , pch=16 , cex=i*0.25) #lty if(i %in% c(seq(1,18,3))){ num=num+1 points(c(i,i+2), c(4,4) , col=&quot;black&quot; , lty=num , type=&quot;l&quot; , lwd=2) text(i+1.1 , 4.15 , num) } #type and lwd if(i %in% c(seq(1,20,5))){ num1=num1+1 points(c(i,i+1,i+2,i+3), c(5,5,5,5) , col=&quot;black&quot; , type=c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;)[num1] , lwd=2) text(i+1.1 , 5.2 , c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;)[num1] ) points(c(i,i+1,i+2,i+3), c(6,6,6,6) , col=&quot;black&quot; , type=&quot;l&quot;, lwd=num1) text(i+1.1 , 6.2 , num1 ) } } #add axis axis(2, at = c(1,2,3,4,5,6), labels = c(&quot;pch&quot; , &quot;col&quot; , &quot;cex&quot; , &quot;lty&quot;, &quot;type&quot; , &quot;lwd&quot; ), tick = TRUE, col = &quot;black&quot;, las = 1, cex.axis = 0.8) 3.3 Density 2D A 2D density chart displays the relationship between 2 numeric variables. One is represented on the X axis, the other on the Y axis, like for a scatterplot. Then, the number of observations within a particular area of the 2D space is counted and represented by a color gradient. Several types of 2d density chart exist: 3.3.0.1 2d Histogram with geom_bin2d() This is the two dimension version of the classic histogram. The plot area is split in a multitude of small squares, the number of points in each square is represented by its color. 3.3.1 The Issue with geom_point() A 2d density plot is useful to study the relationship between 2 numeric variables if you have a huge number of points. To avoid overlapping (as in the scatterplot beside), it divides the plot area in a multitude of small fragment and represents the number of points in this fragment. There are several types of 2d density plots. Each has its proper ggplot2 function. This section describes all of them. # Library library(tidyverse) # Data a &lt;- data.frame( x=rnorm(20000, 10, 1.9), y=rnorm(20000, 10, 1.2) ) b &lt;- data.frame( x=rnorm(20000, 14.5, 1.9), y=rnorm(20000, 14.5, 1.9) ) c &lt;- data.frame( x=rnorm(20000, 9.5, 1.9), y=rnorm(20000, 15.5, 1.9) ) data &lt;- rbind(a,b,c) # Basic scatterplot ggplot(data, aes(x=x, y=y) ) + geom_point()# 2d histogram with default option ggplot(data, aes(x=x, y=y) ) + geom_bin2d() + theme_bw() 3.3.2 2d Histogram with geom_bin2d() This is the two dimension version of the classic histogram. The plot area is split in a multitude of small squares, the number of points in each square is represented by its color. For 2d histogram, the plot area is divided in a multitude of squares. (It is a 2d version of the classic histogram). It is called using the geom_bin_2d() function. This function offers a bins argument that controls the number of bins you want to display. Note: If you’re not convinced about the importance of the bins option, read this. # 2d histogram with default option ggplot(data, aes(x=x, y=y) ) + geom_bin2d() + theme_bw() # Bin size control + color palette ggplot(data, aes(x=x, y=y) ) + geom_bin2d(bins = 70) + scale_fill_continuous(type = &quot;viridis&quot;) + theme_bw() 3.3.3 Hexbin Chart with geom_hex() Another alternative is to divide the plot area in a multitude of hexagons: it is thus called a hexbin chart, and is made using the geom_hex() function. This function provides the bins argument as well, to control the number of division per axis. # Hexbin chart with default option ggplot(data, aes(x=x, y=y) ) + geom_hex() + theme_bw() # Bin size control + color palette ggplot(data, aes(x=x, y=y) ) + geom_hex(bins = 70) + scale_fill_continuous(type = &quot;viridis&quot;) + theme_bw() 3.3.4 2d Distribution with geom_density_2d or stat_density_2d As you can plot a density chart instead of a histogram, it is possible to compute a 2d density and represent it. Several possibilities are offered by ggplot2: you can show the contour of the distribution, or the area, or use the raster function: # Show the contour only ggplot(data, aes(x=x, y=y) ) + geom_density_2d() # Show the area only ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..level..), geom = &quot;polygon&quot;) # Area + contour ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..level..), geom = &quot;polygon&quot;, colour=&quot;white&quot;) # Using raster ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..density..), geom = &quot;raster&quot;, contour = FALSE) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme( legend.position=&#39;none&#39; ) 3.3.5 Customize the Color Palette Whatever you use a 2d histogram, a hexbin chart or a 2d distribution, you can and should custom the colour of your chart. Here is a suggestion using the scale_fill_distiller() function. You can see other methods in the ggplot2 section of the gallery. # Call the palette with a number ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..density..), geom = &quot;raster&quot;, contour = FALSE) + scale_fill_distiller(palette=4, direction=-1) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme( legend.position=&#39;none&#39; ) # The direction argument allows to reverse the palette ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..density..), geom = &quot;raster&quot;, contour = FALSE) + scale_fill_distiller(palette=4, direction=1) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme( legend.position=&#39;none&#39; ) # You can also call the palette using a name. ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..density..), geom = &quot;raster&quot;, contour = FALSE) + scale_fill_distiller(palette= &quot;Spectral&quot;, direction=1) + scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0)) + theme( legend.position=&#39;none&#39; ) 3.3.6 Hexbin Chart with the Hexbin Package This section explains how to build a hexbin chart with R using the hexbin package. Hexbin chart is a 2d density chart, allowing to visualize the relationship between 2 numeric variables. Scatterplots can get very hard to interpret when displaying large datasets, as points inevitably overplot and can’t be individually discerned. Binning can be though of as a two-dimensional histogram, where shades of the bins take the place of the heights of the bars. This technique is computed in the hexbin package. This example has been published by Myles Harrison on R-bloggers. # Packages library(hexbin) library(RColorBrewer) # Create data x &lt;- rnorm(mean=1.5, 5000) y &lt;- rnorm(mean=1.6, 5000) # Make the plot bin&lt;-hexbin(x, y, xbins=40) my_colors=colorRampPalette(rev(brewer.pal(11,&#39;Spectral&#39;))) plot(bin, main=&quot;&quot; , colramp=my_colors , legend=F ) 3.3.7 Hexbin Chart and Scatterplot with Ggplot2 This section explains how to build a hexbin chart with a scatterplot on top using R and ggplot2. It is an addition to the page about 2d density plot with ggplot2. This plot extends the concepts described in the 2d density chart with ggplot2 document. It simply illustrates that a scatterplot can be added on top of the 2d density chart. Thanks Christian Jacob for this submission. # library library(ggplot2) # data sample_data &lt;- data.frame(x_values = 1:100 + rnorm(100,sd=20), y_values = 1:100 + rnorm(100,sd=27)) #plot ggplot(sample_data, aes(x_values, y_values)) + stat_density2d(geom=&quot;tile&quot;, aes(fill = ..density..), contour = FALSE) + geom_point(colour = &quot;white&quot;) 3.4 Scatterplot A Scatterplot displays the relationship between 2 numeric variables. Each dot represents an observation. Their position on the X (horizontal) and Y (vertical) axis represents the values of the 2 variables. 3.4.0.1 Using the ggplot2 Package Scatterplots are built with ggplot2 thanks to the geom_point() function. Discover a basic use case in graph #272, and learn how to custom it with next examples below. Basic scatterplot with R and ggplot2. A scatterplot displays the values of two variables along two axes. It shows the relationship between them, eventually revealing a correlation. A scatterplot displays the values of two variables along two axes. It shows the relationship between them, eventually revealing a correlation. Here the relationship between Sepal width and Sepal length of several plants is shown. It illustrates the basic utilization of ggplot2 for scatterplots: Provide a dataframe. Tell which variable to show on x and y axis. Add a geom_point() to show points. # library library(ggplot2) # The iris dataset is provided natively by R #head(iris) # basic scatterplot ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point() 3.4.1 Custom ggplot2 Scatterplot This post is dedicated to customization you can apply to a scatterplot built with ggplot2. This post follows the previous basic scatterplot with ggplot2. It shows the kind of customization you can apply to circles thanks to the geom_point() options: color: the stroke color, the circle outline stroke: the stroke width fill: color of the circle inner part shape: shape of the marker. See list in the ggplot2 section alpha: circle transparency, [0-&gt;1], 0 is fully transparent color: the stroke color, the circle outline size: circle size Note: These options will be uniform among markers if you put it in the geom_point() call. You can also map them to a variable if put inside the aes() part of the code. # library library(ggplot2) # Iris dataset is natively provided by R #head(iris) # use options! ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point( color=&quot;orange&quot;, fill=&quot;#69b3a2&quot;, shape=21, alpha=0.5, size=6, stroke = 2 ) 3.4.2 Using theme_ipsum Note that applying the theme_ipsum of the hrbrthemes package is always a good option. # library library(ggplot2) library(hrbrthemes) # Iris dataset is natively provided by R #head(iris) # use options! ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) + geom_point( color=&quot;black&quot;, fill=&quot;#69b3a2&quot;, shape=22, alpha=0.5, size=6, stroke = 1 ) + theme_ipsum() 3.4.3 Map a Variable to Marker Feature in ggplot2 Scatterplot ggplot2 allows to easily map a variable to marker features of a scatterplot. This section explaines how it works through several examples, with explanation and code. 3.4.3.1 Basic Example Here is the magic of ggplot2: the ability to map a variable to marker features. Here, the marker color depends on its value in the field called Species in the input data frame. Note that the legend is built automatically. # load ggplot2 library(ggplot2) library(hrbrthemes) # mtcars dataset is natively available in R # head(mtcars) # A basic scatterplot with color depending on Species ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point(size=6) + theme_ipsum() 3.4.4 Works with any Aesthetics Map variables to any marker features. For instance, specie is represente below using transparency (left), shape (middle) and size (right). # load ggplot2 library(ggplot2) library(hrbrthemes) # Transparency ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, alpha=Species)) + geom_point(size=6, color=&quot;#69b3a2&quot;) + theme_ipsum() # Shape ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + geom_point(size=6) + theme_ipsum() # Size ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + geom_point(size=6) + theme_ipsum() 3.4.5 Mapping to Several Features Last but not least, note that you can map one or several variables to one or several features. Here, shape, transparency, size and color all depends on the marker Species value. # load ggplot2 library(ggplot2) library(hrbrthemes) # A basic scatterplot with color depending on Species ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species, alpha=Species, size=Species, color=Species)) + geom_point() + theme_ipsum() 3.4.6 Add Text Labels with ggplot2 This document is dedicated to text annotation with ggplot2. It provides several examples with reproducible code showing how to use function like geom_label and geom_text. 3.4.6.1 Adding Text with geom_text() This example demonstrates how to use geom_text() to add text as markers. It works pretty much the same as geom_point(), but add text instead of circles. A few arguments must be provided: label: What text you want to display. nudge_x and nudge_y: Shifts the text along X and Y axis. check_overlap: Tries to avoid text overlap. Note that a package called ggrepel extends this concept further. # library library(ggplot2) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # 1/ add text with geom_text, use nudge to nudge the text ggplot(data, aes(x=wt, y=mpg)) + geom_point() + # Show dots geom_text( label=rownames(data), nudge_x = 0.25, nudge_y = 0.25, check_overlap = T ) 3.4.7 Add Labels with geom_label() geom_label() works pretty much the same way as geom_text(). However, text is wrapped in a rectangle that you can customize (see next example). # library library(ggplot2) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # 1/ add text with geom_text, use nudge to nudge the text ggplot(data, aes(x=wt, y=mpg)) + geom_point() + # Show dots geom_label( label=rownames(data), nudge_x = 0.25, nudge_y = 0.25, check_overlap = T ) 3.4.8 Add One Text Label Only Of course, you don’t have to label all dots on the chart. You can also add a piece of text on a specific position. Since we’re here, note that you can custom the annotation of geom_label with label.padding, label.size, color and fill as described below: # library library(ggplot2) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # Add one annotation ggplot(data, aes(x=wt, y=mpg)) + geom_point() + # Show dots geom_label( label=&quot;Look at this!&quot;, x=4.1, y=20, label.padding = unit(0.55, &quot;lines&quot;), # Rectangle size around label label.size = 0.35, color = &quot;black&quot;, fill=&quot;#69b3a2&quot; ) 3.4.9 Add Labels for a Selection of Marker Last but not least, you can also select a group of marker and annotate them only. Here, only car with mpg &gt; 20 and wt &gt; 3 are annotated thanks to a data filtering in the geom_label() call. # library library(ggplot2) library(dplyr) library(tibble) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # Change data rownames as a real column called &#39;carName&#39; data &lt;- data %&gt;% rownames_to_column(var=&quot;carName&quot;) # Plot ggplot(data, aes(x=wt, y=mpg)) + geom_point() + geom_label( data=data %&gt;% filter(mpg&gt;20 &amp; wt&gt;3), # Filter data first aes(label=carName) ) 3.4.10 Ggplot2 Scatterplot with Rug This section demonstrates how to build a scatterplot with rug with R and ggplot2. Adding rug gives insight about variable distribution and is especially helpful when markers overlap. 3.4.10.1 Adding Rug with geom_rug() A scatterplot displays the relationship between 2 numeric variables. You can easily add rug on X and Y axis thanks to the geom_rug() function to illustrate the distribution of dots. Note you can as well add marginal plots to show these distributions. # library library(ggplot2) # Iris dataset head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa # plot ggplot(data=iris, aes(x=Sepal.Length, Petal.Length)) + geom_point() + geom_rug(col=&quot;steelblue&quot;,alpha=0.1, size=1.5) 3.4.11 Marginal Distribution with ggplot2 and ggExtra This section explains how to add marginal distributions to the X and Y axis of a ggplot2 scatterplot. It can be done using histogram, boxplot or density plot using the ggExtra library. 3.4.11.1 Basic use of ggMarginal() Here are 3 examples of marginal distribution added on X and Y axis of a scatterplot. The ggExtra library makes it a breeze thanks to the ggMarginal() function. Three main types of distribution are available: histogram, density and boxplot. Three additional examples to show possible customization: Change marginal plot size with size. Custom marginal plot appearance with all usual parameters. show only one marginal plot with margins = 'x' or margins = 'y'. # library library(ggplot2) library(ggExtra) # The mtcars dataset is proposed in R head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # classic plot : p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) + geom_point() + theme(legend.position=&quot;none&quot;) # with marginal histogram p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;) # marginal density p2 &lt;- ggMarginal(p, type=&quot;density&quot;) # marginal boxplot p3 &lt;- ggMarginal(p, type=&quot;boxplot&quot;) 3.4.12 More Customization Three additional examples to show possible customization: Change marginal plot size with size Custom marginal plot appearance with all usual parameters Show only one marginal plot with margins = ‘x’ or margins = ‘y’ # library library(ggplot2) library(ggExtra) # The mtcars dataset is proposed in R head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 # classic plot : p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) + geom_point() + theme(legend.position=&quot;none&quot;) # Set relative size of marginal plots (main plot 10x bigger than marginals) p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;, size=10) # Custom marginal plots: p2 &lt;- ggMarginal(p, type=&quot;histogram&quot;, fill = &quot;slateblue&quot;, xparams = list( bins=10)) # Show only marginal plot for x axis p3 &lt;- ggMarginal(p, margins = &#39;x&#39;, color=&quot;purple&quot;, size=4) p1 p2 p3 3.4.13 Linear Model and Confidence Interval in ggplot2 Display the result of a linear model and its confidence interval on top of a scatterplot. A ggplot2 implementation with reproducible code. 3.4.13.1 Linear Trend Adding a linear trend to a scatterplot helps the reader in seeing patterns. ggplot2 provides the geom_smooth() function that allows to add the linear trend and the confidence interval around it if needed (option se=TRUE). Note: The method argument allows to apply different smoothing method like glm, loess and more. See the doc for more. # Library library(ggplot2) library(hrbrthemes) # Create dummy data data &lt;- data.frame( cond = rep(c(&quot;condition_1&quot;, &quot;condition_2&quot;), each=10), my_x = 1:100 + rnorm(100,sd=9), my_y = 1:100 + rnorm(100,sd=16) ) # Basic scatter plot. p1 &lt;- ggplot(data, aes(x=my_x, y=my_y)) + geom_point( color=&quot;#69b3a2&quot;) + theme_ipsum() # with linear trend p2 &lt;- ggplot(data, aes(x=my_x, y=my_y)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, se=FALSE) + theme_ipsum() # linear trend + confidence interval p3 &lt;- ggplot(data, aes(x=my_x, y=my_y)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + theme_ipsum() p1 p2 p3 3.4.14 Using Base R Base R is also a good option to build a scatterplot, using the plot() function. The chart #13 below will guide you through its basic usage. Following examples allow a greater level of customization. 3.4.14.1 Basic Scatterplot in Base R A very basic scatterplot built with base R and the plot() function. Explanation and code provided. 3.4.14.2 Most Basic Scatterplot The plot() function of R allows to build a scatterplot. Both numeric variables of the input dataframe must be specified in the x and y argument. # Create data data = data.frame( x=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T), y=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T) ) # Basic scatterplot plot(x=data$x, y=data$y) 3.4.14.3 Customizations Here is a description of the most common customization: cex: circle size xlim and ylim: limits of the X and Y axis pch: shape of markers. See all here. xlab and ylab: X and Y axis labels col: marker color main: chart title # Create data data = data.frame( x=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T), y=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T) ) # Basic scatterplot plot(data$x, data$y, xlim=c(0,250) , ylim=c(0,250), pch=18, cex=2, col=&quot;#69b3a2&quot;, xlab=&quot;value of X&quot;, ylab=&quot;value of Y&quot;, main=&quot;A simple scatterplot&quot; ) 3.4.15 Map the Marker Color to a Categorical Variable # the iris dataset is provided by R natively # Create a color palette library(paletteer) colors &lt;- paletteer_c(package = &quot;ggthemes&quot;, palette = &quot;Green-Blue-White&quot;, n = 3) # Scatterplot with categoric color scale plot( x = iris$Petal.Length, y = iris$Petal.Width, bg = colors[ unclass(iris$Species) ], cex = 3, pch=21 ) 3.4.16 Map the Marker Color to a Numeric Variable # the iris dataset is provided by R natively # Create a color palette library(paletteer) nColor &lt;- 20 colors &lt;- paletteer_c(package = &quot;viridis&quot;, palette = &quot;inferno&quot;, n = nColor) # Transform the numeric variable in bins rank &lt;- as.factor( as.numeric( cut(iris$Petal.Width, nColor))) # Scatterplot with color gradient plot( x = iris$Petal.Length, y = iris$Petal.Width, bg = colors[ rank ], cex = 3, pch=21 ) 3.4.17 Scatterplot with Polynomial Curve Fitting This example describes how to build a scatterplot with a polynomial curve drawn on top of it. First of all, a scatterplot is built using the native R plot() function. Then, a polynomial model is fit thanks to the lm() function. First of all, a scatterplot is built using the native R plot() function. Then, a polynomial model is fit thanks to the lm() function. It is possible to have the estimated Y value for each step of the X axis using the predict() function, and plot it with line(). It is a good practice to add the equation of the model with text(). Note: You can also add a confidence interval around the model as described in chart #45. x &lt;- runif(300, min=-10, max=10) y &lt;- 0.1*x^3 - 0.5 * x^2 - x + 10 + rnorm(length(x),0,8) # plot of x and y : plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3) # Can we find a polynome that fit this function ? model &lt;- lm(y ~ x + I(x^2) + I(x^3)) #Features of this model : #summary(model) #model$coefficients #summary(model)$adj.r.squared # For each value of x, I can get the value of y estimated by the model, and add it to the current plot ! myPredict &lt;- predict( model ) ix &lt;- sort(x,index.return=T)$ix lines(x[ix], myPredict[ix], col=2, lwd=2 ) # Add the features of the model to the plot coeff &lt;- round(model$coefficients , 2) text(3, -70 , paste(&quot;Model : &quot;,coeff[1] , &quot; + &quot; , coeff[2] , &quot;*x&quot; , &quot;+&quot; , coeff[3] , &quot;*x^2&quot; , &quot;+&quot; , coeff[4] , &quot;*x^3&quot; , &quot;\\n\\n&quot; , &quot;P-value adjusted = &quot;,round(summary(model)$adj.r.squared,2))) 3.4.18 Polynomial Curve Fitting and Confidence Interval This example follows the previous scatterplot with polynomial curve. It extends this example, adding a confidence interval.This example follows the previous chart #44 that explained how to add polynomial curve on top of a scatterplot in base R. Here, a confidence interval is added using the polygon() function. # We create 2 vectors x and y. It is a polynomial function. x &lt;- runif(300, min=-30, max=30) y &lt;- -1.2*x^3 + 1.1 * x^2 - x + 10 + rnorm(length(x),0,100*abs(x)) # Basic plot of x and y : plot(x,y,col=rgb(0.4,0.4,0.8,0.6), pch=16 , cex=1.3 , xlab=&quot;&quot; , ylab=&quot;&quot;) # Can we find a polynome that fit this function ? model &lt;- lm(y ~ x + I(x^2) + I(x^3)) # I can get the features of this model : #summary(model) #model$coefficients #summary(model)$adj.r.squared #For each value of x, I can get the value of y estimated by the model, and the confidence interval around this value. myPredict &lt;- predict( model , interval=&quot;predict&quot; ) #Finally, I can add it to the plot using the line and the polygon function with transparency. ix &lt;- sort(x,index.return=T)$ix lines(x[ix], myPredict[ix , 1], col=2, lwd=2 ) polygon(c(rev(x[ix]), x[ix]), c(rev(myPredict[ ix,3]), myPredict[ ix,2]), col = rgb(0.7,0.7,0.7,0.4) , border = NA) 3.4.19 Lattice XY Plot Function The xyplot() function of the lattice package allows to build a scatterplot for several categories automatically. The lattice library offers the xyplot() function. It builds a scatterplot for each levels of a factor automatically. The lattice library offers the xyplot() function. It builds a scatterplot for each levels of a factor automatically. It is actually the ancestor of the geom_wrap() function of ggplot2 than you can see in action here. # Library library(lattice) # create data : sample &lt;- paste(rep(&quot;sample_&quot;,40) , seq(1,40) , sep=&quot;&quot;) specie &lt;- c(rep(&quot;carot&quot; , 10) , rep(&quot;cumcumber&quot; , 10) , rep(&quot;wheat&quot; , 10) , rep(&quot;Potatoe&quot; , 10) ) gene1 &lt;- c( seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 4 , 1) ) gene2 &lt;- c( seq(5,14)+rnorm(10 , 4 , 1) , seq(5,14)+rnorm(10 , 2 , 0.2) , seq(5,14)+rnorm(10 , 4 , 4) , seq(5,14)+rnorm(10 , 4 , 3) ) data &lt;- data.frame(sample,specie,gene1,gene2) # Make the graph xyplot(gene1 ~ gene2 | specie , data=data , pch=20 , cex=3 , col=rgb(0.2,0.4,0.8,0.5) ) 3.4.20 Correlation between Discrete Variable Studying the relationship between 2 discrete variables is complicated since an usual scatterplot suffers overplotting. Here is a workaround using base R. 3.4.20.1 Scatterplot with Variable Size An usual scatterplot would suffer over plotting when used for discrete variables: dots would be drawn on top of each other, making the chart unreadable. The workaround suggested here makes dot size proportional to the number of data points behind it. On top of that, the exact number can be represented in the bubble thanks to the text() function. #Let&#39;s create 2 discrete variables a &lt;- c(1,1,3,4,5,5,1,1,2,3,4,1,3,2,1,1,5,1,4,3,2,3,1,0,2) b &lt;- c(1,2,3,5,5,5,2,1,1,3,4,3,3,4,1,1,4,1,4,2,2,3,0,0,1) #I count the occurence of each couple of values. Eg : number of time a=1 and b=1, number of time a=1 and b=2 etc... AA &lt;- xyTable(a,b) #Now I can plot this ! I represent the dots as big as the couple occurs often coeff_bigger &lt;- 2 plot(AA$x , AA$y , cex=AA$number*coeff_bigger , pch=16 , col=rgb(0,0,1,0.5) , xlab= &quot;value of a&quot; , ylab=&quot;value of b&quot; , xlim=c(0,6) , ylim=c(0,6) ) text(AA$x , AA$y , AA$number ) #Note : It&#39;s easy to make a function that will compute this kind of plot automaticaly : represent_discrete_variable &lt;- function(var1, var2 , coeff_bigger){ AA=xyTable(var1,var2) plot(AA$x , AA$y , cex=AA$number*coeff_bigger , pch=16 , col=&quot;chocolate1&quot; , xlab= &quot;value of a&quot; , ylab=&quot;value of b&quot; ) text (AA$x , AA$y , AA$number ) } 3.4.20.2 Other Workarounds Other workarounds could be considered in this situation: Heatmap 2d density chart Jittering Boxplot 3.4.21 Use mtext() to Write Text in Margin This document describes how to use the mtext() function to add text in the plot margin. Usefull to add title on a multi chart. The mtext() function allows to write text in one of the four margins of the current figure region or one of the outer margins of the device region. Here, the figure is first split thanks to par(mfrow()). Then, only one title is added and centered using mtext(). #Dummy data Ixos &lt;- rnorm(4000,100,30) Primadur &lt;- Ixos+rnorm(4000 , 0 , 30) #Divide the screen in 1 line and 2 columns par( mfrow=c(1,2), oma = c(0, 0, 2, 0) ) #Make the margin around each graph a bit smaller par(mar=c(4,2,2,2)) # Histogram and Scatterplot hist(Ixos, main=&quot;&quot; , breaks=30 , col=rgb(0.3,0.5,1,0.4) , xlab=&quot;height&quot; , ylab=&quot;nbr of plants&quot;) plot(Ixos , Primadur, main=&quot;&quot; , pch=20 , cex=0.4 , col=rgb(0.3,0.5,1,0.4) , xlab=&quot;primadur&quot; , ylab=&quot;Ixos&quot; ) #And I add only ONE title : mtext(&quot;Primadur : Distribution and correlation with Ixos&quot;, outer = TRUE, cex = 1.5, font=4, col=rgb(0.1,0.3,0.5,0.5) ) 3.4.22 Customizations Here is a description of the most common customization: cex: circle size xlim and ylim: limits of the X and Y axis pch: shape of markers. See all here. xlab and ylab: X and Y axis labels col: marker color main: chart title # Create data data = data.frame( x=seq(1:100) + 0.1*seq(1:100)*sample(c(1:10) , 100 , replace=T), y=seq(1:100) + 0.2*seq(1:100)*sample(c(1:10) , 100 , replace=T) ) # Basic scatterplot plot(data$x, data$y, xlim=c(0,250) , ylim=c(0,250), pch=18, cex=2, col=&quot;#69b3a2&quot;, xlab=&quot;value of X&quot;, ylab=&quot;value of Y&quot;, main=&quot;A simple scatterplot&quot; ) 3.4.23 The split_screen() Function of R This document explains how to use the split_screen() function of R to divide your device in several parts, one for each chart. The split_screen() function allows to divide the window in several chart sections. However, The mfrow method is more adapted for simple layouts. The layout function is better for complex layouts. #Create data a &lt;- seq(1,29)+4*runif(29,0.4) b &lt;- seq(1,29)^2+runif(29,0.98) # I divide the screen in 2 line and 1 column only my_screen_step1 &lt;- split.screen(c(2, 1)) # I add one graph on the screen number 1 which is on top : screen(my_screen_step1[1]) plot( a,b , pch=20 , xlab=&quot;value of a&quot; , cex=3 , col=rgb(0.4,0.9,0.8,0.5) ) # I divide the second screen in 2 columns : my_screen_step2 &lt;- split.screen(c(1, 2), screen = my_screen_step1[2]) screen(my_screen_step2[1]) hist(a, border=F , col=rgb(0.2,0.2,0.8,0.7) , main=&quot;&quot; , xlab=&quot;distribution of a&quot;) screen(my_screen_step2[2]) hist(b, border=F , col=rgb(0.8,0.2,0.8,0.7) , main=&quot;&quot; , xlab=&quot;distribution of b&quot;) 3.4.24 Use par mfrow to Split Screen The par() function allows to set the mfrow() parameters to cut the charting window in several section. 3.4.24.1 Most Basic Scatterplot The par() function allows to set parameters to the plot. The mfrow() parameter allows to split the screen in several panels. Subsequent charts will be drawn in panels. You have to provide a vector of length 2 to mfrow(): number of rows and number of columns. Note: mfcol() does the same job but draws figure by columns instead of by row. Alternative: See the layout() function for more complex layout creation. #Create data a &lt;- seq(1,29)+4*runif(29,0.4) b &lt;- seq(1,29)^2+runif(29,0.98) #Divide the screen in 2 columns and 2 lines par(mfrow=c(2,2)) #Add a plot in each sub-screen ! plot( a,b , pch=20) plot(a-b , pch=18) hist(a, border=F , col=rgb(0.2,0.2,0.8,0.7) , main=&quot;&quot;) boxplot(a , col=&quot;grey&quot; , xlab=&quot;a&quot;) 3.4.25 Base R Graph Parameters: A Cheatsheet. This section aims to remind the options offered to customize a graph in base R. Understand in a sec how to use lwd, pch, type, lty, cex, and more. Base R offers many option to customize the chart appearance. Basically everthing is doable with those few options: Base R offers many option to customize the chart appearance. Basically everthing is doable with those few options: cex: shape size lwd: line width col: control colors lty: line type pch: marker shape type: link between dots Note: visit the cheatsheet section for more. par(mar=c(3,3,3,3)) num &lt;- 0 ; num1 &lt;- 0 plot(0,0 , xlim=c(0,21) , ylim=c(0.5,6.5), col=&quot;white&quot; , yaxt=&quot;n&quot; , ylab=&quot;&quot; , xlab=&quot;&quot;) #fill the graph for (i in seq(1,20)){ points(i,1 , pch=i , cex=3) points(i,2 , col=i , pch=16 , cex=3) points(i,3 , col=&quot;black&quot; , pch=16 , cex=i*0.25) #lty if(i %in% c(seq(1,18,3))){ num=num+1 points(c(i,i+2), c(4,4) , col=&quot;black&quot; , lty=num , type=&quot;l&quot; , lwd=2) text(i+1.1 , 4.15 , num) } #type and lwd if(i %in% c(seq(1,20,5))){ num1=num1+1 points(c(i,i+1,i+2,i+3), c(5,5,5,5) , col=&quot;black&quot; , type=c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;)[num1] , lwd=2) text(i+1.1 , 5.2 , c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;)[num1] ) points(c(i,i+1,i+2,i+3), c(6,6,6,6) , col=&quot;black&quot; , type=&quot;l&quot;, lwd=num1) text(i+1.1 , 6.2 , num1 ) } } #add axis axis(2, at = c(1,2,3,4,5,6), labels = c(&quot;pch&quot; , &quot;col&quot; , &quot;cex&quot; , &quot;lty&quot;, &quot;type&quot; , &quot;lwd&quot; ), tick = TRUE, col = &quot;black&quot;, las = 1, cex.axis = 0.8) 3.4.26 Special Use Case: Manhattan Plots A Manhattan plot is a particular type of scatterplot used in genomics. The X axis displays the position of a genetic variant on the genome. Each chromosome is usually represented using a different color. The Y axis shows p-value of the association test with a phenotypic trait. A Manhattan plot is a specific type of scatter plot widely used in genomics to study GWAS results (Genome Wide Association Study). Each point represents a genetic variant. The X axis shows its position on a chromosome, the Y axis tells how much it is associated with a trait. This page reviews how to make a Manhattan plot with R, and displays a couple of variations. Basic The manhattan function is straightforward: it just needs to have 4 columns identified properly, and does a proper job. # Load the library library(qqman) # Make the Manhattan plot on the gwasResults dataset manhattan(gwasResults, chr=&quot;CHR&quot;, bp=&quot;BP&quot;, snp=&quot;SNP&quot;, p=&quot;P&quot; ) 3.4.26.1 SNP of Interest A common task is to highlight a group of SNP on the Manhattan plot. For example it is handy to show which SNP are part of the clumping result. This is an easy task with qqman once you have identified the SNPs of interest. # A list of SNP of interest is provided with the library: snpsOfInterest ## [1] &quot;rs3001&quot; &quot;rs3002&quot; &quot;rs3003&quot; &quot;rs3004&quot; &quot;rs3005&quot; &quot;rs3006&quot; &quot;rs3007&quot; &quot;rs3008&quot; ## [9] &quot;rs3009&quot; &quot;rs3010&quot; &quot;rs3011&quot; &quot;rs3012&quot; &quot;rs3013&quot; &quot;rs3014&quot; &quot;rs3015&quot; &quot;rs3016&quot; ## [17] &quot;rs3017&quot; &quot;rs3018&quot; &quot;rs3019&quot; &quot;rs3020&quot; &quot;rs3021&quot; &quot;rs3022&quot; &quot;rs3023&quot; &quot;rs3024&quot; ## [25] &quot;rs3025&quot; &quot;rs3026&quot; &quot;rs3027&quot; &quot;rs3028&quot; &quot;rs3029&quot; &quot;rs3030&quot; &quot;rs3031&quot; &quot;rs3032&quot; ## [33] &quot;rs3033&quot; &quot;rs3034&quot; &quot;rs3035&quot; &quot;rs3036&quot; &quot;rs3037&quot; &quot;rs3038&quot; &quot;rs3039&quot; &quot;rs3040&quot; ## [41] &quot;rs3041&quot; &quot;rs3042&quot; &quot;rs3043&quot; &quot;rs3044&quot; &quot;rs3045&quot; &quot;rs3046&quot; &quot;rs3047&quot; &quot;rs3048&quot; ## [49] &quot;rs3049&quot; &quot;rs3050&quot; &quot;rs3051&quot; &quot;rs3052&quot; &quot;rs3053&quot; &quot;rs3054&quot; &quot;rs3055&quot; &quot;rs3056&quot; ## [57] &quot;rs3057&quot; &quot;rs3058&quot; &quot;rs3059&quot; &quot;rs3060&quot; &quot;rs3061&quot; &quot;rs3062&quot; &quot;rs3063&quot; &quot;rs3064&quot; ## [65] &quot;rs3065&quot; &quot;rs3066&quot; &quot;rs3067&quot; &quot;rs3068&quot; &quot;rs3069&quot; &quot;rs3070&quot; &quot;rs3071&quot; &quot;rs3072&quot; ## [73] &quot;rs3073&quot; &quot;rs3074&quot; &quot;rs3075&quot; &quot;rs3076&quot; &quot;rs3077&quot; &quot;rs3078&quot; &quot;rs3079&quot; &quot;rs3080&quot; ## [81] &quot;rs3081&quot; &quot;rs3082&quot; &quot;rs3083&quot; &quot;rs3084&quot; &quot;rs3085&quot; &quot;rs3086&quot; &quot;rs3087&quot; &quot;rs3088&quot; ## [89] &quot;rs3089&quot; &quot;rs3090&quot; &quot;rs3091&quot; &quot;rs3092&quot; &quot;rs3093&quot; &quot;rs3094&quot; &quot;rs3095&quot; &quot;rs3096&quot; ## [97] &quot;rs3097&quot; &quot;rs3098&quot; &quot;rs3099&quot; &quot;rs3100&quot; # Let&#39;s highlight them, with a bit of customization on the plot manhattan(gwasResults, highlight = snpsOfInterest) 3.4.26.2 Annotate You probably want to know the name of the SNP of interest: the ones with a high pvalue. You can automatically annotate them using the annotatePval argument: manhattan(gwasResults, annotatePval = 0.01) 3.4.26.3 Qqplot It is a good practice to draw a qqplot from the output of a GWAS. It allows to compare the distribution of the pvalue with an expected distribution by chance. Its realisation is straightforward thanks to the qq function: qq(gwasResults$P) 3.4.27 Highly Customizable with ggplot2 If you want to access a maximum level of customization it is sometimes good to build your plot from scratch. Here is an example using dplyr and ggplot2. 3.4.27.1 Basic First of all, we need to compute the cumulative position of SNP. don &lt;- gwasResults %&gt;% # Compute chromosome size group_by(CHR) %&gt;% summarise(chr_len=max(BP)) %&gt;% # Calculate cumulative position of each chromosome mutate(tot=cumsum(chr_len)-chr_len) %&gt;% dplyr::select(-chr_len) %&gt;% # Add this info to the initial dataset left_join(gwasResults, ., by=c(&quot;CHR&quot;=&quot;CHR&quot;)) %&gt;% # Add a cumulative position of each SNP arrange(CHR, BP) %&gt;% mutate( BPcum=BP+tot) Then we need to prepare the X axis. Indeed we do not want to display the cumulative position of SNP in bp, but just show the chromosome name instead. axisdf = don %&gt;% group_by(CHR) %&gt;% summarize(center=( max(BPcum) + min(BPcum) ) / 2 ) Ready to make the plot using ggplot2: ggplot(don, aes(x=BPcum, y=-log10(P))) + # Show all points geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) + scale_color_manual(values = rep(c(&quot;grey&quot;, &quot;skyblue&quot;), 22 )) + # custom X axis: scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) + scale_y_continuous(expand = c(0, 0) ) + # remove space between plot area and x axis # Custom the theme: theme_bw() + theme( legend.position=&quot;none&quot;, panel.border = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank() ) 3.4.27.2 Highlight SNPs Let’s suppose the you have a group of SNP that you want to highlight on the plot. This can be done following almost the same procedure. We just need to add them a flag in the dataframe, and use the flag for the color: # List of SNPs to highlight are in the snpsOfInterest object # We will use ggrepel for the annotation library(ggrepel) # Prepare the dataset don &lt;- gwasResults %&gt;% # Compute chromosome size group_by(CHR) %&gt;% summarise(chr_len=max(BP)) %&gt;% # Calculate cumulative position of each chromosome mutate(tot=cumsum(chr_len)-chr_len) %&gt;% dplyr::select(-chr_len) %&gt;% # Add this info to the initial dataset left_join(gwasResults, ., by=c(&quot;CHR&quot;=&quot;CHR&quot;)) %&gt;% # Add a cumulative position of each SNP arrange(CHR, BP) %&gt;% mutate( BPcum=BP+tot) %&gt;% # Add highlight and annotation information mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, &quot;yes&quot;, &quot;no&quot;)) %&gt;% mutate( is_annotate=ifelse(-log10(P)&gt;4, &quot;yes&quot;, &quot;no&quot;)) # Prepare X axis axisdf &lt;- don %&gt;% group_by(CHR) %&gt;% summarize(center=( max(BPcum) + min(BPcum) ) / 2 ) # Make the plot ggplot(don, aes(x=BPcum, y=-log10(P))) + # Show all points geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) + scale_color_manual(values = rep(c(&quot;grey&quot;, &quot;skyblue&quot;), 22 )) + # custom X axis: scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) + scale_y_continuous(expand = c(0, 0) ) + # remove space between plot area and x axis # Add highlighted points geom_point(data=subset(don, is_highlight==&quot;yes&quot;), color=&quot;orange&quot;, size=2) + # Add label using ggrepel to avoid overlapping geom_label_repel( data=subset(don, is_annotate==&quot;yes&quot;), aes(label=SNP), size=2) + # Custom the theme: theme_bw() + theme( legend.position=&quot;none&quot;, panel.border = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank() ) 3.4.27.3 A Note about Speed A common problem in genomics is the high number of data points. It is not unusual to make a GWAS with millions of SNPs, which makes the plot very long to build. However, it is important to notice that the vast majority of these SNPs have a high p-value and thus do not interest us for the analysis. A quick work around is thus to plot only SNP with a p-value below a given threshold (~0.05). The graphic will be as informative, but made in seconds. The filtering is straightforward. For example with dplyr: gwasResults %&gt;% filter(-log10(P)&gt;1) Decreasing the number of data points has another interest: it allows to switch to an interactive version. 3.4.28 Switch to an Interactive Version with plotly plotly is an HTML widget: an R library that allows to call javascript under the hood to create interactive visualizations. The good thing with plotly is that it can transform a ggplot2 graphic in an interactive version using the ggplotly function. Let’s apply it to our manhattan plot. Note 1: You probably want to filter your data before doing an interactive version. Having thousands of points will slow down the graphic, and you surely don’t care about SNP with a high p-value. Note 2: the Manhattanly library is another good way to make an interactive manhattan plot. It wraps the plotly library, so you will have less code to type than the example below, but less customization available. Note 3: Interactivity allows to: zoom on a specific region of the graphic, hover a SNP, move axis, export figure as png. library(plotly) # Prepare the dataset don &lt;- gwasResults %&gt;% # Compute chromosome size group_by(CHR) %&gt;% summarise(chr_len=max(BP)) %&gt;% # Calculate cumulative position of each chromosome mutate(tot=cumsum(chr_len)-chr_len) %&gt;% dplyr::select(-chr_len) %&gt;% # Add this info to the initial dataset left_join(gwasResults, ., by=c(&quot;CHR&quot;=&quot;CHR&quot;)) %&gt;% # Add a cumulative position of each SNP arrange(CHR, BP) %&gt;% mutate( BPcum=BP+tot) %&gt;% # Add highlight and annotation information mutate( is_highlight=ifelse(SNP %in% snpsOfInterest, &quot;yes&quot;, &quot;no&quot;)) %&gt;% # Filter SNP to make the plot lighter filter(-log10(P)&gt;0.5) # Prepare X axis axisdf &lt;- don %&gt;% group_by(CHR) %&gt;% summarize(center=( max(BPcum) + min(BPcum) ) / 2 ) # Prepare text description for each SNP: don$text &lt;- paste(&quot;SNP: &quot;, don$SNP, &quot;\\nPosition: &quot;, don$BP, &quot;\\nChromosome: &quot;, don$CHR, &quot;\\nLOD score:&quot;, -log10(don$P) %&gt;% round(2), &quot;\\nWhat else do you wanna know&quot;, sep=&quot;&quot;) # Make the plot p &lt;- ggplot(don, aes(x=BPcum, y=-log10(P), text=text)) + # Show all points geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=1.3) + scale_color_manual(values = rep(c(&quot;grey&quot;, &quot;skyblue&quot;), 22 )) + # custom X axis: scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) + scale_y_continuous(expand = c(0, 0) ) + # remove space between plot area and x axis ylim(0,9) + # Add highlighted points geom_point(data=subset(don, is_highlight==&quot;yes&quot;), color=&quot;orange&quot;, size=2) + # Custom the theme: theme_bw() + theme( legend.position=&quot;none&quot;, panel.border = element_blank(), panel.grid.major.x = element_blank(), panel.grid.minor.x = element_blank() ) ggplotly(p, tooltip=&quot;text&quot;) 3.4.29 Circular Version with CMplot The CMplot library by Lilin Yin is a good choice if you want to make a circular version of your manhattanplot. I believe than doing a circular version makes sense: it gives less space to all the non significant SNPs that do not interest us, and gives more space for the significant association. Moreover, the CMplot makes their realization straightforward. library(CMplot) #install.packages(&quot;CMplot&quot;) CMplot(gwasResults, plot.type=&quot;c&quot;, r=1.6, cir.legend=TRUE, outward=TRUE, cir.legend.col=&quot;black&quot;, cir.chr.h=.1 ,chr.den.col=&quot;orange&quot;, file=&quot;jpg&quot;, memo=&quot;&quot;, dpi=300, chr.labels=seq(1,22)) CMplot(pig60K,type=&quot;p&quot;,plot.type=&quot;d&quot;,bin.size=1e6,chr.den.col=c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;),file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300, file.output=TRUE,verbose=TRUE,width=9,height=6) This section can be located at YinLiLin Github. 3.4.29.1 A high-quality drawing tool designed for Manhattan plot of genomic analysis 3.4.29.2 Installation CMplot is available on CRAN, so it can be installed with the following R code: #install.packages(&quot;CMplot&quot;) library(&quot;CMplot&quot;) # if you want to use the latest version on GitHub: source(&quot;https://raw.githubusercontent.com/YinLiLin/CMplot/master/R/CMplot.r&quot;) There are two example datasets attached in CMplot, users can export and view the details by following R code: data(pig60K) #calculated p-values by MLM data(cattle50K) #calculated SNP effects by rrblup head(pig60K) SNP Chromosome Position trait1 trait2 trait3 1 ALGA0000009 1 52297 0.7738187 0.51194318 0.51194318 2 ALGA0000014 1 79763 0.7738187 0.51194318 0.51194318 3 ALGA0000021 1 209568 0.7583016 0.98405289 0.98405289 4 ALGA0000022 1 292758 0.7200305 0.48887140 0.48887140 5 ALGA0000046 1 747831 0.9736840 0.22096836 0.22096836 6 ALGA0000047 1 761957 0.9174565 0.05753712 0.05753712 head(cattle50K) SNP chr pos Somatic cell score Milk yield Fat percentage 1 SNP1 1 59082 0.000244361 0.000484255 0.001379210 2 SNP2 1 118164 0.000532272 0.000039800 0.000598951 3 SNP3 1 177246 0.001633058 0.000311645 0.000279427 4 SNP4 1 236328 0.001412865 0.000909370 0.001040161 5 SNP5 1 295410 0.000090700 0.002202973 0.000351394 6 SNP6 1 354493 0.000110681 0.000342628 0.000105792 As the example datasets, the first three columns are names, chromosome, position of SNPs respectively, the rest of columns are the pvalues of GWAS or effects of GS/GP for traits, the number of traits is unlimited. Note: if plotting SNP_Density, only the first three columns are needed. Now CMplot could handle not only Genome-wide association study results, but also SNP effects, Fst, tajima’s D and so on. Total 50~ parameters are available in CMplot, typing ?CMplot can get the detail function of all parameters. 3.4.30 SNP-Density Plot CMplot(pig60K,type=&quot;p&quot;,plot.type=&quot;d&quot;,bin.size=1e6,chr.den.col=c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;),file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300, file.output=TRUE,verbose=TRUE,width=9,height=6) # users can personally set the windowsize and the min/max of legend by: # bin.size=1e6 # bin.range=c(min, max) # memo: add a character to the output file name # chr.labels: change the chromosome names 3.4.31 Circular-Manhattan Plot 3.4.31.1 (1) Genome-Wide Association Study(GWAS) CMplot(pig60K,type=&quot;p&quot;,plot.type=&quot;c&quot;,chr.labels=paste(&quot;Chr&quot;,c(1:18,&quot;X&quot;,&quot;Y&quot;),sep=&quot;&quot;),r=0.4,cir.legend=TRUE, outward=FALSE,cir.legend.col=&quot;black&quot;,cir.chr.h=1.3,chr.den.col=&quot;black&quot;,file=&quot;jpg&quot;, memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE,width=10,height=10) CMplot(pig60K,type=&quot;p&quot;,plot.type=&quot;c&quot;,r=0.4,col=c(&quot;grey30&quot;,&quot;grey60&quot;),chr.labels=paste(&quot;Chr&quot;,c(1:18,&quot;X&quot;,&quot;Y&quot;),sep=&quot;&quot;), threshold=c(1e-6,1e-4),cir.chr.h=1.5,amplify=TRUE,threshold.lty=c(1,2),threshold.col=c(&quot;red&quot;, &quot;blue&quot;),signal.line=1,signal.col=c(&quot;red&quot;,&quot;green&quot;),chr.den.col=c(&quot;darkgreen&quot;,&quot;yellow&quot;,&quot;red&quot;), bin.size=1e6,outward=FALSE,file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE,width=10,height=10) #Note: 1. if signal.line=NULL, the lines that crosse circles won&#39;t be added. 2. if the length of parameter &#39;chr.den.col&#39; is not equal to 1, SNP density that counts the number of SNP within given size(&#39;bin.size&#39;) will be plotted around the circle. 3.4.31.2 (2) Genomic Selection/Prediction(GS/GP) CMplot(cattle50K,type=&quot;p&quot;,plot.type=&quot;c&quot;,LOG10=FALSE,outward=TRUE,col=matrix(c(&quot;#4DAF4A&quot;,NA,NA,&quot;dodgerblue4&quot;, &quot;deepskyblue&quot;,NA,&quot;dodgerblue1&quot;, &quot;olivedrab3&quot;, &quot;darkgoldenrod1&quot;), nrow=3, byrow=TRUE), chr.labels=paste(&quot;Chr&quot;,c(1:29),sep=&quot;&quot;),threshold=NULL,r=1.2,cir.chr.h=1.5,cir.legend.cex=0.5, cir.band=1,file=&quot;jpg&quot;, memo=&quot;&quot;,dpi=300,chr.den.col=&quot;black&quot;,file.output=TRUE,verbose=TRUE, width=10,height=10) #Note: parameter &#39;col&#39; can be either vector or matrix, if a matrix, each trait can be plotted in different colors. 3.4.32 Single_track Rectangular-Manhattan Plot 3.4.32.1 Genome-Wide Association Study(GWAS) CMplot(pig60K,type=&quot;p&quot;,plot.type=&quot;m&quot;,LOG10=TRUE,threshold=NULL,file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300, file.output=TRUE,verbose=TRUE,width=14,height=6,chr.labels.angle=45) # &#39;chr.labels.angle&#39;: adjust the angle of labels of x-axis (-90 &lt; chr.labels.angle &lt; 90). 3.4.32.2 Amplify Signals on pch, cex and col CMplot(pig60K, plot.type=&quot;m&quot;, col=c(&quot;grey30&quot;,&quot;grey60&quot;), LOG10=TRUE, ylim=c(2,12), threshold=c(1e-6,1e-4), threshold.lty=c(1,2), threshold.lwd=c(1,1), threshold.col=c(&quot;black&quot;,&quot;grey&quot;), amplify=TRUE, chr.den.col=NULL, signal.col=c(&quot;red&quot;,&quot;green&quot;), signal.cex=c(1.5,1.5),signal.pch=c(19,19), file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE,width=14,height=6) #Note: if the ylim is setted, then CMplot will only plot the points among this interval, # ylim can be vector or list, if it is a list, different traits can be assigned with # different range at y-axis. 3.4.32.3 Attach Chromosome Density on the bottom of Manhattan Plot CMplot(pig60K, plot.type=&quot;m&quot;, LOG10=TRUE, ylim=NULL, threshold=c(1e-6,1e-4),threshold.lty=c(1,2), threshold.lwd=c(1,1), threshold.col=c(&quot;black&quot;,&quot;grey&quot;), amplify=TRUE,bin.size=1e6, chr.den.col=c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;),signal.col=c(&quot;red&quot;,&quot;green&quot;),signal.cex=c(1.5,1.5), signal.pch=c(19,19),file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE, width=14,height=6) #Note: if the length of parameter &#39;chr.den.col&#39; is bigger than 1, SNP density that counts the number of SNP within given size(&#39;bin.size&#39;) will be plotted. #### Highlight a Group of SNPs on pch, cex, type, and col signal &lt;- pig60K$Position[which.min(pig60K$trait2)] SNPs &lt;- pig60K$SNP[pig60K$Chromosome==13 &amp; pig60K$Position&lt;(signal+1000000)&amp;pig60K$Position&gt;(signal-1000000)] CMplot(pig60K, plot.type=&quot;m&quot;,LOG10=TRUE,col=c(&quot;grey30&quot;,&quot;grey60&quot;),highlight=SNPs, highlight.col=&quot;green&quot;,highlight.cex=1,highlight.pch=19,file=&quot;jpg&quot;,memo=&quot;&quot;, chr.border=TRUE,dpi=300,file.output=TRUE,verbose=TRUE,width=14,height=6) #Note: &#39;highlight&#39; could be vector or list, if it is a vector, all traits will use the same highlighted SNPs index, if it is a list, the length of the list should equal to the number of traits. highlight.col, highlight.cex, highlight.pch can be value or vector, if its length equals to the length of highlighted SNPs, each SNPs have its special colour, size and shape. SNPs &lt;- pig60K[pig60K$trait2 &lt; 1e-4, 1] CMplot(pig60K,type=&quot;h&quot;,plot.type=&quot;m&quot;,LOG10=TRUE,highlight=SNPs,highlight.type=&quot;p&quot;, highlight.col=NULL,highlight.cex=1.2,highlight.pch=19,file=&quot;jpg&quot;,memo=&quot;&quot;, dpi=300,file.output=TRUE,verbose=TRUE,width=14,height=6,band=0.6) SNPs &lt;- pig60K[pig60K$trait2 &lt; 1e-4, 1] CMplot(pig60K,type=&quot;p&quot;,plot.type=&quot;m&quot;,LOG10=TRUE,highlight=SNPs,highlight.type=&quot;h&quot;, col=c(&quot;grey30&quot;,&quot;grey60&quot;),highlight.col=&quot;darkgreen&quot;,highlight.cex=1.2,highlight.pch=19, file=&quot;jpg&quot;,dpi=300,file.output=TRUE,verbose=TRUE,width=14,height=6) 3.4.32.4 Visualize only oOne Chromosome CMplot(pig60K[pig60K$Chromosome==13, ], plot.type=&quot;m&quot;,LOG10=TRUE,col=c(&quot;grey60&quot;),highlight=SNPs, highlight.col=&quot;green&quot;,highlight.cex=1,highlight.pch=19,file=&quot;jpg&quot;,memo=&quot;&quot;, threshold=c(1e-6,1e-4),threshold.lty=c(1,2),threshold.lwd=c(1,2), width=9,height=6, threshold.col=c(&quot;red&quot;,&quot;blue&quot;),amplify=FALSE,dpi=300,file.output=TRUE,verbose=TRUE) #### Add Genes or SNP Names around the Highlighted SNPs SNPs &lt;- pig60K[pig60K[,5] &lt; (0.05 / nrow(pig60K)), 1] genes &lt;- paste(&quot;GENE&quot;, 1:length(SNPs), sep=&quot;_&quot;) set.seed(666666) CMplot(pig60K[,c(1:3,5)], plot.type=&quot;m&quot;,LOG10=TRUE,col=c(&quot;grey30&quot;,&quot;grey60&quot;),highlight=SNPs, highlight.col=c(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;),highlight.cex=1,highlight.pch=c(15:17), highlight.text=genes, highlight.text.col=c(&quot;red&quot;,&quot;blue&quot;,&quot;green&quot;),threshold=0.05/nrow(pig60K),threshold.lty=2, amplify=FALSE,file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE,width=14,height=6) #Note: &#39;highlight&#39;, &#39;highlight.text&#39;, &#39;highlight.text.xadj&#39;, &#39;highlight.text.yadj&#39; could be vector or list, if it is a vector, all traits will use the same highlighted SNPs index and text, if it is a list, the length of the list should equal to the number of traits. the order of &#39;highlight.text&#39; must be consistent with &#39;highlight&#39; highlight.text.cex: value or vecter, control the size of added text highlight.text.font: value or vecter, control the font of added text highlight.text.xadj: value or vecter or list for multiple traits, -1, 0, 1 limited, control the position of text around the highlighted SNPs, -1(left), 0(center), 1(right) highlight.text.yadj: value or vector or list for multiple traits, same as above, -1(down), 0(center), 1(up) 3.4.32.5 Genomic Selection/Prediction(GS/GP) or other none p-values CMplot(cattle50K, plot.type=&quot;m&quot;, band=0.5, LOG10=FALSE, ylab=&quot;SNP effect&quot;,threshold=0.015, threshold.lty=2, threshold.lwd=1, threshold.col=&quot;red&quot;, amplify=TRUE, width=14,height=6, signal.col=NULL, chr.den.col=NULL, file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE, verbose=TRUE,cex=0.8) #Note: if signal.col=NULL, the significant SNPs will be plotted with original colors. cattle50K[,4:ncol(cattle50K)] &lt;- apply(cattle50K[,4:ncol(cattle50K)], 2, function(x) x*sample(c(1,-1), length(x), rep=TRUE)) CMplot(cattle50K, type=&quot;h&quot;,plot.type=&quot;m&quot;, band=0.5, LOG10=FALSE, ylab=&quot;SNP effect&quot;,ylim=c(-0.02,0.02), threshold.lty=2, threshold.lwd=1, threshold.col=&quot;red&quot;, amplify=FALSE,cex=0.6, chr.den.col=NULL, file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE) #Note: Positive and negative values are acceptable. 3.4.33 Multi_tracks Rectangular-Manhattan Plot SNPs &lt;- list( pig60K$SNP[pig60K$trait1&lt;1e-6], pig60K$SNP[pig60K$trait2&lt;1e-6], pig60K$SNP[pig60K$trait3&lt;1e-6] ) CMplot(pig60K, plot.type=&quot;m&quot;,multracks=TRUE,threshold=c(1e-6,1e-4),threshold.lty=c(1,2), threshold.lwd=c(1,1), threshold.col=c(&quot;black&quot;,&quot;grey&quot;), amplify=TRUE,bin.size=1e6, chr.den.col=c(&quot;darkgreen&quot;, &quot;yellow&quot;, &quot;red&quot;), signal.col=c(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;), signal.cex=1, file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE, highlight=SNPs, highlight.text=SNPs, highlight.text.cex=1.4) #Note: if you are not supposed to change the color of signal, please set signal.col=NULL and highlight.col=NULL. 3.4.33.1 a. All Traits in One Axes 3.4.33.2 b. All Traits in Separated Axes: 3.4.34 Single_track Q-Q Plot CMplot(pig60K,plot.type=&quot;q&quot;,box=FALSE,file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300, conf.int=TRUE,conf.int.col=NULL,threshold.col=&quot;red&quot;,threshold.lty=2, file.output=TRUE,verbose=TRUE,width=5,height=5) 3.4.35 Multi_tracks Q-Q plot pig60K$trait1[sample(1:nrow(pig60K), round(nrow(pig60K)*0.80))] &lt;- NA pig60K$trait2[sample(1:nrow(pig60K), round(nrow(pig60K)*0.25))] &lt;- NA CMplot(pig60K,plot.type=&quot;q&quot;,col=c(&quot;dodgerblue1&quot;, &quot;olivedrab3&quot;, &quot;darkgoldenrod1&quot;),threshold=1e-6, ylab.pos=2,signal.pch=c(19,6,4),signal.cex=1.2,signal.col=&quot;red&quot;,conf.int=TRUE,box=FALSE,multracks= TRUE,cex.axis=2,file=&quot;jpg&quot;,memo=&quot;&quot;,dpi=300,file.output=TRUE,verbose=TRUE,ylim=c(0,8),width=5,height=5) 3.4.35.1 a. All Traits in a Axes 3.4.35.2 b. all traits in separated axes: ## Heatmap A heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors. This page displays many examples built with R, both static and interactive. #### Using THE heatmap() Function The heatmap() function is natively provided in R. It produces high quality matrix and offers statistical tools to normalize input data, run clustering algorithm and visualize the result with dendrograms. It is one of the very rare case where I prefer base R to ggplot2. #### Most Basic Heatmap How to do it: below is the most basic heatmap you can build in base R, using the heatmap() function with no parameters. Note that it takes as input a matrix. If you have a data frame, you can convert it to a matrix with as.matrix(), but you need numeric variables only. How to read it: each column is a variable. Each observation is a row. Each square is a value, the closer to yellow the higher. You can transpose the matrix with t(data) to swap X and Y axis. Note: as you can see this heatmap is not very insightful: all the variation is absorbed by the hp and disp variables that have very high values compared to the others. r # The mtcars dataset: data &lt;- as.matrix(mtcars) # Default Heatmap heatmap(data) ### Normalization Normalizing the matrix is done using the scale argument of the heatmap() function. It can be applied to row or to column. Here the column option is chosen, since we need to absorb the variation between column. r # Use 'scale' to normalize heatmap(data, scale=\"column\") ### Dendrogram and Reordering You may have noticed that order of both rows and columns is different compare to the native mtcar matrix. This is because heatmap() reorders both variables and observations using a clustering algorithm: it computes the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrograms are provided beside the heatmap. We can avoid it and just visualize the raw matrix: use the Rowv and Colv arguments as follow. r # No dendrogram nor reordering for neither column or row heatmap(data, Colv = NA, Rowv = NA, scale=\"column\") ### Color Palette There are several ways to custom the color palette: * Use the native palettes of R: terrain.color(), rainbow(), heat.colors(), topo.colors() or cm.colors(). * Use the palettes proposed by RColorBrewer. See list of available palettes here. r # 1: native palette from R heatmap(data, scale=\"column\", col = cm.colors(256)) r heatmap(data, scale=\"column\", col = terrain.colors(256)) r # 2: Rcolorbrewer palette library(RColorBrewer) coul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25) heatmap(data, scale=\"column\", col = coul) ### Custom Layout You can custom title &amp; axis titles with the usual main and xlab/ylab arguments (left). You can also change labels with labRow/colRow and their size with cexRow/cexCol r # Add classic arguments like main title and axis title heatmap(data, Colv = NA, Rowv = NA, scale=\"column\", col = coul, xlab=\"variable\", ylab=\"car\", main=\"heatmap\") r # Custom x and y labels with cexRow and labRow (col respectively) heatmap(data, scale=\"column\", cexRow=1.5, labRow=paste(\"new_\", rownames(data),sep=\"\"), col= colorRampPalette(brewer.pal(8, \"Blues\"))(25)) ### Add Color beside Heatmap Often, heatmap intends to compare the observed structure with an expected one. You can add a vector of color beside the heatmap to represents the expected structure using the RowSideColors argument. r # Example: grouping from the first letter: my_group &lt;- as.numeric(as.factor(substr(rownames(data), 1 , 1))) colSide &lt;- brewer.pal(9, \"Set1\")[my_group] colMain &lt;- colorRampPalette(brewer.pal(8, \"Blues\"))(25) heatmap(data, Colv = NA, Rowv = NA, scale=\"column\" , RowSideColors=colSide, col=colMain ) ### Using geom_title() from ggplot2 ggplot2 also allows to build heatmaps thanks to geom_tile(). However, I personally prefer the heatmap() function above since only it offers option for normalization, clustering and Dendrogram. ### ggplot2 Heatmap This document provides several examples of heatmaps built with R and ggplot2. It describes the main customization you can apply, with explanation and reproducible code. Note: The native heatmap() function provides more options for data normalization and clustering. Consider it as a valuable option. #### Most Basic Heatmap with ggplot2 This is the most basic heatmap you can build with R and ggplot2, using the geom_tile() function. Input data must be a long format where each row provides an observation. At least 3 variables are needed per observation: * x: position on the X axis. * y: position on the Y axis. * fill: the numeric value that will be translated in a color. ```r # Library library(ggplot2) # Dummy data x &lt;- LETTERS[1:20] y &lt;- paste0(“var,” seq(1,20)) data &lt;- expand.grid(X=x, Y=y) data$Z &lt;- runif(400, 0, 5) # Heatmap ggplot(data, aes(X, Y, fill= Z)) + geom_tile() ``` ### Control Color Palette Color palette can be changed like in any ggplot2 chart. Above are 3 examples using different methods: * scale_fill_gradient() to provide extreme colors of the palette. * scale_fill_distiller() to provide a ColorBrewer palette. * scale_fill_viridis() to use Viridis. Do not forget discrete=FALSE for a continuous variable. ```r # Library library(ggplot2) library(hrbrthemes) # Dummy data x &lt;- LETTERS[1:20] y &lt;- paste0(“var,” seq(1,20)) data &lt;- expand.grid(X=x, Y=y) data$Z &lt;- runif(400, 0, 5) # Give extreme colors: ggplot(data, aes(X, Y, fill= Z)) + geom_tile() + scale_fill_gradient(low=“white,” high=“blue”) + theme_ipsum() ``` r # Color Brewer palette ggplot(data, aes(X, Y, fill= Z)) + geom_tile() + scale_fill_distiller(palette = \"RdPu\") + theme_ipsum() r # Color Brewer palette library(viridis) ggplot(data, aes(X, Y, fill= Z)) + geom_tile() + scale_fill_viridis(discrete=FALSE) + theme_ipsum() ### From Wide Input Format It is a common issue to have a wide matrix as input, as for the volcano dataset. In this case, you need to tidy it with the gather() function of the tidyr package to visualize it with ggplot. ```r # Library library(ggplot2) library(tidyr) library(tibble) library(hrbrthemes) library(dplyr) # Volcano dataset #volcano # Heatmap volcano %&gt;% # Data wrangling as_tibble() %&gt;% rowid_to_column(var=“X”) %&gt;% gather(key=“Y,” value=“Z,” -1) %&gt;% # Change Y to numeric mutate(Y=as.numeric(gsub(“V,”\"“,Y))) %&gt;% # Viz ggplot(aes(X, Y, fill= Z)) + geom_tile() + theme_ipsum() + theme(legend.position=”none\") ``` ### Turn it Interactive with plotly One of the nice feature of ggplot2 is that charts can be turned interactive in seconds thanks to plotly. You just need to wrap your chart in an object and call it in the ggplotly() function. Often, it is a good practice to custom the text available in the tooltip. Note: try to hover cells to see the tooltip, select an area to zoom in. ```r # Library library(ggplot2) library(hrbrthemes) library(plotly) # Dummy data x &lt;- LETTERS[1:20] y &lt;- paste0(“var,” seq(1,20)) data &lt;- expand.grid(X=x, Y=y) data$Z &lt;- runif(400, 0, 5) # new column: text for tooltip: data &lt;- data %&gt;% mutate(text = paste0(“x:” x, “” “y:” y, “” “Value:”round(Z,2), “” “What else?”)) # classic ggplot, with text in aes p &lt;- ggplot(data, aes(X, Y, fill= Z, text=text)) + geom_tile() + theme_ipsum() ggplotly(p, tooltip=“text”) ``` {=html} &lt;div id=\"htmlwidget-021e9c7dea9227e24401\" style=\"width:480px;height:480px;\" class=\"plotly html-widget\"&gt;&lt;/div&gt; &lt;script type=\"application/json\" data-for=\"htmlwidget-021e9c7dea9227e24401\"&gt;{\"x\":{\"data\":[{\"x\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"y\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"z\":[[0.70032594188895,0.34429618839942,0.363887176681877,0.774543241986512,0.981360726080737,0.891033830535236,0.962209927616457,0.0249028775215822,0.181727318858105,0.144828960560228,0.283851619088614,0.750843762949474,0.833782451247281,0.904742098844835,0.953268938633923,0.421651164722201,0.555441012042602,0.833146171650506,0.970011615220263,0.0426565730255822],[0.77432523646452,0.981870424469449,0.857726966981925,0.820332649891962,0.645429965947151,0.140357735676477,0.22034702815302,0.0496675202403425,0.62604728438696,0.139143357141145,0.569835665550385,0.467292161824453,0.53032592077679,0.907344973218924,0.813178909954465,0.15394497478813,0.479019806031145,0.583783093098498,0,0.445410358043226],[0.78950239794973,0.336361494888574,0.315918470914098,0.559775047575837,0.837316625181965,0.678136424933439,0.999402674591188,0.258317078489665,0.908422209096564,0.940998373394577,0.40473569130547,0.721886743718474,0.628166067650316,0.360121888915542,0.454508778882357,0.334468634615738,0.391241466164905,0.891610519584004,0.910264545867223,0.744416680303053],[0.539112517605503,0.814927808316276,0.875344685514558,0.472371326329535,0.0430830134416397,0.145933182554908,0.400284259976308,0.716817737937423,0.417744257390306,0.0506368520391109,0.47298252394259,0.64685181493629,0.00108799250326929,0.569000821455395,0.904149087619402,0.461602760878078,0.735153997381178,0.179903230809987,0.680311773049872,0.491752343290586],[0.640006980007383,0.773489910966524,0.0111518969521634,0.0704677440771443,0.14234164345216,0.305882084413498,0.540629771938658,0.643427761355319,0.478224281261993,0.221267115599498,0.529538115031669,0.328006765349269,0.54290280354194,0.561436458295624,0.925016676125773,0.879384220541628,0.726560536776547,0.191204808610133,0.879024450706325,0.317887497687097],[0.467025850942841,0.48017124030646,0.0488136308432511,0.532842653896406,0.995963058992711,0.858193914822702,0.286977758918059,0.409083659043225,0.536083235733796,0.619257739830528,0.736526266063165,0.0350644458463399,0.638859520925552,0.766358438602842,0.635872901118881,0.72967096166949,0.974951326006378,0.619433222198633,0.140703829650858,0.251830684751783],[0.170489965868646,0.157125062804853,0.56498116426346,0.621399808337775,0.714138360174452,0.202882007058199,0.0933944298120408,0.915664666098113,0.141933358372998,0.625995529828506,0.901388173681625,0.132730772149331,0.620383309316946,0.918290001587768,0.330126948229994,0.0671400460391375,0.518067498006061,0.73506754772061,0.234829939734407,0.807813328171267],[0.0505553856700746,0.38575388607422,0.758834835709426,0.327445874350228,0.0299493500466552,0.77789935027266,0.363136799436727,0.390494731893804,0.0837849039629056,0.373572105136592,0.582388844003558,0.382206092776929,0.52660342558193,0.756100027028584,0.0574379021740538,0.340215568590876,0.665238733758336,0.895121589909879,0.418058205223778,0.999388934060706],[0.0214770398078455,0.644611227374126,0.724498091205685,0.209418431688975,0.0342985591131096,0.105493330521952,0.136102729847312,0.127277882958407,0.467229022154972,0.0416314239258322,0.193291023862925,0.710557200886253,0.150700341647954,0.2501573767007,0.387112582086423,0.277646031785774,0.172768454228686,0.0801632587286855,0.584095093374324,0.798449319488887],[0.927007739576577,0.705745956297463,0.147845761440352,0.712442492252483,0.472171730853787,0.397310369800502,0.335936617047837,0.908867276913956,0.698237575964732,0.0824017929739587,0.125996330960617,0.885689328460437,0.947313942373447,0.768127163204218,0.797458812728362,0.450515939479836,0.0534210923104641,0.619219923546661,0.497801682633355,0.933935233175755],[0.50422207116321,0.959479339032955,0.925571988499788,0.933056393935633,0.322973582302009,0.121639107538026,0.0844530322673057,0.664017131843289,0.586716662854342,0.174680855681402,0.141499291618163,0.988072994248604,0.913408423366261,0.549964063907709,0.280783064116964,0.87577702673612,0.31313369647685,0.280054623860442,0.757877869804432,0.290486445108392],[0.337429480217589,0.570429719193091,0.199484044259388,0.440917366599651,0.736868038850243,0.887000762931078,0.136958480887255,0.164885490529097,0.839918104841432,0.695047321052733,0.00712551902875288,0.696241110387773,0.766363705086345,0.035140951803327,0.925464238974161,0.692552381808243,0.51038465577687,0.102345543199381,0.599876084345123,0.559958867881341],[0.701469921888541,0.837761691365109,0.0392443012111697,0.724879247054304,0.828727994016014,0.464342255650634,0.334303140309397,0.317259899453435,0.0528348445404401,0.92277923239138,0.45844005379778,0.396084625998593,0.218764640133379,0.135605571983532,1,0.507684057293176,0.566494006124844,0.378599339985134,0.189485932332713,0.0553872951015299],[0.596314032927407,0.839014049842652,0.200348412926741,0.812902405796132,0.767957446699359,0.493248723597228,0.97683112816434,0.739693202812832,0.0795999504421988,0.651602100176967,0.91589326738896,0.90491070989711,0.452559123327363,0.15764352216794,0.600971818051514,0.53524968946582,0.342006312593712,0.97490531233051,0.805475633778618,0.210911500774076],[0.0713156119677843,0.413237143235493,0.535891859128749,0.162972916079472,0.782342013856987,0.155898651995967,0.381035533821714,0.434737467820302,0.632299985915507,0.0709196360506154,0.457035647146129,0.960553057306776,0.626853375508489,0.1727819265089,0.986195098325141,0.49609071682054,0.412179379432356,0.709838735850968,0.34667124825673,0.35987197258447],[0.130049949943881,0.129923636752622,0.21886678208443,0.690000798799804,0.0916469214955699,0.196952973641548,0.983228720090695,0.09785313518263,0.78705198428084,0.660008570266879,0.365856354506159,0.157869410605771,0.408617607237722,0.31456312207691,0.830805068214851,0.683864563413078,0.858463739339243,0.644121499972731,0.348719166989971,0.35077206481239],[0.394647850247804,0.78741133925041,0.866382739392286,0.457469896236438,0.193268364069397,0.783205711781937,0.832430035186304,0.0479223082769056,0.573268565787062,0.817741650670077,0.937922539245289,0.524869302930487,0.395902939555099,0.666700620675859,0.364666863712403,0.185416768141358,0.860940243556829,0.408172043776013,0.335730758196815,0.269359015244497],[0.0535104049414738,0.175300646875062,0.85457847646544,0.569016418959447,0.753532775309538,0.557429153456544,0.455294366251459,0.138295891042247,0.967628350733563,0.574403167766621,0.444621797742085,0.330405192396375,0.688815715575073,0.951337571957297,0.429359172048335,0.790312656405709,0.612742168681423,0.450492952136155,0.208344175046905,0.20795988984529],[0.573711192036741,0.881587581083351,0.949960889402754,0.378415041078194,0.198670210767418,0.102780665678944,0.648576758712592,0.52809354087905,0.37779785324288,0.605513476957551,0.917131215527475,0.417375695996828,0.961132112981276,0.205228220789865,0.220729060425927,0.252852338893733,0.549114804804409,0.186996943388119,0.266034893176338,0.817706938525082],[0.71956943728005,0.410215386145674,0.457478716510698,0.450797093542945,0.0171340740387516,0.606625700000913,0.311307728809142,0.447485377524388,0.67922933886025,0.294895253127561,0.120410129557733,0.960299961427923,0.677937922303213,0.735626304624176,0.946162008251462,0.983977723632993,0.0928468782521325,0.987238794047642,0.531799125801139,0.813090642775761]],\"text\":[[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 3.5&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 1.73&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 1.82&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 3.87&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 4.9&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 4.45&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 4.81&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.13&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 0.92&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.73&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 1.42&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 3.75&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 4.17&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 4.52&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.76&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 2.11&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.78&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 4.16&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 4.85&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 0.22&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 3.87&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 4.91&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 4.29&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 4.1&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 3.23&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.71&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.11&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.26&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 3.13&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.7&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.85&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 2.34&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 2.65&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 4.53&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.06&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 0.78&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.4&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 2.92&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 0.01&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 2.23&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 3.95&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 1.69&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 1.58&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.8&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 4.18&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 3.39&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 4.99&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 1.3&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 4.54&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 4.7&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.03&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 3.61&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.14&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 1.81&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 2.28&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 1.68&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 1.96&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 4.46&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 4.55&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 3.72&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 2.7&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 4.07&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 4.37&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.36&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.22&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.74&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 2.01&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 3.58&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 2.09&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.26&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.37&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 3.23&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 0.01&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 2.85&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.52&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 2.31&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 3.68&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 0.91&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 3.4&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 2.46&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 3.2&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 3.87&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 0.07&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 0.36&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.72&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 1.53&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 2.71&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 3.22&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 2.39&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 1.11&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.65&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 1.65&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 2.72&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 2.81&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.62&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 4.39&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 3.63&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 0.96&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 4.39&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.59&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 2.34&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 2.4&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 0.25&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.67&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 4.98&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 4.29&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.44&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 2.05&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 2.68&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 3.1&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 3.68&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 0.18&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.2&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 3.83&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 3.18&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 3.65&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 4.87&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 3.1&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 0.71&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.27&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 0.86&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 0.79&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 2.83&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 3.11&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 3.57&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 1.02&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 0.48&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 4.58&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 0.72&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 3.13&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 4.5&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 0.67&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.1&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 4.59&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 1.66&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 0.34&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.59&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 3.67&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 1.18&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 4.04&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 0.26&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 1.93&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 3.79&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 1.64&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.16&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 3.89&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.82&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 1.96&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 0.43&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 1.87&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.91&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 1.92&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 2.64&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 3.78&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 0.3&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 1.71&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 3.33&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 4.47&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 2.09&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 4.99&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 0.12&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 3.22&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 3.62&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 1.05&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.18&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.54&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 0.69&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.64&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 2.34&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.22&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 0.97&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 3.55&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 0.76&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 1.26&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 1.94&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 1.39&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 0.87&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 0.41&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 2.92&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 3.99&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 4.63&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 3.53&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 0.75&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 3.56&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 2.36&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 1.99&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.68&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 4.54&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 3.49&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.42&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 0.64&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 4.43&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 4.73&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 3.84&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 3.99&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 2.26&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 0.28&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 3.1&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 2.49&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 4.67&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 2.52&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 4.79&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 4.62&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 4.66&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 1.62&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.62&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 0.43&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 3.32&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 2.94&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.88&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 0.72&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 4.94&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 4.56&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 2.75&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 1.41&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 4.38&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 1.57&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 1.41&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 3.79&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.46&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 1.69&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 2.85&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 1&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.21&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 3.68&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 4.43&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 0.69&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.83&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 4.2&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 3.48&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 0.05&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 3.48&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.83&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 0.18&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.62&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 3.46&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.55&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 0.52&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 3&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 2.8&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 3.51&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 4.19&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 0.21&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 3.62&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 4.14&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 2.32&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.68&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 1.59&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 0.27&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 4.61&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.3&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 1.98&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 1.1&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 0.69&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 5&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 2.54&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.83&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 1.9&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 0.95&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 0.29&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 2.98&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 4.19&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 1.01&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 4.06&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 3.84&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 2.47&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 4.88&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 3.7&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 0.41&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 3.26&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 4.58&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 4.52&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 2.27&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 0.8&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 3.01&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 2.68&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 1.71&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 4.87&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 4.03&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.06&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 0.37&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 2.07&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 2.68&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 0.82&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 3.91&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.79&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.91&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 2.18&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 3.16&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 0.36&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.29&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 4.8&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.14&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 0.87&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.93&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 2.48&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.06&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 3.55&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 1.74&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.8&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 0.66&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 0.66&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 1.1&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 3.45&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.47&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.99&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 4.91&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.5&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 3.93&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 3.3&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 1.83&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 0.8&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 2.05&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 1.58&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.15&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 3.42&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 4.29&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 3.22&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 1.75&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.76&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 1.98&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 3.94&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 4.33&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.29&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.97&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 3.91&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 4.16&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.25&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 2.87&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 4.09&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 4.69&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 2.63&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 1.98&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 3.33&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 1.83&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 0.93&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 4.3&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 2.04&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 1.68&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.35&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 0.28&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 0.88&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 4.27&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.85&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 3.77&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 2.79&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 2.28&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 0.7&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 4.83&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 2.87&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 2.23&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 1.66&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.44&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 4.75&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 2.15&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 3.95&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 3.06&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 2.26&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 1.05&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 1.05&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 2.87&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 4.41&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 4.75&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 1.9&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 1&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 0.52&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 3.24&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 2.64&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 1.89&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 3.03&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 4.58&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 2.09&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 4.8&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 1.03&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 1.11&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 1.27&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 2.75&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 0.94&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 1.34&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 4.09&lt;br /&gt;What else?\"],[\"x: A&lt;br /&gt;y: var1&lt;br /&gt;Value: 3.6&lt;br /&gt;What else?\",\"x: B&lt;br /&gt;y: var2&lt;br /&gt;Value: 2.05&lt;br /&gt;What else?\",\"x: C&lt;br /&gt;y: var3&lt;br /&gt;Value: 2.29&lt;br /&gt;What else?\",\"x: D&lt;br /&gt;y: var4&lt;br /&gt;Value: 2.26&lt;br /&gt;What else?\",\"x: E&lt;br /&gt;y: var5&lt;br /&gt;Value: 0.09&lt;br /&gt;What else?\",\"x: F&lt;br /&gt;y: var6&lt;br /&gt;Value: 3.03&lt;br /&gt;What else?\",\"x: G&lt;br /&gt;y: var7&lt;br /&gt;Value: 1.56&lt;br /&gt;What else?\",\"x: H&lt;br /&gt;y: var8&lt;br /&gt;Value: 2.24&lt;br /&gt;What else?\",\"x: I&lt;br /&gt;y: var9&lt;br /&gt;Value: 3.4&lt;br /&gt;What else?\",\"x: J&lt;br /&gt;y: var10&lt;br /&gt;Value: 1.48&lt;br /&gt;What else?\",\"x: K&lt;br /&gt;y: var11&lt;br /&gt;Value: 0.61&lt;br /&gt;What else?\",\"x: L&lt;br /&gt;y: var12&lt;br /&gt;Value: 4.8&lt;br /&gt;What else?\",\"x: M&lt;br /&gt;y: var13&lt;br /&gt;Value: 3.39&lt;br /&gt;What else?\",\"x: N&lt;br /&gt;y: var14&lt;br /&gt;Value: 3.68&lt;br /&gt;What else?\",\"x: O&lt;br /&gt;y: var15&lt;br /&gt;Value: 4.73&lt;br /&gt;What else?\",\"x: P&lt;br /&gt;y: var16&lt;br /&gt;Value: 4.92&lt;br /&gt;What else?\",\"x: Q&lt;br /&gt;y: var17&lt;br /&gt;Value: 0.47&lt;br /&gt;What else?\",\"x: R&lt;br /&gt;y: var18&lt;br /&gt;Value: 4.93&lt;br /&gt;What else?\",\"x: S&lt;br /&gt;y: var19&lt;br /&gt;Value: 2.66&lt;br /&gt;What else?\",\"x: T&lt;br /&gt;y: var20&lt;br /&gt;Value: 4.06&lt;br /&gt;What else?\"]],\"colorscale\":[[0,\"#132B43\"],[0.00108799250326929,\"#132B43\"],[0.00712551902875288,\"#132C44\"],[0.0111518969521634,\"#142C45\"],[0.0171340740387516,\"#142D46\"],[0.0214770398078455,\"#142E46\"],[0.0249028775215822,\"#142E47\"],[0.0299493500466552,\"#152F48\"],[0.0342985591131096,\"#152F48\"],[0.0350644458463399,\"#152F49\"],[0.035140951803327,\"#152F49\"],[0.0392443012111697,\"#153049\"],[0.0416314239258322,\"#15304A\"],[0.0426565730255822,\"#16304A\"],[0.0430830134416397,\"#16304A\"],[0.0479223082769056,\"#16314B\"],[0.0488136308432511,\"#16314B\"],[0.0496675202403425,\"#16314B\"],[0.0505553856700746,\"#16314B\"],[0.0506368520391109,\"#16314B\"],[0.0528348445404401,\"#16314B\"],[0.0534210923104641,\"#16314B\"],[0.0535104049414738,\"#16314B\"],[0.0553872951015299,\"#16324C\"],[0.0574379021740538,\"#16324C\"],[0.0671400460391375,\"#17334E\"],[0.0704677440771443,\"#17334E\"],[0.0709196360506154,\"#17334E\"],[0.0713156119677843,\"#17334E\"],[0.0795999504421988,\"#183450\"],[0.0801632587286855,\"#183450\"],[0.0824017929739587,\"#183550\"],[0.0837849039629056,\"#183550\"],[0.0844530322673057,\"#183550\"],[0.0916469214955699,\"#193652\"],[0.0928468782521325,\"#193652\"],[0.0933944298120408,\"#193652\"],[0.09785313518263,\"#193753\"],[0.102345543199381,\"#193753\"],[0.102780665678944,\"#193753\"],[0.105493330521952,\"#193854\"],[0.120410129557733,\"#1A3956\"],[0.121639107538026,\"#1A3957\"],[0.125996330960617,\"#1B3A57\"],[0.127277882958407,\"#1B3A57\"],[0.129923636752622,\"#1B3A58\"],[0.130049949943881,\"#1B3A58\"],[0.132730772149331,\"#1B3B58\"],[0.135605571983532,\"#1B3B59\"],[0.136102729847312,\"#1B3B59\"],[0.136958480887255,\"#1B3B59\"],[0.138295891042247,\"#1B3C59\"],[0.139143357141145,\"#1B3C59\"],[0.140357735676477,\"#1C3C5A\"],[0.140703829650858,\"#1C3C5A\"],[0.141499291618163,\"#1C3C5A\"],[0.141933358372998,\"#1C3C5A\"],[0.14234164345216,\"#1C3C5A\"],[0.144828960560228,\"#1C3C5A\"],[0.145933182554908,\"#1C3C5B\"],[0.147845761440352,\"#1C3D5B\"],[0.150700341647954,\"#1C3D5B\"],[0.15394497478813,\"#1C3D5C\"],[0.155898651995967,\"#1C3E5C\"],[0.157125062804853,\"#1D3E5C\"],[0.15764352216794,\"#1D3E5C\"],[0.157869410605771,\"#1D3E5C\"],[0.162972916079472,\"#1D3F5D\"],[0.164885490529097,\"#1D3F5E\"],[0.170489965868646,\"#1D3F5F\"],[0.172768454228686,\"#1E405F\"],[0.1727819265089,\"#1E405F\"],[0.174680855681402,\"#1E405F\"],[0.175300646875062,\"#1E405F\"],[0.179903230809987,\"#1E4160\"],[0.181727318858105,\"#1E4160\"],[0.185416768141358,\"#1E4161\"],[0.186996943388119,\"#1E4261\"],[0.189485932332713,\"#1F4262\"],[0.191204808610133,\"#1F4262\"],[0.193268364069397,\"#1F4262\"],[0.193291023862925,\"#1F4262\"],[0.196952973641548,\"#1F4363\"],[0.198670210767418,\"#1F4363\"],[0.199484044259388,\"#1F4363\"],[0.200348412926741,\"#1F4364\"],[0.202882007058199,\"#1F4364\"],[0.205228220789865,\"#204464\"],[0.20795988984529,\"#204465\"],[0.208344175046905,\"#204465\"],[0.209418431688975,\"#204465\"],[0.210911500774076,\"#204465\"],[0.218764640133379,\"#204567\"],[0.21886678208443,\"#204567\"],[0.22034702815302,\"#214667\"],[0.220729060425927,\"#214667\"],[0.221267115599498,\"#214667\"],[0.234829939734407,\"#214769\"],[0.2501573767007,\"#22496C\"],[0.251830684751783,\"#234A6C\"],[0.252852338893733,\"#234A6C\"],[0.258317078489665,\"#234A6D\"],[0.266034893176338,\"#234B6F\"],[0.269359015244497,\"#244C6F\"],[0.277646031785774,\"#244D71\"],[0.280054623860442,\"#244D71\"],[0.280783064116964,\"#244D71\"],[0.283851619088614,\"#254E72\"],[0.286977758918059,\"#254E72\"],[0.290486445108392,\"#254F73\"],[0.294895253127561,\"#254F74\"],[0.305882084413498,\"#265176\"],[0.311307728809142,\"#265177\"],[0.31313369647685,\"#265177\"],[0.31456312207691,\"#275277\"],[0.315918470914098,\"#275277\"],[0.317259899453435,\"#275278\"],[0.317887497687097,\"#275278\"],[0.322973582302009,\"#275379\"],[0.327445874350228,\"#275379\"],[0.328006765349269,\"#275379\"],[0.330126948229994,\"#28547A\"],[0.330405192396375,\"#28547A\"],[0.334303140309397,\"#28547A\"],[0.334468634615738,\"#28547B\"],[0.335730758196815,\"#28547B\"],[0.335936617047837,\"#28547B\"],[0.336361494888574,\"#28547B\"],[0.337429480217589,\"#28557B\"],[0.340215568590876,\"#28557C\"],[0.342006312593712,\"#28557C\"],[0.34429618839942,\"#28567C\"],[0.34667124825673,\"#29567D\"],[0.348719166989971,\"#29567D\"],[0.35077206481239,\"#29567D\"],[0.35987197258447,\"#29587F\"],[0.360121888915542,\"#2A587F\"],[0.363136799436727,\"#2A5880\"],[0.363887176681877,\"#2A5880\"],[0.364666863712403,\"#2A5880\"],[0.365856354506159,\"#2A5880\"],[0.373572105136592,\"#2A5981\"],[0.37779785324288,\"#2B5A82\"],[0.378415041078194,\"#2B5A82\"],[0.378599339985134,\"#2B5A82\"],[0.381035533821714,\"#2B5A83\"],[0.382206092776929,\"#2B5A83\"],[0.38575388607422,\"#2B5B84\"],[0.387112582086423,\"#2B5B84\"],[0.390494731893804,\"#2B5C84\"],[0.391241466164905,\"#2C5C84\"],[0.394647850247804,\"#2C5C85\"],[0.395902939555099,\"#2C5C85\"],[0.396084625998593,\"#2C5C85\"],[0.397310369800502,\"#2C5C86\"],[0.400284259976308,\"#2C5D86\"],[0.40473569130547,\"#2C5D87\"],[0.408172043776013,\"#2D5E87\"],[0.408617607237722,\"#2D5E88\"],[0.409083659043225,\"#2D5E88\"],[0.410215386145674,\"#2D5E88\"],[0.412179379432356,\"#2D5E88\"],[0.413237143235493,\"#2D5F88\"],[0.417375695996828,\"#2D5F89\"],[0.417744257390306,\"#2D5F89\"],[0.418058205223778,\"#2D5F89\"],[0.421651164722201,\"#2E608A\"],[0.429359172048335,\"#2E618B\"],[0.434737467820302,\"#2E618C\"],[0.440917366599651,\"#2F628D\"],[0.444621797742085,\"#2F638E\"],[0.445410358043226,\"#2F638E\"],[0.447485377524388,\"#2F638E\"],[0.450492952136155,\"#2F638F\"],[0.450515939479836,\"#2F638F\"],[0.450797093542945,\"#2F648F\"],[0.452559123327363,\"#30648F\"],[0.454508778882357,\"#306490\"],[0.455294366251459,\"#306490\"],[0.457035647146129,\"#306490\"],[0.457469896236438,\"#306490\"],[0.457478716510698,\"#306490\"],[0.45844005379778,\"#306590\"],[0.461602760878078,\"#306591\"],[0.464342255650634,\"#306592\"],[0.467025850942841,\"#316692\"],[0.467229022154972,\"#316692\"],[0.467292161824453,\"#316692\"],[0.472171730853787,\"#316693\"],[0.472371326329535,\"#316693\"],[0.47298252394259,\"#316693\"],[0.478224281261993,\"#316794\"],[0.479019806031145,\"#316794\"],[0.48017124030646,\"#316794\"],[0.491752343290586,\"#326996\"],[0.493248723597228,\"#326997\"],[0.49609071682054,\"#336A97\"],[0.497801682633355,\"#336A98\"],[0.50422207116321,\"#336B99\"],[0.507684057293176,\"#336B99\"],[0.51038465577687,\"#336C9A\"],[0.518067498006061,\"#346D9B\"],[0.524869302930487,\"#346D9C\"],[0.52660342558193,\"#356E9D\"],[0.52809354087905,\"#356E9D\"],[0.529538115031669,\"#356E9D\"],[0.53032592077679,\"#356E9D\"],[0.531799125801139,\"#356E9E\"],[0.532842653896406,\"#356F9E\"],[0.53524968946582,\"#356F9E\"],[0.535891859128749,\"#356F9E\"],[0.536083235733796,\"#356F9F\"],[0.539112517605503,\"#356F9F\"],[0.540629771938658,\"#36709F\"],[0.54290280354194,\"#3670A0\"],[0.549114804804409,\"#3671A1\"],[0.549964063907709,\"#3671A1\"],[0.555441012042602,\"#3772A2\"],[0.557429153456544,\"#3772A2\"],[0.559775047575837,\"#3772A3\"],[0.559958867881341,\"#3772A3\"],[0.561436458295624,\"#3772A3\"],[0.56498116426346,\"#3773A4\"],[0.566494006124844,\"#3773A4\"],[0.569000821455395,\"#3774A5\"],[0.569016418959447,\"#3774A5\"],[0.569835665550385,\"#3874A5\"],[0.570429719193091,\"#3874A5\"],[0.573268565787062,\"#3874A5\"],[0.573711192036741,\"#3874A5\"],[0.574403167766621,\"#3874A6\"],[0.582388844003558,\"#3875A7\"],[0.583783093098498,\"#3876A7\"],[0.584095093374324,\"#3876A7\"],[0.586716662854342,\"#3976A8\"],[0.596314032927407,\"#3977AA\"],[0.599876084345123,\"#3A78AA\"],[0.600971818051514,\"#3A78AA\"],[0.605513476957551,\"#3A79AB\"],[0.606625700000913,\"#3A79AB\"],[0.612742168681423,\"#3A7AAD\"],[0.619219923546661,\"#3B7AAE\"],[0.619257739830528,\"#3B7AAE\"],[0.619433222198633,\"#3B7AAE\"],[0.620383309316946,\"#3B7BAE\"],[0.621399808337775,\"#3B7BAE\"],[0.625995529828506,\"#3B7BAF\"],[0.62604728438696,\"#3B7BAF\"],[0.626853375508489,\"#3B7BAF\"],[0.628166067650316,\"#3C7CAF\"],[0.632299985915507,\"#3C7CB0\"],[0.635872901118881,\"#3C7DB1\"],[0.638859520925552,\"#3C7DB1\"],[0.640006980007383,\"#3C7DB2\"],[0.643427761355319,\"#3D7EB2\"],[0.644121499972731,\"#3D7EB2\"],[0.644611227374126,\"#3D7EB3\"],[0.645429965947151,\"#3D7EB3\"],[0.64685181493629,\"#3D7EB3\"],[0.648576758712592,\"#3D7EB3\"],[0.651602100176967,\"#3D7FB4\"],[0.660008570266879,\"#3E80B5\"],[0.664017131843289,\"#3E81B6\"],[0.665238733758336,\"#3E81B6\"],[0.666700620675859,\"#3E81B7\"],[0.677937922303213,\"#3F83B9\"],[0.678136424933439,\"#3F83B9\"],[0.67922933886025,\"#3F83B9\"],[0.680311773049872,\"#3F83B9\"],[0.683864563413078,\"#3F83BA\"],[0.688815715575073,\"#4084BB\"],[0.690000798799804,\"#4084BB\"],[0.692552381808243,\"#4085BC\"],[0.695047321052733,\"#4085BC\"],[0.696241110387773,\"#4085BC\"],[0.698237575964732,\"#4085BD\"],[0.70032594188895,\"#4186BD\"],[0.701469921888541,\"#4186BD\"],[0.705745956297463,\"#4186BE\"],[0.709838735850968,\"#4187BF\"],[0.710557200886253,\"#4187BF\"],[0.712442492252483,\"#4187BF\"],[0.714138360174452,\"#4288C0\"],[0.716817737937423,\"#4288C0\"],[0.71956943728005,\"#4288C1\"],[0.721886743718474,\"#4289C1\"],[0.724498091205685,\"#4289C2\"],[0.724879247054304,\"#4289C2\"],[0.726560536776547,\"#4289C2\"],[0.72967096166949,\"#438AC3\"],[0.73506754772061,\"#438BC4\"],[0.735153997381178,\"#438BC4\"],[0.735626304624176,\"#438BC4\"],[0.736526266063165,\"#438BC4\"],[0.736868038850243,\"#438BC4\"],[0.739693202812832,\"#438BC4\"],[0.744416680303053,\"#448CC5\"],[0.750843762949474,\"#448DC7\"],[0.753532775309538,\"#448DC7\"],[0.756100027028584,\"#448EC8\"],[0.757877869804432,\"#458EC8\"],[0.758834835709426,\"#458EC8\"],[0.766358438602842,\"#458FCA\"],[0.766363705086345,\"#458FCA\"],[0.767957446699359,\"#458FCA\"],[0.768127163204218,\"#458FCA\"],[0.773489910966524,\"#4690CB\"],[0.77432523646452,\"#4690CB\"],[0.774543241986512,\"#4690CB\"],[0.77789935027266,\"#4691CC\"],[0.782342013856987,\"#4691CD\"],[0.783205711781937,\"#4691CD\"],[0.78705198428084,\"#4792CD\"],[0.78741133925041,\"#4792CE\"],[0.78950239794973,\"#4792CE\"],[0.790312656405709,\"#4792CE\"],[0.797458812728362,\"#4794CF\"],[0.798449319488887,\"#4794D0\"],[0.805475633778618,\"#4895D1\"],[0.807813328171267,\"#4895D1\"],[0.812902405796132,\"#4896D2\"],[0.813090642775761,\"#4896D2\"],[0.813178909954465,\"#4996D2\"],[0.814927808316276,\"#4996D3\"],[0.817706938525082,\"#4996D3\"],[0.817741650670077,\"#4996D3\"],[0.820332649891962,\"#4997D4\"],[0.828727994016014,\"#4A98D5\"],[0.830805068214851,\"#4A98D6\"],[0.832430035186304,\"#4A99D6\"],[0.833146171650506,\"#4A99D6\"],[0.833782451247281,\"#4A99D6\"],[0.837316625181965,\"#4A99D7\"],[0.837761691365109,\"#4A99D7\"],[0.839014049842652,\"#4A99D7\"],[0.839918104841432,\"#4A9AD8\"],[0.85457847646544,\"#4B9CDA\"],[0.857726966981925,\"#4C9CDB\"],[0.858193914822702,\"#4C9CDB\"],[0.858463739339243,\"#4C9CDB\"],[0.860940243556829,\"#4C9DDC\"],[0.866382739392286,\"#4C9DDD\"],[0.875344685514558,\"#4D9FDF\"],[0.87577702673612,\"#4D9FDF\"],[0.879024450706325,\"#4D9FDF\"],[0.879384220541628,\"#4D9FDF\"],[0.881587581083351,\"#4DA0E0\"],[0.885689328460437,\"#4EA0E1\"],[0.887000762931078,\"#4EA0E1\"],[0.891033830535236,\"#4EA1E2\"],[0.891610519584004,\"#4EA1E2\"],[0.895121589909879,\"#4EA2E2\"],[0.901388173681625,\"#4FA3E4\"],[0.904149087619402,\"#4FA3E4\"],[0.904742098844835,\"#4FA3E4\"],[0.90491070989711,\"#4FA3E4\"],[0.907344973218924,\"#4FA3E5\"],[0.908422209096564,\"#4FA4E5\"],[0.908867276913956,\"#4FA4E5\"],[0.910264545867223,\"#4FA4E5\"],[0.913408423366261,\"#50A4E6\"],[0.915664666098113,\"#50A5E6\"],[0.91589326738896,\"#50A5E6\"],[0.917131215527475,\"#50A5E7\"],[0.918290001587768,\"#50A5E7\"],[0.92277923239138,\"#50A6E8\"],[0.925016676125773,\"#51A6E8\"],[0.925464238974161,\"#51A6E8\"],[0.925571988499788,\"#51A6E8\"],[0.927007739576577,\"#51A6E9\"],[0.933056393935633,\"#51A7EA\"],[0.933935233175755,\"#51A7EA\"],[0.937922539245289,\"#51A8EB\"],[0.940998373394577,\"#52A8EB\"],[0.946162008251462,\"#52A9EC\"],[0.947313942373447,\"#52A9ED\"],[0.949960889402754,\"#52AAED\"],[0.951337571957297,\"#52AAED\"],[0.953268938633923,\"#53AAEE\"],[0.959479339032955,\"#53ABEF\"],[0.960299961427923,\"#53ABEF\"],[0.960553057306776,\"#53ABEF\"],[0.961132112981276,\"#53ABEF\"],[0.962209927616457,\"#53ABF0\"],[0.967628350733563,\"#54ACF1\"],[0.970011615220263,\"#54ADF1\"],[0.97490531233051,\"#54ADF2\"],[0.974951326006378,\"#54ADF2\"],[0.97683112816434,\"#54AEF2\"],[0.981360726080737,\"#55AEF3\"],[0.981870424469449,\"#55AEF3\"],[0.983228720090695,\"#55AFF4\"],[0.983977723632993,\"#55AFF4\"],[0.986195098325141,\"#55AFF4\"],[0.987238794047642,\"#55AFF4\"],[0.988072994248604,\"#55AFF5\"],[0.995963058992711,\"#56B0F6\"],[0.999388934060706,\"#56B1F7\"],[0.999402674591188,\"#56B1F7\"],[1,\"#56B1F7\"]],\"type\":\"heatmap\",\"showscale\":false,\"autocolorscale\":false,\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[1],\"y\":[1],\"name\":\"99_2c9b20ad530b764d690792d19788c46b\",\"type\":\"scatter\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"skip\",\"showlegend\":false,\"marker\":{\"color\":[0,1],\"colorscale\":[[0,\"#132B43\"],[0.00334448160535117,\"#132B44\"],[0.00668896321070234,\"#132C44\"],[0.0100334448160535,\"#142C45\"],[0.0133779264214047,\"#142D45\"],[0.0167224080267559,\"#142D46\"],[0.020066889632107,\"#142D46\"],[0.0234113712374582,\"#142E47\"],[0.0267558528428094,\"#152E47\"],[0.0301003344481605,\"#152F48\"],[0.0334448160535117,\"#152F48\"],[0.0367892976588629,\"#152F49\"],[0.040133779264214,\"#153049\"],[0.0434782608695652,\"#16304A\"],[0.0468227424749164,\"#16304A\"],[0.0501672240802676,\"#16314B\"],[0.0535117056856187,\"#16314B\"],[0.0568561872909699,\"#16324C\"],[0.0602006688963211,\"#17324D\"],[0.0635451505016723,\"#17324D\"],[0.0668896321070234,\"#17334E\"],[0.0702341137123746,\"#17334E\"],[0.0735785953177258,\"#17344F\"],[0.0769230769230769,\"#18344F\"],[0.0802675585284281,\"#183450\"],[0.0836120401337793,\"#183550\"],[0.0869565217391304,\"#183551\"],[0.0903010033444816,\"#183651\"],[0.0936454849498328,\"#193652\"],[0.096989966555184,\"#193652\"],[0.100334448160535,\"#193753\"],[0.103678929765886,\"#193754\"],[0.107023411371237,\"#193854\"],[0.110367892976589,\"#1A3855\"],[0.11371237458194,\"#1A3955\"],[0.117056856187291,\"#1A3956\"],[0.120401337792642,\"#1A3956\"],[0.123745819397993,\"#1A3A57\"],[0.127090301003345,\"#1B3A57\"],[0.130434782608696,\"#1B3B58\"],[0.133779264214047,\"#1B3B59\"],[0.137123745819398,\"#1B3B59\"],[0.140468227424749,\"#1C3C5A\"],[0.1438127090301,\"#1C3C5A\"],[0.147157190635452,\"#1C3D5B\"],[0.150501672240803,\"#1C3D5B\"],[0.153846153846154,\"#1C3D5C\"],[0.157190635451505,\"#1D3E5C\"],[0.160535117056856,\"#1D3E5D\"],[0.163879598662207,\"#1D3F5D\"],[0.167224080267559,\"#1D3F5E\"],[0.17056856187291,\"#1D3F5F\"],[0.173913043478261,\"#1E405F\"],[0.177257525083612,\"#1E4060\"],[0.180602006688963,\"#1E4160\"],[0.183946488294314,\"#1E4161\"],[0.187290969899666,\"#1E4261\"],[0.190635451505017,\"#1F4262\"],[0.193979933110368,\"#1F4263\"],[0.197324414715719,\"#1F4363\"],[0.20066889632107,\"#1F4364\"],[0.204013377926421,\"#1F4464\"],[0.207357859531773,\"#204465\"],[0.210702341137124,\"#204465\"],[0.214046822742475,\"#204566\"],[0.217391304347826,\"#204566\"],[0.220735785953177,\"#214667\"],[0.224080267558528,\"#214668\"],[0.22742474916388,\"#214768\"],[0.230769230769231,\"#214769\"],[0.234113712374582,\"#214769\"],[0.237458193979933,\"#22486A\"],[0.240802675585284,\"#22486A\"],[0.244147157190635,\"#22496B\"],[0.247491638795987,\"#22496C\"],[0.250836120401338,\"#224A6C\"],[0.254180602006689,\"#234A6D\"],[0.25752508361204,\"#234A6D\"],[0.260869565217391,\"#234B6E\"],[0.264214046822743,\"#234B6E\"],[0.267558528428094,\"#244C6F\"],[0.270903010033445,\"#244C70\"],[0.274247491638796,\"#244C70\"],[0.277591973244147,\"#244D71\"],[0.280936454849498,\"#244D71\"],[0.28428093645485,\"#254E72\"],[0.287625418060201,\"#254E72\"],[0.290969899665552,\"#254F73\"],[0.294314381270903,\"#254F74\"],[0.297658862876254,\"#254F74\"],[0.301003344481605,\"#265075\"],[0.304347826086957,\"#265075\"],[0.307692307692308,\"#265176\"],[0.311036789297659,\"#265176\"],[0.31438127090301,\"#275277\"],[0.317725752508361,\"#275278\"],[0.321070234113712,\"#275278\"],[0.324414715719064,\"#275379\"],[0.327759197324415,\"#275379\"],[0.331103678929766,\"#28547A\"],[0.334448160535117,\"#28547B\"],[0.337792642140468,\"#28557B\"],[0.341137123745819,\"#28557C\"],[0.344481605351171,\"#28567C\"],[0.347826086956522,\"#29567D\"],[0.351170568561873,\"#29567D\"],[0.354515050167224,\"#29577E\"],[0.357859531772575,\"#29577F\"],[0.361204013377926,\"#2A587F\"],[0.364548494983278,\"#2A5880\"],[0.367892976588629,\"#2A5980\"],[0.37123745819398,\"#2A5981\"],[0.374581939799331,\"#2A5982\"],[0.377926421404682,\"#2B5A82\"],[0.381270903010033,\"#2B5A83\"],[0.384615384615385,\"#2B5B83\"],[0.387959866220736,\"#2B5B84\"],[0.391304347826087,\"#2C5C85\"],[0.394648829431438,\"#2C5C85\"],[0.397993311036789,\"#2C5D86\"],[0.401337792642141,\"#2C5D86\"],[0.404682274247492,\"#2C5D87\"],[0.408026755852843,\"#2D5E87\"],[0.411371237458194,\"#2D5E88\"],[0.414715719063545,\"#2D5F89\"],[0.418060200668896,\"#2D5F89\"],[0.421404682274248,\"#2E608A\"],[0.424749163879599,\"#2E608A\"],[0.42809364548495,\"#2E618B\"],[0.431438127090301,\"#2E618C\"],[0.434782608695652,\"#2E618C\"],[0.438127090301003,\"#2F628D\"],[0.441471571906354,\"#2F628D\"],[0.444816053511706,\"#2F638E\"],[0.448160535117057,\"#2F638F\"],[0.451505016722408,\"#30648F\"],[0.454849498327759,\"#306490\"],[0.45819397993311,\"#306590\"],[0.461538461538462,\"#306591\"],[0.464882943143813,\"#306592\"],[0.468227424749164,\"#316692\"],[0.471571906354515,\"#316693\"],[0.474916387959866,\"#316793\"],[0.478260869565217,\"#316794\"],[0.481605351170569,\"#326895\"],[0.48494983277592,\"#326895\"],[0.488294314381271,\"#326996\"],[0.491638795986622,\"#326996\"],[0.494983277591973,\"#326997\"],[0.498327759197324,\"#336A98\"],[0.501672240802676,\"#336A98\"],[0.505016722408027,\"#336B99\"],[0.508361204013378,\"#336B99\"],[0.511705685618729,\"#346C9A\"],[0.51505016722408,\"#346C9B\"],[0.518394648829432,\"#346D9B\"],[0.521739130434783,\"#346D9C\"],[0.525083612040134,\"#346E9D\"],[0.528428093645485,\"#356E9D\"],[0.531772575250836,\"#356E9E\"],[0.535117056856187,\"#356F9E\"],[0.538461538461538,\"#356F9F\"],[0.54180602006689,\"#3670A0\"],[0.545150501672241,\"#3670A0\"],[0.548494983277592,\"#3671A1\"],[0.551839464882943,\"#3671A1\"],[0.555183946488294,\"#3772A2\"],[0.558528428093645,\"#3772A3\"],[0.561872909698997,\"#3773A3\"],[0.565217391304348,\"#3773A4\"],[0.568561872909699,\"#3773A4\"],[0.57190635451505,\"#3874A5\"],[0.575250836120401,\"#3874A6\"],[0.578595317725753,\"#3875A6\"],[0.581939799331104,\"#3875A7\"],[0.585284280936455,\"#3976A8\"],[0.588628762541806,\"#3976A8\"],[0.591973244147157,\"#3977A9\"],[0.595317725752508,\"#3977A9\"],[0.59866220735786,\"#3978AA\"],[0.602006688963211,\"#3A78AB\"],[0.605351170568562,\"#3A79AB\"],[0.608695652173913,\"#3A79AC\"],[0.612040133779264,\"#3A79AC\"],[0.615384615384615,\"#3B7AAD\"],[0.618729096989967,\"#3B7AAE\"],[0.622073578595318,\"#3B7BAE\"],[0.625418060200669,\"#3B7BAF\"],[0.62876254180602,\"#3C7CB0\"],[0.632107023411371,\"#3C7CB0\"],[0.635451505016722,\"#3C7DB1\"],[0.638795986622074,\"#3C7DB1\"],[0.642140468227425,\"#3C7EB2\"],[0.645484949832776,\"#3D7EB3\"],[0.648829431438127,\"#3D7FB3\"],[0.652173913043478,\"#3D7FB4\"],[0.655518394648829,\"#3D7FB5\"],[0.658862876254181,\"#3E80B5\"],[0.662207357859532,\"#3E80B6\"],[0.665551839464883,\"#3E81B6\"],[0.668896321070234,\"#3E81B7\"],[0.672240802675585,\"#3F82B8\"],[0.675585284280937,\"#3F82B8\"],[0.678929765886288,\"#3F83B9\"],[0.682274247491639,\"#3F83BA\"],[0.68561872909699,\"#4084BA\"],[0.688963210702341,\"#4084BB\"],[0.692307692307692,\"#4085BB\"],[0.695652173913044,\"#4085BC\"],[0.698996655518395,\"#4086BD\"],[0.702341137123746,\"#4186BD\"],[0.705685618729097,\"#4186BE\"],[0.709030100334448,\"#4187BF\"],[0.712374581939799,\"#4187BF\"],[0.71571906354515,\"#4288C0\"],[0.719063545150502,\"#4288C1\"],[0.722408026755853,\"#4289C1\"],[0.725752508361204,\"#4289C2\"],[0.729096989966555,\"#438AC2\"],[0.732441471571906,\"#438AC3\"],[0.735785953177258,\"#438BC4\"],[0.739130434782609,\"#438BC4\"],[0.74247491638796,\"#438CC5\"],[0.745819397993311,\"#448CC6\"],[0.749163879598662,\"#448DC6\"],[0.752508361204013,\"#448DC7\"],[0.755852842809365,\"#448EC8\"],[0.759197324414716,\"#458EC8\"],[0.762541806020067,\"#458FC9\"],[0.765886287625418,\"#458FC9\"],[0.769230769230769,\"#458FCA\"],[0.77257525083612,\"#4690CB\"],[0.775919732441472,\"#4690CB\"],[0.779264214046823,\"#4691CC\"],[0.782608695652174,\"#4691CD\"],[0.785953177257525,\"#4792CD\"],[0.789297658862876,\"#4792CE\"],[0.792642140468227,\"#4793CF\"],[0.795986622073579,\"#4793CF\"],[0.79933110367893,\"#4894D0\"],[0.802675585284281,\"#4894D0\"],[0.806020066889632,\"#4895D1\"],[0.809364548494983,\"#4895D2\"],[0.812709030100335,\"#4896D2\"],[0.816053511705686,\"#4996D3\"],[0.819397993311037,\"#4997D4\"],[0.822742474916388,\"#4997D4\"],[0.826086956521739,\"#4998D5\"],[0.82943143812709,\"#4A98D6\"],[0.832775919732442,\"#4A99D6\"],[0.836120401337793,\"#4A99D7\"],[0.839464882943144,\"#4A9AD8\"],[0.842809364548495,\"#4B9AD8\"],[0.846153846153846,\"#4B9BD9\"],[0.849498327759197,\"#4B9BDA\"],[0.852842809364549,\"#4B9BDA\"],[0.8561872909699,\"#4C9CDB\"],[0.859531772575251,\"#4C9CDB\"],[0.862876254180602,\"#4C9DDC\"],[0.866220735785953,\"#4C9DDD\"],[0.869565217391304,\"#4D9EDD\"],[0.872909698996655,\"#4D9EDE\"],[0.876254180602007,\"#4D9FDF\"],[0.879598662207358,\"#4D9FDF\"],[0.882943143812709,\"#4DA0E0\"],[0.88628762541806,\"#4EA0E1\"],[0.889632107023411,\"#4EA1E1\"],[0.892976588628763,\"#4EA1E2\"],[0.896321070234114,\"#4EA2E3\"],[0.899665551839465,\"#4FA2E3\"],[0.903010033444816,\"#4FA3E4\"],[0.906354515050167,\"#4FA3E5\"],[0.909698996655518,\"#4FA4E5\"],[0.91304347826087,\"#50A4E6\"],[0.916387959866221,\"#50A5E7\"],[0.919732441471572,\"#50A5E7\"],[0.923076923076923,\"#50A6E8\"],[0.926421404682274,\"#51A6E8\"],[0.929765886287626,\"#51A7E9\"],[0.933110367892977,\"#51A7EA\"],[0.936454849498328,\"#51A8EA\"],[0.939799331103679,\"#52A8EB\"],[0.94314381270903,\"#52A9EC\"],[0.946488294314381,\"#52A9EC\"],[0.949832775919732,\"#52AAED\"],[0.953177257525084,\"#53AAEE\"],[0.956521739130435,\"#53ABEE\"],[0.959866220735786,\"#53ABEF\"],[0.963210702341137,\"#53ACF0\"],[0.966555183946488,\"#54ACF0\"],[0.969899665551839,\"#54ADF1\"],[0.973244147157191,\"#54ADF2\"],[0.976588628762542,\"#54AEF2\"],[0.979933110367893,\"#55AEF3\"],[0.983277591973244,\"#55AFF4\"],[0.986622073578595,\"#55AFF4\"],[0.989966555183946,\"#55B0F5\"],[0.993311036789298,\"#56B0F6\"],[0.996655518394649,\"#56B1F6\"],[1,\"#56B1F7\"]],\"colorbar\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"thickness\":23.04,\"title\":\"Z\",\"titlefont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial Narrow\",\"size\":15.2760481527605},\"tickmode\":\"array\",\"ticktext\":[\"1\",\"2\",\"3\",\"4\"],\"tickvals\":[0.198641999477395,0.399186147130508,0.599730294783621,0.800274442436734],\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial Narrow\",\"size\":12.2208385222084},\"ticklen\":2,\"len\":0.5}},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":55.8505603985056,\"r\":39.8505603985056,\"b\":70.9007887090079,\"l\":93.8148609381486},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial Narrow\",\"size\":15.2760481527605},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.4,20.6],\"tickmode\":\"array\",\"ticktext\":[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\"],\"tickvals\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"categoryorder\":\"array\",\"categoryarray\":[\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.81901203819012,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"Arial Narrow\",\"size\":15.2760481527605},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.265670402656704,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"X\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial Narrow\",\"size\":11.9551681195517}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.4,20.6],\"tickmode\":\"array\",\"ticktext\":[\"var1\",\"var2\",\"var3\",\"var4\",\"var5\",\"var6\",\"var7\",\"var8\",\"var9\",\"var10\",\"var11\",\"var12\",\"var13\",\"var14\",\"var15\",\"var16\",\"var17\",\"var18\",\"var19\",\"var20\"],\"tickvals\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\"categoryorder\":\"array\",\"categoryarray\":[\"var1\",\"var2\",\"var3\",\"var4\",\"var5\",\"var6\",\"var7\",\"var8\",\"var9\",\"var10\",\"var11\",\"var12\",\"var13\",\"var14\",\"var15\",\"var16\",\"var17\",\"var18\",\"var19\",\"var20\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.81901203819012,\"tickwidth\":0,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"Arial Narrow\",\"size\":15.2760481527605},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(204,204,204,1)\",\"gridwidth\":0.265670402656704,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"Y\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial Narrow\",\"size\":11.9551681195517}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":null,\"bordercolor\":null,\"borderwidth\":0,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"Arial Narrow\",\"size\":12.2208385222084}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"1e94bd039cb\":{\"x\":{},\"y\":{},\"fill\":{},\"text\":{},\"type\":\"heatmap\"}},\"cur_data\":\"1e94bd039cb\",\"visdat\":{\"1e94bd039cb\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt; r # save the widget # library(htmlwidgets) # saveWidget(pp, file=paste0( getwd(), \"/HtmlWidget/ggplotlyHeatmap.html\")) ### Interactive Heatmaps from R Three options exist to build an interactive heatmap from R: * plotly: As described above, plotly allows to turn any heatmap made with ggplot2 interactive. * d3heatmap: A package that uses the same syntax as the base R heatmap() function to make interactive version. * heatmaply: The most flexible option, allowing many different kind of customization. See the code of the chart beside here. #### Definition A heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors. It is a bit like looking a data table from above. Here is an example showing 8 general features like population or life expectancy for about 30 countries in 2015. Data come from the French National Institute of Demographic Studies. r # Libraries library(tidyverse) library(hrbrthemes) library(viridis) library(plotly) library(d3heatmap) # Load data data &lt;- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/multivariate.csv\", header=T, sep=\";\") colnames(data) &lt;- gsub(\"\\\\.\", \" \", colnames(data)) # Select a few country data &lt;- data %&gt;% filter(Country %in% c(\"France\", \"Sweden\", \"Italy\", \"Spain\", \"England\", \"Portugal\", \"Greece\", \"Peru\", \"Chile\", \"Brazil\", \"Argentina\", \"Bolivia\", \"Venezuela\", \"Australia\", \"New Zealand\", \"Fiji\", \"China\", \"India\", \"Thailand\", \"Afghanistan\", \"Bangladesh\", \"United States of America\", \"Canada\", \"Burundi\", \"Angola\", \"Kenya\", \"Togo\")) %&gt;% arrange(Country) %&gt;% mutate(Country = factor(Country, Country)) # Matrix format mat &lt;- data rownames(mat) &lt;- mat[,1] mat &lt;- mat %&gt;% dplyr::select(-Country, -Group, -Continent) mat &lt;- as.matrix(mat) # Heatmap #d3heatmap(mat, scale=\"column\", dendrogram = \"none\", width=\"800px\", height=\"80Opx\", colors = \"Blues\") library(heatmaply) p &lt;- heatmaply(mat, dendrogram = \"none\", xlab = \"\", ylab = \"\", main = \"\", scale = \"column\", margins = c(60,100,40,20), grid_color = \"white\", grid_width = 0.00001, titleX = FALSE, hide_colorbar = TRUE, branches_lwd = 0.1, label_names = c(\"Country\", \"Feature:\", \"Value\"), fontsize_row = 5, fontsize_col = 5, labCol = colnames(mat), labRow = rownames(mat), heatmap_layers = theme(axis.line=element_blank()) ) p {=html} &lt;div id=\"htmlwidget-30c002d81d6f9ad5e7d0\" style=\"width:480px;height:480px;\" class=\"plotly html-widget\"&gt;&lt;/div&gt; &lt;script type=\"application/json\" data-for=\"htmlwidget-30c002d81d6f9ad5e7d0\"&gt;{\"x\":{\"data\":[{\"x\":[1,2,3,4,5,6,7,8],\"y\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\"z\":[[0.317922569194334,0.377371817101762,0.179135836856678,0.375408614218201,0.316360770427702,0.349320803680632,0.399398200543317,0.311606879479812],[0.444730964306849,0.287333797579088,0.41064260969617,0.457251250493259,0.272590771509239,0.302269812706677,0.313591448439497,0.735554545714014],[0.304434197975164,0.60933417248221,0.377570213576242,0.131659893138137,0.510673038353602,0.601910334172386,0.612264950954717,0.294831880442361],[0.333356423804734,0.246129958136508,0.402374510666188,0.378966989708421,0.299118043581035,0.24778971789473,0.219534047094925,0.361686306187273],[0.308367932033756,0.28306080682208,0.452892595739377,0.515092644086784,0.253537558343672,0.306851093406773,0.304350721289855,0.310252008280421],[0.323819748900131,0.22629107247897,0.468519302906043,0.523081197062328,0.254021681058983,0.239122430083739,0.212933527702323,0.369561495033729],[0.308471428841995,0.21103039120394,0.59254078835577,0.498172568630788,0.254684862860777,0.221787854461756,0.138677684535556,0.311962533169652],[0.318019223238392,0.380423953356768,0.170867737826696,0.386083740688861,0.335593042679753,0.357988091491623,0.389497421454415,0.313173449304107],[0.306084159488324,0.291912001961597,0.27835302521646,0.508847695101448,0.261979862680521,0.313413468463667,0.343293785706204,0.299218275950387],[0.325349962040122,0.592547423079677,0.327961619396351,0.169022835785446,0.553116673668475,0.572193918820415,0.604014301713965,0.305518427027552],[0.329666463220093,0.221712868096461,0.559468392235843,0.531977135787877,0.250042590248213,0.252742453786726,0.191481839676368,0.304773247867887],[0.88493539287573,0.385002157739276,0.311425421336388,0.272215725001824,0.457618494210012,0.356749907518625,0.384547031909964,1],[0.308746422427521,0.217134663713952,0.642149382535662,0.494614193140568,0.252695317455393,0.229216958299748,0.161779502409661,0.31312264163413],[0.331983594240907,0.27817738881407,0.460251203876061,0.515964446081888,0.256011226464367,0.314651652436665,0.262437423146835,0.404440960473032],[0.304484663360999,0.380423953356768,0.311425421336388,0.298903541178473,0.32431895204924,0.374084483140608,0.275638461932038,0.29343466951799],[0.900138304195019,0.269020980049052,0.31969352036637,0.40387561813996,0.299118043581035,0.265124293516714,0.255836903754233,0.423705535339362],[0.312005716541516,0.288859865706591,0.137795341706769,0.514185258336778,0.275243498716419,0.281220685165698,0.353194564795106,0.31181011015972],[0.319902694079231,0.256812435029029,0.327961619396351,0.512406070591668,0.263969408085906,0.261409741597717,0.341643655858054,0.347299267638748],[0.30936954164076,0.734471758937451,0.567736491265825,0.0765050730397283,0.703658942675913,0.764112434635229,0.722823650780793,0.295644803161995],[0.395136747886271,0.307172683236626,0.228744431036569,0.386083740688861,0.342888042499497,0.283697053111695,0.320191967832099,0.4505065812523],[0.308894397202937,0.444518814711891,0.303157322306406,0.282890851472483,0.464913494029755,0.416182738222567,0.437351187050776,0.299438442520288],[0.375404782024638,0.377371817101762,0.137795341706769,0.341604047061112,0.401911222859242,0.323318940247657,0.382896902061813,0.363845632161302],[0.314774469998281,0.2934380700891,0.261816827156497,0.519522821572108,0.259327135473342,0.298555260787681,0.407648849784069,0.326349571718177],[0.323210315215255,0.352954727061715,0.327961619396351,0.4109923691204,0.313708043220522,0.348082619707633,0.348244175250655,0.297236776821279],[0.315856909757174,0.761940985232505,0.749634669925426,0,0.813083939972069,0.780208826284214,0.706322352299289,0.298515436515704],[0.319037939755848,0.569656401167133,0.336229718426333,0.138776644118577,0.653920307541297,0.582099390604406,0.554510406269453,0.300615486874758]],\"text\":[[\"Country: Venezuela&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.338097\",\"Country: Venezuela&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.041108\",\"Country: Venezuela&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.223367\",\"Country: Venezuela&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.028586\",\"Country: Venezuela&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.348059\",\"Country: Venezuela&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.137819\",\"Country: Venezuela&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.181607\",\"Country: Venezuela&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.378382\"],[\"Country: United States of America&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 0.470768\",\"Country: United States of America&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.533211\",\"Country: United States of America&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.253331\",\"Country: United States of America&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.550630\",\"Country: United States of America&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.627252\",\"Country: United States of America&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.437940\",\"Country: United States of America&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.365723\",\"Country: United States of America&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 2.325825\"],[\"Country: Togo&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.424134\",\"Country: Togo&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 1.520712\",\"Country: Togo&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.042374\",\"Country: Togo&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.526198\",\"Country: Togo&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.891388\",\"Country: Togo&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 1.473358\",\"Country: Togo&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 1.539406\",\"Country: Togo&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.485384\"],[\"Country: Thailand&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.239650\",\"Country: Thailand&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.796036\",\"Country: Thailand&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.200591\",\"Country: Thailand&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.051283\",\"Country: Thailand&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.458044\",\"Country: Thailand&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.785449\",\"Country: Thailand&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.965681\",\"Country: Thailand&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.058944\"],[\"Country: Sweden&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.399042\",\"Country: Sweden&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.560467\",\"Country: Sweden&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.522828\",\"Country: Sweden&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.919579\",\"Country: Sweden&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.748785\",\"Country: Sweden&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.408718\",\"Country: Sweden&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.424667\",\"Country: Sweden&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.387024\"],[\"Country: Spain&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.300481\",\"Country: Spain&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.922581\",\"Country: Spain&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.622505\",\"Country: Spain&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.970535\",\"Country: Spain&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.745697\",\"Country: Spain&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.840734\",\"Country: Spain&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.007783\",\"Country: Spain&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.008711\"],[\"Country: Portugal&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.398382\",\"Country: Portugal&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -1.019923\",\"Country: Portugal&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.413593\",\"Country: Portugal&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.811652\",\"Country: Portugal&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.741467\",\"Country: Portugal&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.951305\",\"Country: Portugal&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.481434\",\"Country: Portugal&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.376114\"],[\"Country: Peru&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.337480\",\"Country: Peru&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.060577\",\"Country: Peru&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.276106\",\"Country: Peru&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.096679\",\"Country: Peru&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.225383\",\"Country: Peru&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.082533\",\"Country: Peru&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.118453\",\"Country: Peru&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.368390\"],[\"Country: New Zealand&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.413610\",\"Country: New Zealand&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.504009\",\"Country: New Zealand&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.590496\",\"Country: New Zealand&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.879745\",\"Country: New Zealand&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.694935\",\"Country: New Zealand&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.366859\",\"Country: New Zealand&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.176263\",\"Country: New Zealand&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.457405\"],[\"Country: Kenya&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.290720\",\"Country: Kenya&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 1.413635\",\"Country: Kenya&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.274061\",\"Country: Kenya&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.287874\",\"Country: Kenya&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 1.162121\",\"Country: Kenya&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 1.283808\",\"Country: Kenya&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 1.486778\",\"Country: Kenya&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.417218\"],[\"Country: Italy&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.263187\",\"Country: Italy&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.951783\",\"Country: Italy&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.202636\",\"Country: Italy&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 1.027279\",\"Country: Italy&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.771078\",\"Country: Italy&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.753857\",\"Country: Italy&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.144616\",\"Country: Italy&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.421971\"],[\"Country: India&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 3.278671\",\"Country: India&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.089780\",\"Country: India&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.379540\",\"Country: India&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.629644\",\"Country: India&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.552973\",\"Country: India&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.090431\",\"Country: India&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.086876\",\"Country: India&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 4.012627\"],[\"Country: Greece&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.396628\",\"Country: Greece&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.980986\",\"Country: Greece&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.730028\",\"Country: Greece&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.788955\",\"Country: Greece&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.754158\",\"Country: Greece&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.903917\",\"Country: Greece&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.334076\",\"Country: Greece&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.368714\"],[\"Country: France&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.248407\",\"Country: France&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.591617\",\"Country: France&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.569766\",\"Country: France&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.925140\",\"Country: France&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.733007\",\"Country: France&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.358961\",\"Country: France&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.692016\",\"Country: France&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 0.213773\"],[\"Country: Fiji&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.423812\",\"Country: Fiji&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.060577\",\"Country: Fiji&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.379540\",\"Country: Fiji&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.459412\",\"Country: Fiji&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.297296\",\"Country: Fiji&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 0.020140\",\"Country: Fiji&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.607812\",\"Country: Fiji&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.494296\"],[\"Country: China&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 3.375645\",\"Country: China&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.650022\",\"Country: China&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.326800\",\"Country: China&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.210166\",\"Country: China&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.458044\",\"Country: China&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.674878\",\"Country: China&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.734118\",\"Country: China&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 0.336654\"],[\"Country: Chile&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.375838\",\"Country: Chile&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.523477\",\"Country: Chile&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.487063\",\"Country: Chile&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.913791\",\"Country: Chile&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.610331\",\"Country: Chile&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.572205\",\"Country: Chile&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.113109\",\"Country: Chile&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.377086\"],[\"Country: Canada&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.325466\",\"Country: Canada&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.727896\",\"Country: Canada&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.274061\",\"Country: Canada&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.902443\",\"Country: Canada&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.682244\",\"Country: Canada&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.698571\",\"Country: Canada&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.186789\",\"Country: Canada&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.150713\"],[\"Country: Burundi&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.392653\",\"Country: Burundi&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 2.318919\",\"Country: Burundi&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.255375\",\"Country: Burundi&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.878011\",\"Country: Burundi&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 2.122375\",\"Country: Burundi&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 2.507986\",\"Country: Burundi&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 2.244620\",\"Country: Burundi&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.480198\"],[\"Country: Brazil&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 0.154424\",\"Country: Brazil&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.406666\",\"Country: Brazil&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.906932\",\"Country: Brazil&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.096679\",\"Country: Brazil&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.178851\",\"Country: Brazil&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.556409\",\"Country: Brazil&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.323621\",\"Country: Brazil&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 0.507608\"],[\"Country: Bolivia&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.395684\",\"Country: Bolivia&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.469415\",\"Country: Bolivia&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.432279\",\"Country: Bolivia&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.561551\",\"Country: Bolivia&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.599505\",\"Country: Bolivia&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 0.288669\",\"Country: Bolivia&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.423695\",\"Country: Bolivia&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.456000\"],[\"Country: Bangladesh&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 0.028561\",\"Country: Bangladesh&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.041108\",\"Country: Bangladesh&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.487063\",\"Country: Bangladesh&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.187041\",\"Country: Bangladesh&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.197636\",\"Country: Bangladesh&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.303675\",\"Country: Bangladesh&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.076351\",\"Country: Bangladesh&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.045170\"],[\"Country: Australia&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.358177\",\"Country: Australia&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.494274\",\"Country: Australia&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.695975\",\"Country: Australia&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.947838\",\"Country: Australia&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.711856\",\"Country: Australia&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.461634\",\"Country: Australia&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.234235\",\"Country: Australia&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.284344\"],[\"Country: Argentina&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.304368\",\"Country: Argentina&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.114639\",\"Country: Argentina&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.274061\",\"Country: Argentina&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.255562\",\"Country: Argentina&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.364980\",\"Country: Argentina&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.145717\",\"Country: Argentina&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.144686\",\"Country: Argentina&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.470044\"],[\"Country: Angola&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.351273\",\"Country: Angola&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 2.494135\",\"Country: Angola&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 2.415637\",\"Country: Angola&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -2.366009\",\"Country: Angola&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 2.820357\",\"Country: Angola&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 2.610659\",\"Country: Angola&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 2.139364\",\"Country: Angola&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.461888\"],[\"Country: Afghanistan&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.330982\",\"Country: Afghanistan&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 1.267622\",\"Country: Afghanistan&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.221322\",\"Country: Afghanistan&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.480803\",\"Country: Afghanistan&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 1.805110\",\"Country: Afghanistan&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 1.346991\",\"Country: Afghanistan&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 1.171011\",\"Country: Afghanistan&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.448492\"]],\"colorscale\":[[0,\"#440154\"],[0.0765050730397283,\"#481D6F\"],[0.131659893138137,\"#472F7D\"],[0.137795341706769,\"#46307E\"],[0.138677684535556,\"#46317E\"],[0.138776644118577,\"#46317E\"],[0.161779502409661,\"#453882\"],[0.169022835785446,\"#443A83\"],[0.170867737826696,\"#443B84\"],[0.179135836856678,\"#433E85\"],[0.191481839676368,\"#424186\"],[0.21103039120394,\"#3F4788\"],[0.212933527702323,\"#3F4788\"],[0.217134663713952,\"#3F4889\"],[0.219534047094925,\"#3E4989\"],[0.221712868096461,\"#3E4A89\"],[0.221787854461756,\"#3E4A89\"],[0.22629107247897,\"#3E4B8A\"],[0.228744431036569,\"#3E4C8A\"],[0.229216958299748,\"#3E4C8A\"],[0.239122430083739,\"#3C4F8A\"],[0.246129958136508,\"#3B518B\"],[0.24778971789473,\"#3B518B\"],[0.250042590248213,\"#3B528B\"],[0.252695317455393,\"#3B528B\"],[0.252742453786726,\"#3B528B\"],[0.253537558343672,\"#3A538B\"],[0.254021681058983,\"#3A538B\"],[0.254684862860777,\"#3A538B\"],[0.255836903754233,\"#3A538B\"],[0.256011226464367,\"#3A538B\"],[0.256812435029029,\"#3A538B\"],[0.259327135473342,\"#3A548C\"],[0.261409741597717,\"#39558C\"],[0.261816827156497,\"#39558C\"],[0.261979862680521,\"#39558C\"],[0.262437423146835,\"#39558C\"],[0.263969408085906,\"#39558C\"],[0.265124293516714,\"#39568C\"],[0.269020980049052,\"#38578C\"],[0.272215725001824,\"#38588C\"],[0.272590771509239,\"#38598C\"],[0.275243498716419,\"#38598C\"],[0.275638461932038,\"#38598C\"],[0.27817738881407,\"#375A8C\"],[0.27835302521646,\"#375A8C\"],[0.281220685165698,\"#375B8D\"],[0.282890851472483,\"#375B8D\"],[0.28306080682208,\"#375B8D\"],[0.283697053111695,\"#375B8D\"],[0.287333797579088,\"#365C8D\"],[0.288859865706591,\"#365D8D\"],[0.291912001961597,\"#365D8D\"],[0.29343466951799,\"#355E8D\"],[0.2934380700891,\"#355E8D\"],[0.294831880442361,\"#355E8D\"],[0.295644803161995,\"#355E8D\"],[0.297236776821279,\"#355F8D\"],[0.298515436515704,\"#355F8D\"],[0.298555260787681,\"#355F8D\"],[0.298903541178473,\"#355F8D\"],[0.299118043581035,\"#355F8D\"],[0.299218275950387,\"#355F8D\"],[0.299438442520288,\"#355F8D\"],[0.300615486874758,\"#34608D\"],[0.302269812706677,\"#34608D\"],[0.303157322306406,\"#34608D\"],[0.304350721289855,\"#34618D\"],[0.304434197975164,\"#34618D\"],[0.304484663360999,\"#34618D\"],[0.304773247867887,\"#34618D\"],[0.305518427027552,\"#34618D\"],[0.306084159488324,\"#34618D\"],[0.306851093406773,\"#34618D\"],[0.307172683236626,\"#34618D\"],[0.308367932033756,\"#33628D\"],[0.308471428841995,\"#33628D\"],[0.308746422427521,\"#33628D\"],[0.308894397202937,\"#33628D\"],[0.30936954164076,\"#33628D\"],[0.310252008280421,\"#33628D\"],[0.311425421336388,\"#33628D\"],[0.311606879479812,\"#33628D\"],[0.31181011015972,\"#33638D\"],[0.311962533169652,\"#33638D\"],[0.312005716541516,\"#33638D\"],[0.31312264163413,\"#33638D\"],[0.313173449304107,\"#33638D\"],[0.313413468463667,\"#33638D\"],[0.313591448439497,\"#33638D\"],[0.313708043220522,\"#33638D\"],[0.314651652436665,\"#33638D\"],[0.314774469998281,\"#33638D\"],[0.315856909757174,\"#32648E\"],[0.316360770427702,\"#32648E\"],[0.317922569194334,\"#32648E\"],[0.318019223238392,\"#32648E\"],[0.319037939755848,\"#32648E\"],[0.31969352036637,\"#32658E\"],[0.319902694079231,\"#32658E\"],[0.320191967832099,\"#32658E\"],[0.323210315215255,\"#32658E\"],[0.323318940247657,\"#32658E\"],[0.323819748900131,\"#31668E\"],[0.32431895204924,\"#31668E\"],[0.325349962040122,\"#31668E\"],[0.326349571718177,\"#31668E\"],[0.327961619396351,\"#31678E\"],[0.329666463220093,\"#31678E\"],[0.331983594240907,\"#31688E\"],[0.333356423804734,\"#31688E\"],[0.335593042679753,\"#30698E\"],[0.336229718426333,\"#30698E\"],[0.341604047061112,\"#306A8E\"],[0.341643655858054,\"#306A8E\"],[0.342888042499497,\"#306A8E\"],[0.343293785706204,\"#2F6B8E\"],[0.347299267638748,\"#2F6C8E\"],[0.348082619707633,\"#2F6C8E\"],[0.348244175250655,\"#2F6C8E\"],[0.349320803680632,\"#2F6C8E\"],[0.352954727061715,\"#2E6D8E\"],[0.353194564795106,\"#2E6D8E\"],[0.356749907518625,\"#2E6E8E\"],[0.357988091491623,\"#2E6E8E\"],[0.361686306187273,\"#2E6F8E\"],[0.363845632161302,\"#2D708E\"],[0.369561495033729,\"#2D718E\"],[0.374084483140608,\"#2C718E\"],[0.375404782024638,\"#2C728E\"],[0.375408614218201,\"#2C728E\"],[0.377371817101762,\"#2C728E\"],[0.377570213576242,\"#2C728E\"],[0.378966989708421,\"#2C738E\"],[0.380423953356768,\"#2C738E\"],[0.382896902061813,\"#2B748E\"],[0.384547031909964,\"#2B748E\"],[0.385002157739276,\"#2B748E\"],[0.386083740688861,\"#2B748E\"],[0.389497421454415,\"#2B758E\"],[0.395136747886271,\"#2A778E\"],[0.399398200543317,\"#2A788E\"],[0.401911222859242,\"#2A788E\"],[0.402374510666188,\"#29798E\"],[0.40387561813996,\"#29798E\"],[0.404440960473032,\"#29798E\"],[0.407648849784069,\"#297A8E\"],[0.41064260969617,\"#297B8E\"],[0.4109923691204,\"#297B8E\"],[0.416182738222567,\"#287C8E\"],[0.423705535339362,\"#277E8E\"],[0.437351187050776,\"#26828E\"],[0.444518814711891,\"#26828E\"],[0.444730964306849,\"#26828E\"],[0.4505065812523,\"#25848E\"],[0.452892595739377,\"#25848E\"],[0.457251250493259,\"#24868E\"],[0.457618494210012,\"#24868E\"],[0.460251203876061,\"#24868E\"],[0.464913494029755,\"#23888E\"],[0.468519302906043,\"#23888E\"],[0.494614193140568,\"#218F8D\"],[0.498172568630788,\"#21908D\"],[0.508847695101448,\"#20928C\"],[0.510673038353602,\"#20928C\"],[0.512406070591668,\"#20938C\"],[0.514185258336778,\"#20938C\"],[0.515092644086784,\"#20938C\"],[0.515964446081888,\"#1F948C\"],[0.519522821572108,\"#1F948C\"],[0.523081197062328,\"#1F958B\"],[0.531977135787877,\"#1F988B\"],[0.553116673668475,\"#1E9D89\"],[0.554510406269453,\"#1E9D89\"],[0.559468392235843,\"#1F9F88\"],[0.567736491265825,\"#1FA188\"],[0.569656401167133,\"#1FA188\"],[0.572193918820415,\"#1FA187\"],[0.582099390604406,\"#20A386\"],[0.59254078835577,\"#21A685\"],[0.592547423079677,\"#21A685\"],[0.601910334172386,\"#22A884\"],[0.604014301713965,\"#23A983\"],[0.60933417248221,\"#24AA83\"],[0.612264950954717,\"#25AB82\"],[0.642149382535662,\"#2DB27D\"],[0.653920307541297,\"#31B57B\"],[0.703658942675913,\"#45BF70\"],[0.706322352299289,\"#46C06F\"],[0.722823650780793,\"#4FC36B\"],[0.734471758937451,\"#55C568\"],[0.735554545714014,\"#55C667\"],[0.749634669925426,\"#5CC863\"],[0.761940985232505,\"#64CB5F\"],[0.764112434635229,\"#65CB5E\"],[0.780208826284214,\"#6ECE58\"],[0.813083939972069,\"#82D34C\"],[0.88493539287573,\"#B1DD2E\"],[0.900138304195019,\"#BCDF27\"],[1,\"#FDE725\"]],\"type\":\"heatmap\",\"showscale\":false,\"autocolorscale\":false,\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5],\"y\":[0.5,0.5,null,1.5,1.5,null,10.5,10.5,null,11.5,11.5,null,12.5,12.5,null,13.5,13.5,null,14.5,14.5,null,15.5,15.5,null,16.5,16.5,null,17.5,17.5,null,18.5,18.5,null,19.5,19.5,null,2.5,2.5,null,20.5,20.5,null,21.5,21.5,null,22.5,22.5,null,23.5,23.5,null,24.5,24.5,null,25.5,25.5,null,26.5,26.5,null,3.5,3.5,null,4.5,4.5,null,5.5,5.5,null,6.5,6.5,null,7.5,7.5,null,8.5,8.5,null,9.5,9.5],\"text\":\"\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(255,255,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null,\"marker\":{\"showscale\":false}},{\"x\":[0.5,0.5,null,1.5,1.5,null,2.5,2.5,null,3.5,3.5,null,4.5,4.5,null,5.5,5.5,null,6.5,6.5,null,7.5,7.5,null,8.5,8.5],\"y\":[0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5],\"text\":\"\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(255,255,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null,\"marker\":{\"showscale\":false}},{\"x\":[1],\"y\":[1],\"name\":\"99_8cbac72f506d5a98cd793b2cd6548127\",\"type\":\"scatter\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"skip\",\"showlegend\":false,\"marker\":{\"color\":[0,1],\"colorscale\":[[0,\"#440154\"],[0.00334448160535119,\"#440256\"],[0.00668896321070237,\"#450357\"],[0.0100334448160535,\"#450558\"],[0.0133779264214047,\"#450659\"],[0.0167224080267559,\"#46075B\"],[0.0200668896321071,\"#46085C\"],[0.0234113712374582,\"#460A5D\"],[0.0267558528428094,\"#460B5E\"],[0.0301003344481605,\"#470C5F\"],[0.0334448160535117,\"#470E61\"],[0.0367892976588629,\"#470F62\"],[0.040133779264214,\"#471063\"],[0.0434782608695652,\"#471164\"],[0.0468227424749164,\"#471365\"],[0.0501672240802675,\"#481467\"],[0.0535117056856187,\"#481568\"],[0.0568561872909699,\"#481768\"],[0.0602006688963211,\"#481769\"],[0.0635451505016723,\"#48186A\"],[0.0668896321070234,\"#481A6C\"],[0.0702341137123746,\"#481B6D\"],[0.0735785953177257,\"#481C6E\"],[0.0769230769230769,\"#481D6F\"],[0.0802675585284281,\"#481E6F\"],[0.0836120401337793,\"#481F70\"],[0.0869565217391305,\"#482071\"],[0.0903010033444816,\"#482173\"],[0.0936454849498328,\"#482374\"],[0.096989966555184,\"#482475\"],[0.100334448160535,\"#482576\"],[0.103678929765886,\"#482576\"],[0.107023411371237,\"#482777\"],[0.110367892976589,\"#482878\"],[0.11371237458194,\"#482979\"],[0.117056856187291,\"#472A7A\"],[0.120401337792642,\"#472B7A\"],[0.123745819397993,\"#472D7B\"],[0.127090301003345,\"#472D7B\"],[0.130434782608696,\"#472E7C\"],[0.133779264214047,\"#472F7D\"],[0.137123745819398,\"#46307E\"],[0.140468227424749,\"#46327E\"],[0.1438127090301,\"#46337F\"],[0.147157190635451,\"#463480\"],[0.150501672240803,\"#463480\"],[0.153846153846154,\"#453581\"],[0.157190635451505,\"#453781\"],[0.160535117056856,\"#453882\"],[0.163879598662207,\"#443983\"],[0.167224080267559,\"#443A83\"],[0.17056856187291,\"#443A83\"],[0.173913043478261,\"#443C84\"],[0.177257525083612,\"#433D84\"],[0.180602006688963,\"#433E85\"],[0.183946488294314,\"#423F85\"],[0.187290969899666,\"#424086\"],[0.190635451505017,\"#424186\"],[0.193979933110368,\"#424186\"],[0.197324414715719,\"#414387\"],[0.20066889632107,\"#414487\"],[0.204013377926421,\"#404588\"],[0.207357859531773,\"#404688\"],[0.210702341137124,\"#3F4788\"],[0.214046822742475,\"#3F4889\"],[0.217391304347826,\"#3F4889\"],[0.220735785953177,\"#3E4989\"],[0.224080267558528,\"#3E4A89\"],[0.22742474916388,\"#3E4C8A\"],[0.230769230769231,\"#3D4D8A\"],[0.234113712374582,\"#3D4E8A\"],[0.237458193979933,\"#3C4F8A\"],[0.240802675585284,\"#3C4F8A\"],[0.244147157190635,\"#3C508B\"],[0.247491638795987,\"#3B518B\"],[0.250836120401338,\"#3B528B\"],[0.254180602006689,\"#3A538B\"],[0.25752508361204,\"#3A548C\"],[0.260869565217391,\"#39558C\"],[0.264214046822743,\"#39558C\"],[0.267558528428094,\"#39568C\"],[0.270903010033445,\"#38588C\"],[0.274247491638796,\"#38598C\"],[0.277591973244147,\"#375A8C\"],[0.280936454849498,\"#375B8D\"],[0.28428093645485,\"#375B8D\"],[0.287625418060201,\"#365C8D\"],[0.290969899665552,\"#365D8D\"],[0.294314381270903,\"#355E8D\"],[0.297658862876254,\"#355F8D\"],[0.301003344481605,\"#34608D\"],[0.304347826086957,\"#34618D\"],[0.307692307692308,\"#34618D\"],[0.311036789297659,\"#33628D\"],[0.31438127090301,\"#33638D\"],[0.317725752508361,\"#32648E\"],[0.321070234113712,\"#32658E\"],[0.324414715719064,\"#31668E\"],[0.327759197324415,\"#31678E\"],[0.331103678929766,\"#31678E\"],[0.334448160535117,\"#31688E\"],[0.337792642140468,\"#30698E\"],[0.341137123745819,\"#306A8E\"],[0.344481605351171,\"#2F6B8E\"],[0.347826086956522,\"#2F6C8E\"],[0.351170568561873,\"#2E6D8E\"],[0.354515050167224,\"#2E6D8E\"],[0.357859531772575,\"#2E6E8E\"],[0.361204013377926,\"#2E6F8E\"],[0.364548494983278,\"#2D708E\"],[0.367892976588629,\"#2D718E\"],[0.37123745819398,\"#2C718E\"],[0.374581939799331,\"#2C728E\"],[0.377926421404682,\"#2C728E\"],[0.381270903010033,\"#2C738E\"],[0.384615384615385,\"#2B748E\"],[0.387959866220736,\"#2B758E\"],[0.391304347826087,\"#2A768E\"],[0.394648829431438,\"#2A778E\"],[0.397993311036789,\"#2A778E\"],[0.40133779264214,\"#2A788E\"],[0.404682274247492,\"#29798E\"],[0.408026755852843,\"#297A8E\"],[0.411371237458194,\"#297B8E\"],[0.414715719063545,\"#287C8E\"],[0.418060200668896,\"#287D8E\"],[0.421404682274247,\"#287D8E\"],[0.424749163879599,\"#277E8E\"],[0.42809364548495,\"#277F8E\"],[0.431438127090301,\"#27808E\"],[0.434782608695652,\"#26818E\"],[0.438127090301003,\"#26828E\"],[0.441471571906355,\"#26828E\"],[0.444816053511706,\"#26828E\"],[0.448160535117057,\"#25838E\"],[0.451505016722408,\"#25848E\"],[0.454849498327759,\"#25858E\"],[0.45819397993311,\"#24868E\"],[0.461538461538462,\"#24878E\"],[0.464882943143813,\"#23888E\"],[0.468227424749164,\"#23888E\"],[0.471571906354515,\"#23898E\"],[0.474916387959866,\"#238A8D\"],[0.478260869565217,\"#228B8D\"],[0.481605351170569,\"#228C8D\"],[0.48494983277592,\"#228D8D\"],[0.488294314381271,\"#218E8D\"],[0.491638795986622,\"#218E8D\"],[0.494983277591973,\"#218F8D\"],[0.498327759197324,\"#21908D\"],[0.501672240802676,\"#21918C\"],[0.505016722408027,\"#20928C\"],[0.508361204013378,\"#20928C\"],[0.511705685618729,\"#20928C\"],[0.51505016722408,\"#20938C\"],[0.518394648829431,\"#1F948C\"],[0.521739130434783,\"#1F958B\"],[0.525083612040134,\"#1F968B\"],[0.528428093645485,\"#1F978B\"],[0.531772575250836,\"#1F988B\"],[0.535117056856187,\"#1F988B\"],[0.538461538461538,\"#1F998A\"],[0.54180602006689,\"#1F9A8A\"],[0.545150501672241,\"#1E9B8A\"],[0.548494983277592,\"#1E9C89\"],[0.551839464882943,\"#1E9D89\"],[0.555183946488294,\"#1F9E89\"],[0.558528428093646,\"#1F9E89\"],[0.561872909698997,\"#1F9F88\"],[0.565217391304348,\"#1FA088\"],[0.568561872909699,\"#1FA188\"],[0.57190635451505,\"#1FA187\"],[0.575250836120401,\"#1FA287\"],[0.578595317725753,\"#20A386\"],[0.581939799331104,\"#20A386\"],[0.585284280936455,\"#20A486\"],[0.588628762541806,\"#21A585\"],[0.591973244147157,\"#21A685\"],[0.595317725752508,\"#22A785\"],[0.59866220735786,\"#22A884\"],[0.602006688963211,\"#23A983\"],[0.605351170568562,\"#23A983\"],[0.608695652173913,\"#24AA83\"],[0.612040133779264,\"#25AB82\"],[0.615384615384615,\"#25AC82\"],[0.618729096989967,\"#26AD81\"],[0.622073578595318,\"#27AD81\"],[0.625418060200669,\"#27AD81\"],[0.62876254180602,\"#28AE80\"],[0.632107023411371,\"#29AF7F\"],[0.635451505016722,\"#2AB07F\"],[0.638795986622074,\"#2CB17E\"],[0.642140468227425,\"#2DB27D\"],[0.645484949832776,\"#2EB37C\"],[0.648829431438127,\"#2EB37C\"],[0.652173913043478,\"#30B47C\"],[0.655518394648829,\"#31B57B\"],[0.658862876254181,\"#32B67A\"],[0.662207357859532,\"#34B679\"],[0.665551839464883,\"#35B779\"],[0.668896321070234,\"#36B878\"],[0.672240802675585,\"#37B878\"],[0.675585284280937,\"#39B977\"],[0.678929765886288,\"#3ABA76\"],[0.682274247491639,\"#3BBB75\"],[0.68561872909699,\"#3DBC74\"],[0.688963210702341,\"#3EBC73\"],[0.692307692307692,\"#40BD72\"],[0.695652173913044,\"#41BD72\"],[0.698996655518395,\"#42BE71\"],[0.702341137123746,\"#44BF70\"],[0.705685618729097,\"#46C06F\"],[0.709030100334448,\"#48C16E\"],[0.712374581939799,\"#49C16D\"],[0.71571906354515,\"#4BC26C\"],[0.719063545150502,\"#4DC26C\"],[0.722408026755853,\"#4EC36B\"],[0.725752508361204,\"#50C46A\"],[0.729096989966555,\"#52C569\"],[0.732441471571906,\"#54C568\"],[0.735785953177257,\"#55C667\"],[0.739130434782609,\"#57C666\"],[0.74247491638796,\"#59C765\"],[0.745819397993311,\"#5AC864\"],[0.749163879598662,\"#5CC863\"],[0.752508361204013,\"#5EC962\"],[0.755852842809365,\"#5FCA61\"],[0.759197324414716,\"#62CB5F\"],[0.762541806020067,\"#64CB5F\"],[0.765886287625418,\"#66CB5D\"],[0.769230769230769,\"#67CC5C\"],[0.772575250836121,\"#69CD5B\"],[0.775919732441472,\"#6CCD5A\"],[0.779264214046823,\"#6DCE59\"],[0.782608695652174,\"#6FCF57\"],[0.785953177257525,\"#71CF57\"],[0.789297658862876,\"#74D055\"],[0.792642140468227,\"#75D054\"],[0.795986622073579,\"#77D153\"],[0.79933110367893,\"#79D151\"],[0.802675585284281,\"#7BD250\"],[0.806020066889632,\"#7ED34F\"],[0.809364548494983,\"#80D34E\"],[0.812709030100334,\"#82D34D\"],[0.816053511705686,\"#84D44B\"],[0.819397993311037,\"#86D549\"],[0.822742474916388,\"#88D548\"],[0.826086956521739,\"#8AD647\"],[0.82943143812709,\"#8DD645\"],[0.832775919732441,\"#8FD644\"],[0.836120401337793,\"#91D743\"],[0.839464882943144,\"#93D741\"],[0.842809364548495,\"#95D840\"],[0.846153846153846,\"#97D83E\"],[0.849498327759197,\"#9AD93D\"],[0.852842809364549,\"#9CD93C\"],[0.8561872909699,\"#9ED93A\"],[0.859531772575251,\"#A0DA39\"],[0.862876254180602,\"#A2DA37\"],[0.866220735785953,\"#A5DB36\"],[0.869565217391304,\"#A7DB35\"],[0.872909698996656,\"#A9DC33\"],[0.876254180602007,\"#ABDC31\"],[0.879598662207358,\"#AEDC30\"],[0.882943143812709,\"#B0DD2F\"],[0.88628762541806,\"#B2DD2D\"],[0.889632107023411,\"#B5DE2B\"],[0.892976588628763,\"#B7DE2A\"],[0.896321070234114,\"#B9DE28\"],[0.899665551839465,\"#BBDE27\"],[0.903010033444816,\"#BEDF26\"],[0.906354515050167,\"#C0DF25\"],[0.909698996655518,\"#C2DF23\"],[0.91304347826087,\"#C4E021\"],[0.916387959866221,\"#C7E020\"],[0.919732441471572,\"#C9E11F\"],[0.923076923076923,\"#CBE11E\"],[0.926421404682274,\"#CEE11D\"],[0.929765886287625,\"#D0E11C\"],[0.933110367892977,\"#D2E21B\"],[0.936454849498328,\"#D4E21A\"],[0.939799331103679,\"#D7E219\"],[0.94314381270903,\"#D9E319\"],[0.946488294314381,\"#DBE319\"],[0.949832775919733,\"#DDE318\"],[0.953177257525084,\"#DFE318\"],[0.956521739130435,\"#E2E418\"],[0.959866220735786,\"#E4E419\"],[0.963210702341137,\"#E6E419\"],[0.966555183946488,\"#E8E419\"],[0.969899665551839,\"#EBE51A\"],[0.973244147157191,\"#EDE51B\"],[0.976588628762542,\"#EFE51C\"],[0.979933110367893,\"#F1E51D\"],[0.983277591973244,\"#F3E61E\"],[0.986622073578595,\"#F5E61F\"],[0.989966555183946,\"#F7E620\"],[0.993311036789298,\"#F9E622\"],[0.996655518394649,\"#FBE723\"],[1,\"#FDE725\"]],\"colorbar\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"thickness\":23.04,\"title\":null,\"titlefont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"tickmode\":\"array\",\"ticktext\":[\"-2\",\"0\",\"2\",\"4\"],\"tickvals\":[0.0573804294317733,0.370927114009461,0.684473798587148,0.998020483164836],\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"ticklen\":2,\"len\":0.5},\"showscale\":false},\"xaxis\":\"x\",\"yaxis\":\"y\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.5,8.5],\"tickmode\":\"array\",\"ticktext\":[\"Pop\",\"Birth rate\",\"Mortality rate\",\"Life expectancy\",\"Infant mortality\",\"Children per woman\",\"Growth rate\",\"Population aged 65 \"],\"tickvals\":[1,2,3,4,5,6,7,8],\"categoryorder\":\"array\",\"categoryarray\":[\"Pop\",\"Birth rate\",\"Mortality rate\",\"Life expectancy\",\"Infant mortality\",\"Children per woman\",\"Growth rate\",\"Population aged 65 \"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":6.6417600664176},\"tickangle\":-45,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y\",\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.5,26.5],\"tickmode\":\"array\",\"ticktext\":[\"Venezuela\",\"United States of America\",\"Togo\",\"Thailand\",\"Sweden\",\"Spain\",\"Portugal\",\"Peru\",\"New Zealand\",\"Kenya\",\"Italy\",\"India\",\"Greece\",\"France\",\"Fiji\",\"China\",\"Chile\",\"Canada\",\"Burundi\",\"Brazil\",\"Bolivia\",\"Bangladesh\",\"Australia\",\"Argentina\",\"Angola\",\"Afghanistan\"],\"tickvals\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\"categoryorder\":\"array\",\"categoryarray\":[\"Venezuela\",\"United States of America\",\"Togo\",\"Thailand\",\"Sweden\",\"Spain\",\"Portugal\",\"Peru\",\"New Zealand\",\"Kenya\",\"Italy\",\"India\",\"Greece\",\"France\",\"Fiji\",\"China\",\"Chile\",\"Canada\",\"Burundi\",\"Brazil\",\"Bolivia\",\"Bangladesh\",\"Australia\",\"Argentina\",\"Angola\",\"Afghanistan\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":6.6417600664176},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"annotations\":[],\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"images\":[],\"margin\":{\"t\":40,\"r\":20,\"b\":60,\"l\":100},\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"y\":1,\"yanchor\":\"top\"},\"hovermode\":\"closest\",\"barmode\":\"relative\",\"title\":\"\"},\"attrs\":{\"1e94775417f5\":{\"fill\":{},\"text\":{},\"x\":{},\"y\":{},\"type\":\"heatmap\"},\"1e942c5d433f\":{\"yintercept\":{}},\"1e946a942998\":{\"xintercept\":{}}},\"source\":\"A\",\"config\":{\"doubleClick\":\"reset\",\"showSendToCloud\":false,\"displaylogo\":false,\"modeBarButtonsToRemove\":[\"sendDataToCloud\",\"select2d\",\"lasso2d\",\"autoScale2d\",\"hoverClosestCartesian\",\"hoverCompareCartesian\",\"sendDataToCloud\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt; #### What for Heatmap is really useful to display a general view of numerical data, not to extract specific data point. In the graphic above, the huge population size of China and India pops out for example. Heatmap is also useful to display the result of hierarchical clustering. Basically, clustering checks what countries tend to have the same features on their numeric variables, what countries are similar. The usual way to represent the result is to use dendrogram. This type of chart can be drawn on top of the heatmap: r p &lt;- heatmaply(mat, #dendrogram = \"row\", xlab = \"\", ylab = \"\", main = \"\", scale = \"column\", margins = c(60,100,40,20), grid_color = \"white\", grid_width = 0.00001, titleX = FALSE, hide_colorbar = TRUE, branches_lwd = 0.1, label_names = c(\"Country\", \"Feature:\", \"Value\"), fontsize_row = 5, fontsize_col = 5, labCol = colnames(mat), labRow = rownames(mat), heatmap_layers = theme(axis.line=element_blank()) ) p {=html} &lt;div id=\"htmlwidget-3851ff2fac758ef1ea36\" style=\"width:480px;height:480px;\" class=\"plotly html-widget\"&gt;&lt;/div&gt; &lt;script type=\"application/json\" data-for=\"htmlwidget-3851ff2fac758ef1ea36\"&gt;{\"x\":{\"data\":[{\"x\":[4.84375,2.4375,null,2.4375,2.4375,null,2.4375,1,null,1,1,null,2.4375,3.875,null,3.875,3.875,null,3.875,2.75,null,2.75,2.75,null,2.75,2,null,2,2,null,2.75,3.5,null,3.5,3.5,null,3.5,3,null,3,3,null,3.5,4,null,4,4,null,3.875,5,null,5,5,null,4.84375,7.25,null,7.25,7.25,null,7.25,6.5,null,6.5,6.5,null,6.5,6,null,6,6,null,6.5,7,null,7,7,null,7.25,8,null,8,8],\"y\":[9.89145535249036,9.89145535249036,null,9.89145535249036,7.02326729125818,null,7.02326729125818,7.02326729125818,null,7.02326729125818,0,null,7.02326729125818,7.02326729125818,null,7.02326729125818,2.34341233891689,null,2.34341233891689,2.34341233891689,null,2.34341233891689,1.60227896223096,null,1.60227896223096,1.60227896223096,null,1.60227896223096,0,null,1.60227896223096,1.60227896223096,null,1.60227896223096,0.709123356955131,null,0.709123356955131,0.709123356955131,null,0.709123356955131,0,null,0.709123356955131,0.709123356955131,null,0.709123356955131,0,null,2.34341233891689,2.34341233891689,null,2.34341233891689,0,null,9.89145535249036,9.89145535249036,null,9.89145535249036,7.19121469660236,null,7.19121469660236,7.19121469660236,null,7.19121469660236,3.71935480757329,null,3.71935480757329,3.71935480757329,null,3.71935480757329,0,null,3.71935480757329,3.71935480757329,null,3.71935480757329,0,null,7.19121469660236,7.19121469660236,null,7.19121469660236,0],\"text\":[\"y: 9.8914554\",\"y: 9.8914554\",null,\"y: 9.8914554\",\"y: 9.8914554\",null,\"y: 7.0232673\",\"y: 7.0232673\",null,\"y: 7.0232673\",\"y: 7.0232673\",null,\"y: 7.0232673\",\"y: 7.0232673\",null,\"y: 7.0232673\",\"y: 7.0232673\",null,\"y: 2.3434123\",\"y: 2.3434123\",null,\"y: 2.3434123\",\"y: 2.3434123\",null,\"y: 1.6022790\",\"y: 1.6022790\",null,\"y: 1.6022790\",\"y: 1.6022790\",null,\"y: 1.6022790\",\"y: 1.6022790\",null,\"y: 1.6022790\",\"y: 1.6022790\",null,\"y: 0.7091234\",\"y: 0.7091234\",null,\"y: 0.7091234\",\"y: 0.7091234\",null,\"y: 0.7091234\",\"y: 0.7091234\",null,\"y: 0.7091234\",\"y: 0.7091234\",null,\"y: 2.3434123\",\"y: 2.3434123\",null,\"y: 2.3434123\",\"y: 2.3434123\",null,\"y: 9.8914554\",\"y: 9.8914554\",null,\"y: 9.8914554\",\"y: 9.8914554\",null,\"y: 7.1912147\",\"y: 7.1912147\",null,\"y: 7.1912147\",\"y: 7.1912147\",null,\"y: 3.7193548\",\"y: 3.7193548\",null,\"y: 3.7193548\",\"y: 3.7193548\",null,\"y: 3.7193548\",\"y: 3.7193548\",null,\"y: 3.7193548\",\"y: 3.7193548\",null,\"y: 7.1912147\",\"y: 7.1912147\",null,\"y: 7.1912147\",\"y: 7.1912147\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":0.377952755905512,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(black,solid)\",\"legendgroup\":\"(black,solid)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[4.84375,2.4375,1,3.875,2.75,2,3.5,3,4,5,7.25,6.5,6,7,8],\"y\":[9.89145535249036,7.02326729125818,0,2.34341233891689,1.60227896223096,0,0.709123356955131,0,0,0,7.19121469660236,3.71935480757329,0,0,0],\"text\":[\"y: 9.8914554\",\"y: 7.0232673\",\"y: 0.0000000\",\"y: 2.3434123\",\"y: 1.6022790\",\"y: 0.0000000\",\"y: 0.7091234\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 7.1912147\",\"y: 3.7193548\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"transparent\",\"opacity\":1,\"size\":null,\"symbol\":null,\"line\":{\"width\":1.88976377952756,\"color\":\"transparent\"}},\"hoveron\":\"points\",\"name\":\"(NA,1)\",\"legendgroup\":\"(NA,1)\",\"showlegend\":true,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null},{\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"color\":\"rgba(44,160,44,1)\",\"line\":{\"color\":\"rgba(44,160,44,1)\"}},\"error_y\":{\"color\":\"rgba(44,160,44,1)\"},\"error_x\":{\"color\":\"rgba(44,160,44,1)\"},\"line\":{\"color\":\"rgba(44,160,44,1)\"},\"xaxis\":\"x2\",\"yaxis\":\"y\",\"frame\":null},{\"x\":[1,2,3,4,5,6,7,8],\"y\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\"z\":[[0.749634669925426,0.813083939972069,0.780208826284214,0.761940985232505,0.706322352299289,0.315856909757174,0.298515436515704,0],[0.567736491265825,0.703658942675913,0.764112434635229,0.734471758937451,0.722823650780793,0.30936954164076,0.295644803161995,0.0765050730397283],[0.377570213576242,0.510673038353602,0.601910334172386,0.60933417248221,0.612264950954717,0.304434197975164,0.294831880442361,0.131659893138137],[0.327961619396351,0.553116673668475,0.572193918820415,0.592547423079677,0.604014301713965,0.325349962040122,0.305518427027552,0.169022835785446],[0.336229718426333,0.653920307541297,0.582099390604406,0.569656401167133,0.554510406269453,0.319037939755848,0.300615486874758,0.138776644118577],[0.303157322306406,0.464913494029755,0.416182738222567,0.444518814711891,0.437351187050776,0.308894397202937,0.299438442520288,0.282890851472483],[0.311425421336388,0.32431895204924,0.374084483140608,0.380423953356768,0.275638461932038,0.304484663360999,0.29343466951799,0.298903541178473],[0.327961619396351,0.313708043220522,0.348082619707633,0.352954727061715,0.348244175250655,0.323210315215255,0.297236776821279,0.4109923691204],[0.179135836856678,0.316360770427702,0.349320803680632,0.377371817101762,0.399398200543317,0.317922569194334,0.311606879479812,0.375408614218201],[0.170867737826696,0.335593042679753,0.357988091491623,0.380423953356768,0.389497421454415,0.318019223238392,0.313173449304107,0.386083740688861],[0.137795341706769,0.401911222859242,0.323318940247657,0.377371817101762,0.382896902061813,0.375404782024638,0.363845632161302,0.341604047061112],[0.228744431036569,0.342888042499497,0.283697053111695,0.307172683236626,0.320191967832099,0.395136747886271,0.4505065812523,0.386083740688861],[0.137795341706769,0.275243498716419,0.281220685165698,0.288859865706591,0.353194564795106,0.312005716541516,0.31181011015972,0.514185258336778],[0.261816827156497,0.259327135473342,0.298555260787681,0.2934380700891,0.407648849784069,0.314774469998281,0.326349571718177,0.519522821572108],[0.27835302521646,0.261979862680521,0.313413468463667,0.291912001961597,0.343293785706204,0.306084159488324,0.299218275950387,0.508847695101448],[0.327961619396351,0.263969408085906,0.261409741597717,0.256812435029029,0.341643655858054,0.319902694079231,0.347299267638748,0.512406070591668],[0.402374510666188,0.299118043581035,0.24778971789473,0.246129958136508,0.219534047094925,0.333356423804734,0.361686306187273,0.378966989708421],[0.452892595739377,0.253537558343672,0.306851093406773,0.28306080682208,0.304350721289855,0.308367932033756,0.310252008280421,0.515092644086784],[0.460251203876061,0.256011226464367,0.314651652436665,0.27817738881407,0.262437423146835,0.331983594240907,0.404440960473032,0.515964446081888],[0.468519302906043,0.254021681058983,0.239122430083739,0.22629107247897,0.212933527702323,0.323819748900131,0.369561495033729,0.523081197062328],[0.559468392235843,0.250042590248213,0.252742453786726,0.221712868096461,0.191481839676368,0.329666463220093,0.304773247867887,0.531977135787877],[0.59254078835577,0.254684862860777,0.221787854461756,0.21103039120394,0.138677684535556,0.308471428841995,0.311962533169652,0.498172568630788],[0.642149382535662,0.252695317455393,0.229216958299748,0.217134663713952,0.161779502409661,0.308746422427521,0.31312264163413,0.494614193140568],[0.41064260969617,0.272590771509239,0.302269812706677,0.287333797579088,0.313591448439497,0.444730964306849,0.735554545714014,0.457251250493259],[0.31969352036637,0.299118043581035,0.265124293516714,0.269020980049052,0.255836903754233,0.900138304195019,0.423705535339362,0.40387561813996],[0.311425421336388,0.457618494210012,0.356749907518625,0.385002157739276,0.384547031909964,0.88493539287573,1,0.272215725001824]],\"text\":[[\"Country: Angola&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 2.415637\",\"Country: Angola&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 2.820357\",\"Country: Angola&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 2.610659\",\"Country: Angola&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 2.494135\",\"Country: Angola&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 2.139364\",\"Country: Angola&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.351273\",\"Country: Angola&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.461888\",\"Country: Angola&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -2.366009\"],[\"Country: Burundi&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.255375\",\"Country: Burundi&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 2.122375\",\"Country: Burundi&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 2.507986\",\"Country: Burundi&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 2.318919\",\"Country: Burundi&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 2.244620\",\"Country: Burundi&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.392653\",\"Country: Burundi&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.480198\",\"Country: Burundi&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.878011\"],[\"Country: Togo&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.042374\",\"Country: Togo&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.891388\",\"Country: Togo&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 1.473358\",\"Country: Togo&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 1.520712\",\"Country: Togo&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 1.539406\",\"Country: Togo&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.424134\",\"Country: Togo&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.485384\",\"Country: Togo&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.526198\"],[\"Country: Kenya&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.274061\",\"Country: Kenya&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 1.162121\",\"Country: Kenya&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 1.283808\",\"Country: Kenya&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 1.413635\",\"Country: Kenya&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 1.486778\",\"Country: Kenya&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.290720\",\"Country: Kenya&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.417218\",\"Country: Kenya&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.287874\"],[\"Country: Afghanistan&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.221322\",\"Country: Afghanistan&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 1.805110\",\"Country: Afghanistan&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 1.346991\",\"Country: Afghanistan&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 1.267622\",\"Country: Afghanistan&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 1.171011\",\"Country: Afghanistan&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.330982\",\"Country: Afghanistan&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.448492\",\"Country: Afghanistan&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -1.480803\"],[\"Country: Bolivia&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.432279\",\"Country: Bolivia&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.599505\",\"Country: Bolivia&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 0.288669\",\"Country: Bolivia&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.469415\",\"Country: Bolivia&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.423695\",\"Country: Bolivia&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.395684\",\"Country: Bolivia&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.456000\",\"Country: Bolivia&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.561551\"],[\"Country: Fiji&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.379540\",\"Country: Fiji&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.297296\",\"Country: Fiji&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: 0.020140\",\"Country: Fiji&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.060577\",\"Country: Fiji&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.607812\",\"Country: Fiji&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.423812\",\"Country: Fiji&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.494296\",\"Country: Fiji&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.459412\"],[\"Country: Argentina&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.274061\",\"Country: Argentina&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.364980\",\"Country: Argentina&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.145717\",\"Country: Argentina&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.114639\",\"Country: Argentina&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.144686\",\"Country: Argentina&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.304368\",\"Country: Argentina&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.470044\",\"Country: Argentina&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.255562\"],[\"Country: Venezuela&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.223367\",\"Country: Venezuela&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.348059\",\"Country: Venezuela&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.137819\",\"Country: Venezuela&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.041108\",\"Country: Venezuela&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.181607\",\"Country: Venezuela&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.338097\",\"Country: Venezuela&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.378382\",\"Country: Venezuela&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.028586\"],[\"Country: Peru&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.276106\",\"Country: Peru&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.225383\",\"Country: Peru&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.082533\",\"Country: Peru&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.060577\",\"Country: Peru&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.118453\",\"Country: Peru&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.337480\",\"Country: Peru&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.368390\",\"Country: Peru&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.096679\"],[\"Country: Bangladesh&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.487063\",\"Country: Bangladesh&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.197636\",\"Country: Bangladesh&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.303675\",\"Country: Bangladesh&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.041108\",\"Country: Bangladesh&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.076351\",\"Country: Bangladesh&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 0.028561\",\"Country: Bangladesh&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.045170\",\"Country: Bangladesh&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.187041\"],[\"Country: Brazil&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.906932\",\"Country: Brazil&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.178851\",\"Country: Brazil&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.556409\",\"Country: Brazil&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.406666\",\"Country: Brazil&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.323621\",\"Country: Brazil&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 0.154424\",\"Country: Brazil&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 0.507608\",\"Country: Brazil&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.096679\"],[\"Country: Chile&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -1.487063\",\"Country: Chile&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.610331\",\"Country: Chile&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.572205\",\"Country: Chile&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.523477\",\"Country: Chile&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.113109\",\"Country: Chile&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.375838\",\"Country: Chile&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.377086\",\"Country: Chile&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.913791\"],[\"Country: Australia&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.695975\",\"Country: Australia&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.711856\",\"Country: Australia&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.461634\",\"Country: Australia&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.494274\",\"Country: Australia&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.234235\",\"Country: Australia&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.358177\",\"Country: Australia&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.284344\",\"Country: Australia&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.947838\"],[\"Country: New Zealand&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.590496\",\"Country: New Zealand&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.694935\",\"Country: New Zealand&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.366859\",\"Country: New Zealand&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.504009\",\"Country: New Zealand&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.176263\",\"Country: New Zealand&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.413610\",\"Country: New Zealand&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.457405\",\"Country: New Zealand&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.879745\"],[\"Country: Canada&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.274061\",\"Country: Canada&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.682244\",\"Country: Canada&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.698571\",\"Country: Canada&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.727896\",\"Country: Canada&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.186789\",\"Country: Canada&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.325466\",\"Country: Canada&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.150713\",\"Country: Canada&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.902443\"],[\"Country: Thailand&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.200591\",\"Country: Thailand&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.458044\",\"Country: Thailand&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.785449\",\"Country: Thailand&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.796036\",\"Country: Thailand&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.965681\",\"Country: Thailand&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.239650\",\"Country: Thailand&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.058944\",\"Country: Thailand&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.051283\"],[\"Country: Sweden&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.522828\",\"Country: Sweden&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.748785\",\"Country: Sweden&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.408718\",\"Country: Sweden&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.560467\",\"Country: Sweden&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.424667\",\"Country: Sweden&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.399042\",\"Country: Sweden&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.387024\",\"Country: Sweden&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.919579\"],[\"Country: France&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.569766\",\"Country: France&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.733007\",\"Country: France&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.358961\",\"Country: France&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.591617\",\"Country: France&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.692016\",\"Country: France&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.248407\",\"Country: France&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 0.213773\",\"Country: France&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.925140\"],[\"Country: Spain&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.622505\",\"Country: Spain&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.745697\",\"Country: Spain&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.840734\",\"Country: Spain&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.922581\",\"Country: Spain&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.007783\",\"Country: Spain&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.300481\",\"Country: Spain&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.008711\",\"Country: Spain&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.970535\"],[\"Country: Italy&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.202636\",\"Country: Italy&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.771078\",\"Country: Italy&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.753857\",\"Country: Italy&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.951783\",\"Country: Italy&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.144616\",\"Country: Italy&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.263187\",\"Country: Italy&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.421971\",\"Country: Italy&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 1.027279\"],[\"Country: Portugal&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.413593\",\"Country: Portugal&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.741467\",\"Country: Portugal&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.951305\",\"Country: Portugal&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -1.019923\",\"Country: Portugal&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.481434\",\"Country: Portugal&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.398382\",\"Country: Portugal&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.376114\",\"Country: Portugal&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.811652\"],[\"Country: Greece&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 1.730028\",\"Country: Greece&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.754158\",\"Country: Greece&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.903917\",\"Country: Greece&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.980986\",\"Country: Greece&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -1.334076\",\"Country: Greece&lt;br&gt;Feature:: Pop&lt;br&gt;Value: -0.396628\",\"Country: Greece&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: -0.368714\",\"Country: Greece&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.788955\"],[\"Country: United States of America&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: 0.253331\",\"Country: United States of America&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.627252\",\"Country: United States of America&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.437940\",\"Country: United States of America&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.533211\",\"Country: United States of America&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.365723\",\"Country: United States of America&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 0.470768\",\"Country: United States of America&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 2.325825\",\"Country: United States of America&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.550630\"],[\"Country: China&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.326800\",\"Country: China&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: -0.458044\",\"Country: China&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.674878\",\"Country: China&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: -0.650022\",\"Country: China&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: -0.734118\",\"Country: China&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 3.375645\",\"Country: China&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 0.336654\",\"Country: China&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: 0.210166\"],[\"Country: India&lt;br&gt;Feature:: Mortality rate&lt;br&gt;Value: -0.379540\",\"Country: India&lt;br&gt;Feature:: Infant mortality&lt;br&gt;Value: 0.552973\",\"Country: India&lt;br&gt;Feature:: Children per woman&lt;br&gt;Value: -0.090431\",\"Country: India&lt;br&gt;Feature:: Birth rate&lt;br&gt;Value: 0.089780\",\"Country: India&lt;br&gt;Feature:: Growth rate&lt;br&gt;Value: 0.086876\",\"Country: India&lt;br&gt;Feature:: Pop&lt;br&gt;Value: 3.278671\",\"Country: India&lt;br&gt;Feature:: Population aged 65 &lt;br&gt;Value: 4.012627\",\"Country: India&lt;br&gt;Feature:: Life expectancy&lt;br&gt;Value: -0.629644\"]],\"colorscale\":[[0,\"#440154\"],[0.0765050730397283,\"#481D6F\"],[0.131659893138137,\"#472F7D\"],[0.137795341706769,\"#46307E\"],[0.138677684535556,\"#46317E\"],[0.138776644118577,\"#46317E\"],[0.161779502409661,\"#453882\"],[0.169022835785446,\"#443A83\"],[0.170867737826696,\"#443B84\"],[0.179135836856678,\"#433E85\"],[0.191481839676368,\"#424186\"],[0.21103039120394,\"#3F4788\"],[0.212933527702323,\"#3F4788\"],[0.217134663713952,\"#3F4889\"],[0.219534047094925,\"#3E4989\"],[0.221712868096461,\"#3E4A89\"],[0.221787854461756,\"#3E4A89\"],[0.22629107247897,\"#3E4B8A\"],[0.228744431036569,\"#3E4C8A\"],[0.229216958299748,\"#3E4C8A\"],[0.239122430083739,\"#3C4F8A\"],[0.246129958136508,\"#3B518B\"],[0.24778971789473,\"#3B518B\"],[0.250042590248213,\"#3B528B\"],[0.252695317455393,\"#3B528B\"],[0.252742453786726,\"#3B528B\"],[0.253537558343672,\"#3A538B\"],[0.254021681058983,\"#3A538B\"],[0.254684862860777,\"#3A538B\"],[0.255836903754233,\"#3A538B\"],[0.256011226464367,\"#3A538B\"],[0.256812435029029,\"#3A538B\"],[0.259327135473342,\"#3A548C\"],[0.261409741597717,\"#39558C\"],[0.261816827156497,\"#39558C\"],[0.261979862680521,\"#39558C\"],[0.262437423146835,\"#39558C\"],[0.263969408085906,\"#39558C\"],[0.265124293516714,\"#39568C\"],[0.269020980049052,\"#38578C\"],[0.272215725001824,\"#38588C\"],[0.272590771509239,\"#38598C\"],[0.275243498716419,\"#38598C\"],[0.275638461932038,\"#38598C\"],[0.27817738881407,\"#375A8C\"],[0.27835302521646,\"#375A8C\"],[0.281220685165698,\"#375B8D\"],[0.282890851472483,\"#375B8D\"],[0.28306080682208,\"#375B8D\"],[0.283697053111695,\"#375B8D\"],[0.287333797579088,\"#365C8D\"],[0.288859865706591,\"#365D8D\"],[0.291912001961597,\"#365D8D\"],[0.29343466951799,\"#355E8D\"],[0.2934380700891,\"#355E8D\"],[0.294831880442361,\"#355E8D\"],[0.295644803161995,\"#355E8D\"],[0.297236776821279,\"#355F8D\"],[0.298515436515704,\"#355F8D\"],[0.298555260787681,\"#355F8D\"],[0.298903541178473,\"#355F8D\"],[0.299118043581035,\"#355F8D\"],[0.299218275950387,\"#355F8D\"],[0.299438442520288,\"#355F8D\"],[0.300615486874758,\"#34608D\"],[0.302269812706677,\"#34608D\"],[0.303157322306406,\"#34608D\"],[0.304350721289855,\"#34618D\"],[0.304434197975164,\"#34618D\"],[0.304484663360999,\"#34618D\"],[0.304773247867887,\"#34618D\"],[0.305518427027552,\"#34618D\"],[0.306084159488324,\"#34618D\"],[0.306851093406773,\"#34618D\"],[0.307172683236626,\"#34618D\"],[0.308367932033756,\"#33628D\"],[0.308471428841995,\"#33628D\"],[0.308746422427521,\"#33628D\"],[0.308894397202937,\"#33628D\"],[0.30936954164076,\"#33628D\"],[0.310252008280421,\"#33628D\"],[0.311425421336388,\"#33628D\"],[0.311606879479812,\"#33628D\"],[0.31181011015972,\"#33638D\"],[0.311962533169652,\"#33638D\"],[0.312005716541516,\"#33638D\"],[0.31312264163413,\"#33638D\"],[0.313173449304107,\"#33638D\"],[0.313413468463667,\"#33638D\"],[0.313591448439497,\"#33638D\"],[0.313708043220522,\"#33638D\"],[0.314651652436665,\"#33638D\"],[0.314774469998281,\"#33638D\"],[0.315856909757174,\"#32648E\"],[0.316360770427702,\"#32648E\"],[0.317922569194334,\"#32648E\"],[0.318019223238392,\"#32648E\"],[0.319037939755848,\"#32648E\"],[0.31969352036637,\"#32658E\"],[0.319902694079231,\"#32658E\"],[0.320191967832099,\"#32658E\"],[0.323210315215255,\"#32658E\"],[0.323318940247657,\"#32658E\"],[0.323819748900131,\"#31668E\"],[0.32431895204924,\"#31668E\"],[0.325349962040122,\"#31668E\"],[0.326349571718177,\"#31668E\"],[0.327961619396351,\"#31678E\"],[0.329666463220093,\"#31678E\"],[0.331983594240907,\"#31688E\"],[0.333356423804734,\"#31688E\"],[0.335593042679753,\"#30698E\"],[0.336229718426333,\"#30698E\"],[0.341604047061112,\"#306A8E\"],[0.341643655858054,\"#306A8E\"],[0.342888042499497,\"#306A8E\"],[0.343293785706204,\"#2F6B8E\"],[0.347299267638748,\"#2F6C8E\"],[0.348082619707633,\"#2F6C8E\"],[0.348244175250655,\"#2F6C8E\"],[0.349320803680632,\"#2F6C8E\"],[0.352954727061715,\"#2E6D8E\"],[0.353194564795106,\"#2E6D8E\"],[0.356749907518625,\"#2E6E8E\"],[0.357988091491623,\"#2E6E8E\"],[0.361686306187273,\"#2E6F8E\"],[0.363845632161302,\"#2D708E\"],[0.369561495033729,\"#2D718E\"],[0.374084483140608,\"#2C718E\"],[0.375404782024638,\"#2C728E\"],[0.375408614218201,\"#2C728E\"],[0.377371817101762,\"#2C728E\"],[0.377570213576242,\"#2C728E\"],[0.378966989708421,\"#2C738E\"],[0.380423953356768,\"#2C738E\"],[0.382896902061813,\"#2B748E\"],[0.384547031909964,\"#2B748E\"],[0.385002157739276,\"#2B748E\"],[0.386083740688861,\"#2B748E\"],[0.389497421454415,\"#2B758E\"],[0.395136747886271,\"#2A778E\"],[0.399398200543317,\"#2A788E\"],[0.401911222859242,\"#2A788E\"],[0.402374510666188,\"#29798E\"],[0.40387561813996,\"#29798E\"],[0.404440960473032,\"#29798E\"],[0.407648849784069,\"#297A8E\"],[0.41064260969617,\"#297B8E\"],[0.4109923691204,\"#297B8E\"],[0.416182738222567,\"#287C8E\"],[0.423705535339362,\"#277E8E\"],[0.437351187050776,\"#26828E\"],[0.444518814711891,\"#26828E\"],[0.444730964306849,\"#26828E\"],[0.4505065812523,\"#25848E\"],[0.452892595739377,\"#25848E\"],[0.457251250493259,\"#24868E\"],[0.457618494210012,\"#24868E\"],[0.460251203876061,\"#24868E\"],[0.464913494029755,\"#23888E\"],[0.468519302906043,\"#23888E\"],[0.494614193140568,\"#218F8D\"],[0.498172568630788,\"#21908D\"],[0.508847695101448,\"#20928C\"],[0.510673038353602,\"#20928C\"],[0.512406070591668,\"#20938C\"],[0.514185258336778,\"#20938C\"],[0.515092644086784,\"#20938C\"],[0.515964446081888,\"#1F948C\"],[0.519522821572108,\"#1F948C\"],[0.523081197062328,\"#1F958B\"],[0.531977135787877,\"#1F988B\"],[0.553116673668475,\"#1E9D89\"],[0.554510406269453,\"#1E9D89\"],[0.559468392235843,\"#1F9F88\"],[0.567736491265825,\"#1FA188\"],[0.569656401167133,\"#1FA188\"],[0.572193918820415,\"#1FA187\"],[0.582099390604406,\"#20A386\"],[0.59254078835577,\"#21A685\"],[0.592547423079677,\"#21A685\"],[0.601910334172386,\"#22A884\"],[0.604014301713965,\"#23A983\"],[0.60933417248221,\"#24AA83\"],[0.612264950954717,\"#25AB82\"],[0.642149382535662,\"#2DB27D\"],[0.653920307541297,\"#31B57B\"],[0.703658942675913,\"#45BF70\"],[0.706322352299289,\"#46C06F\"],[0.722823650780793,\"#4FC36B\"],[0.734471758937451,\"#55C568\"],[0.735554545714014,\"#55C667\"],[0.749634669925426,\"#5CC863\"],[0.761940985232505,\"#64CB5F\"],[0.764112434635229,\"#65CB5E\"],[0.780208826284214,\"#6ECE58\"],[0.813083939972069,\"#82D34C\"],[0.88493539287573,\"#B1DD2E\"],[0.900138304195019,\"#BCDF27\"],[1,\"#FDE725\"]],\"type\":\"heatmap\",\"showscale\":false,\"autocolorscale\":false,\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5,null,0.5,8.5],\"y\":[0.5,0.5,null,1.5,1.5,null,10.5,10.5,null,11.5,11.5,null,12.5,12.5,null,13.5,13.5,null,14.5,14.5,null,15.5,15.5,null,16.5,16.5,null,17.5,17.5,null,18.5,18.5,null,19.5,19.5,null,2.5,2.5,null,20.5,20.5,null,21.5,21.5,null,22.5,22.5,null,23.5,23.5,null,24.5,24.5,null,25.5,25.5,null,26.5,26.5,null,3.5,3.5,null,4.5,4.5,null,5.5,5.5,null,6.5,6.5,null,7.5,7.5,null,8.5,8.5,null,9.5,9.5],\"text\":\"\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(255,255,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null,\"marker\":{\"showscale\":false}},{\"x\":[0.5,0.5,null,1.5,1.5,null,2.5,2.5,null,3.5,3.5,null,4.5,4.5,null,5.5,5.5,null,6.5,6.5,null,7.5,7.5,null,8.5,8.5],\"y\":[0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5,null,0.5,26.5],\"text\":\"\",\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.88976377952756,\"color\":\"rgba(255,255,255,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null,\"marker\":{\"showscale\":false}},{\"x\":[1],\"y\":[1],\"name\":\"99_8cbac72f506d5a98cd793b2cd6548127\",\"type\":\"scatter\",\"mode\":\"markers\",\"opacity\":0,\"hoverinfo\":\"skip\",\"showlegend\":false,\"marker\":{\"color\":[0,1],\"colorscale\":[[0,\"#440154\"],[0.00334448160535119,\"#440256\"],[0.00668896321070237,\"#450357\"],[0.0100334448160535,\"#450558\"],[0.0133779264214047,\"#450659\"],[0.0167224080267559,\"#46075B\"],[0.0200668896321071,\"#46085C\"],[0.0234113712374582,\"#460A5D\"],[0.0267558528428094,\"#460B5E\"],[0.0301003344481605,\"#470C5F\"],[0.0334448160535117,\"#470E61\"],[0.0367892976588629,\"#470F62\"],[0.040133779264214,\"#471063\"],[0.0434782608695652,\"#471164\"],[0.0468227424749164,\"#471365\"],[0.0501672240802675,\"#481467\"],[0.0535117056856187,\"#481568\"],[0.0568561872909699,\"#481768\"],[0.0602006688963211,\"#481769\"],[0.0635451505016723,\"#48186A\"],[0.0668896321070234,\"#481A6C\"],[0.0702341137123746,\"#481B6D\"],[0.0735785953177257,\"#481C6E\"],[0.0769230769230769,\"#481D6F\"],[0.0802675585284281,\"#481E6F\"],[0.0836120401337793,\"#481F70\"],[0.0869565217391305,\"#482071\"],[0.0903010033444816,\"#482173\"],[0.0936454849498328,\"#482374\"],[0.096989966555184,\"#482475\"],[0.100334448160535,\"#482576\"],[0.103678929765886,\"#482576\"],[0.107023411371237,\"#482777\"],[0.110367892976589,\"#482878\"],[0.11371237458194,\"#482979\"],[0.117056856187291,\"#472A7A\"],[0.120401337792642,\"#472B7A\"],[0.123745819397993,\"#472D7B\"],[0.127090301003345,\"#472D7B\"],[0.130434782608696,\"#472E7C\"],[0.133779264214047,\"#472F7D\"],[0.137123745819398,\"#46307E\"],[0.140468227424749,\"#46327E\"],[0.1438127090301,\"#46337F\"],[0.147157190635451,\"#463480\"],[0.150501672240803,\"#463480\"],[0.153846153846154,\"#453581\"],[0.157190635451505,\"#453781\"],[0.160535117056856,\"#453882\"],[0.163879598662207,\"#443983\"],[0.167224080267559,\"#443A83\"],[0.17056856187291,\"#443A83\"],[0.173913043478261,\"#443C84\"],[0.177257525083612,\"#433D84\"],[0.180602006688963,\"#433E85\"],[0.183946488294314,\"#423F85\"],[0.187290969899666,\"#424086\"],[0.190635451505017,\"#424186\"],[0.193979933110368,\"#424186\"],[0.197324414715719,\"#414387\"],[0.20066889632107,\"#414487\"],[0.204013377926421,\"#404588\"],[0.207357859531773,\"#404688\"],[0.210702341137124,\"#3F4788\"],[0.214046822742475,\"#3F4889\"],[0.217391304347826,\"#3F4889\"],[0.220735785953177,\"#3E4989\"],[0.224080267558528,\"#3E4A89\"],[0.22742474916388,\"#3E4C8A\"],[0.230769230769231,\"#3D4D8A\"],[0.234113712374582,\"#3D4E8A\"],[0.237458193979933,\"#3C4F8A\"],[0.240802675585284,\"#3C4F8A\"],[0.244147157190635,\"#3C508B\"],[0.247491638795987,\"#3B518B\"],[0.250836120401338,\"#3B528B\"],[0.254180602006689,\"#3A538B\"],[0.25752508361204,\"#3A548C\"],[0.260869565217391,\"#39558C\"],[0.264214046822743,\"#39558C\"],[0.267558528428094,\"#39568C\"],[0.270903010033445,\"#38588C\"],[0.274247491638796,\"#38598C\"],[0.277591973244147,\"#375A8C\"],[0.280936454849498,\"#375B8D\"],[0.28428093645485,\"#375B8D\"],[0.287625418060201,\"#365C8D\"],[0.290969899665552,\"#365D8D\"],[0.294314381270903,\"#355E8D\"],[0.297658862876254,\"#355F8D\"],[0.301003344481605,\"#34608D\"],[0.304347826086957,\"#34618D\"],[0.307692307692308,\"#34618D\"],[0.311036789297659,\"#33628D\"],[0.31438127090301,\"#33638D\"],[0.317725752508361,\"#32648E\"],[0.321070234113712,\"#32658E\"],[0.324414715719064,\"#31668E\"],[0.327759197324415,\"#31678E\"],[0.331103678929766,\"#31678E\"],[0.334448160535117,\"#31688E\"],[0.337792642140468,\"#30698E\"],[0.341137123745819,\"#306A8E\"],[0.344481605351171,\"#2F6B8E\"],[0.347826086956522,\"#2F6C8E\"],[0.351170568561873,\"#2E6D8E\"],[0.354515050167224,\"#2E6D8E\"],[0.357859531772575,\"#2E6E8E\"],[0.361204013377926,\"#2E6F8E\"],[0.364548494983278,\"#2D708E\"],[0.367892976588629,\"#2D718E\"],[0.37123745819398,\"#2C718E\"],[0.374581939799331,\"#2C728E\"],[0.377926421404682,\"#2C728E\"],[0.381270903010033,\"#2C738E\"],[0.384615384615385,\"#2B748E\"],[0.387959866220736,\"#2B758E\"],[0.391304347826087,\"#2A768E\"],[0.394648829431438,\"#2A778E\"],[0.397993311036789,\"#2A778E\"],[0.40133779264214,\"#2A788E\"],[0.404682274247492,\"#29798E\"],[0.408026755852843,\"#297A8E\"],[0.411371237458194,\"#297B8E\"],[0.414715719063545,\"#287C8E\"],[0.418060200668896,\"#287D8E\"],[0.421404682274247,\"#287D8E\"],[0.424749163879599,\"#277E8E\"],[0.42809364548495,\"#277F8E\"],[0.431438127090301,\"#27808E\"],[0.434782608695652,\"#26818E\"],[0.438127090301003,\"#26828E\"],[0.441471571906355,\"#26828E\"],[0.444816053511706,\"#26828E\"],[0.448160535117057,\"#25838E\"],[0.451505016722408,\"#25848E\"],[0.454849498327759,\"#25858E\"],[0.45819397993311,\"#24868E\"],[0.461538461538462,\"#24878E\"],[0.464882943143813,\"#23888E\"],[0.468227424749164,\"#23888E\"],[0.471571906354515,\"#23898E\"],[0.474916387959866,\"#238A8D\"],[0.478260869565217,\"#228B8D\"],[0.481605351170569,\"#228C8D\"],[0.48494983277592,\"#228D8D\"],[0.488294314381271,\"#218E8D\"],[0.491638795986622,\"#218E8D\"],[0.494983277591973,\"#218F8D\"],[0.498327759197324,\"#21908D\"],[0.501672240802676,\"#21918C\"],[0.505016722408027,\"#20928C\"],[0.508361204013378,\"#20928C\"],[0.511705685618729,\"#20928C\"],[0.51505016722408,\"#20938C\"],[0.518394648829431,\"#1F948C\"],[0.521739130434783,\"#1F958B\"],[0.525083612040134,\"#1F968B\"],[0.528428093645485,\"#1F978B\"],[0.531772575250836,\"#1F988B\"],[0.535117056856187,\"#1F988B\"],[0.538461538461538,\"#1F998A\"],[0.54180602006689,\"#1F9A8A\"],[0.545150501672241,\"#1E9B8A\"],[0.548494983277592,\"#1E9C89\"],[0.551839464882943,\"#1E9D89\"],[0.555183946488294,\"#1F9E89\"],[0.558528428093646,\"#1F9E89\"],[0.561872909698997,\"#1F9F88\"],[0.565217391304348,\"#1FA088\"],[0.568561872909699,\"#1FA188\"],[0.57190635451505,\"#1FA187\"],[0.575250836120401,\"#1FA287\"],[0.578595317725753,\"#20A386\"],[0.581939799331104,\"#20A386\"],[0.585284280936455,\"#20A486\"],[0.588628762541806,\"#21A585\"],[0.591973244147157,\"#21A685\"],[0.595317725752508,\"#22A785\"],[0.59866220735786,\"#22A884\"],[0.602006688963211,\"#23A983\"],[0.605351170568562,\"#23A983\"],[0.608695652173913,\"#24AA83\"],[0.612040133779264,\"#25AB82\"],[0.615384615384615,\"#25AC82\"],[0.618729096989967,\"#26AD81\"],[0.622073578595318,\"#27AD81\"],[0.625418060200669,\"#27AD81\"],[0.62876254180602,\"#28AE80\"],[0.632107023411371,\"#29AF7F\"],[0.635451505016722,\"#2AB07F\"],[0.638795986622074,\"#2CB17E\"],[0.642140468227425,\"#2DB27D\"],[0.645484949832776,\"#2EB37C\"],[0.648829431438127,\"#2EB37C\"],[0.652173913043478,\"#30B47C\"],[0.655518394648829,\"#31B57B\"],[0.658862876254181,\"#32B67A\"],[0.662207357859532,\"#34B679\"],[0.665551839464883,\"#35B779\"],[0.668896321070234,\"#36B878\"],[0.672240802675585,\"#37B878\"],[0.675585284280937,\"#39B977\"],[0.678929765886288,\"#3ABA76\"],[0.682274247491639,\"#3BBB75\"],[0.68561872909699,\"#3DBC74\"],[0.688963210702341,\"#3EBC73\"],[0.692307692307692,\"#40BD72\"],[0.695652173913044,\"#41BD72\"],[0.698996655518395,\"#42BE71\"],[0.702341137123746,\"#44BF70\"],[0.705685618729097,\"#46C06F\"],[0.709030100334448,\"#48C16E\"],[0.712374581939799,\"#49C16D\"],[0.71571906354515,\"#4BC26C\"],[0.719063545150502,\"#4DC26C\"],[0.722408026755853,\"#4EC36B\"],[0.725752508361204,\"#50C46A\"],[0.729096989966555,\"#52C569\"],[0.732441471571906,\"#54C568\"],[0.735785953177257,\"#55C667\"],[0.739130434782609,\"#57C666\"],[0.74247491638796,\"#59C765\"],[0.745819397993311,\"#5AC864\"],[0.749163879598662,\"#5CC863\"],[0.752508361204013,\"#5EC962\"],[0.755852842809365,\"#5FCA61\"],[0.759197324414716,\"#62CB5F\"],[0.762541806020067,\"#64CB5F\"],[0.765886287625418,\"#66CB5D\"],[0.769230769230769,\"#67CC5C\"],[0.772575250836121,\"#69CD5B\"],[0.775919732441472,\"#6CCD5A\"],[0.779264214046823,\"#6DCE59\"],[0.782608695652174,\"#6FCF57\"],[0.785953177257525,\"#71CF57\"],[0.789297658862876,\"#74D055\"],[0.792642140468227,\"#75D054\"],[0.795986622073579,\"#77D153\"],[0.79933110367893,\"#79D151\"],[0.802675585284281,\"#7BD250\"],[0.806020066889632,\"#7ED34F\"],[0.809364548494983,\"#80D34E\"],[0.812709030100334,\"#82D34D\"],[0.816053511705686,\"#84D44B\"],[0.819397993311037,\"#86D549\"],[0.822742474916388,\"#88D548\"],[0.826086956521739,\"#8AD647\"],[0.82943143812709,\"#8DD645\"],[0.832775919732441,\"#8FD644\"],[0.836120401337793,\"#91D743\"],[0.839464882943144,\"#93D741\"],[0.842809364548495,\"#95D840\"],[0.846153846153846,\"#97D83E\"],[0.849498327759197,\"#9AD93D\"],[0.852842809364549,\"#9CD93C\"],[0.8561872909699,\"#9ED93A\"],[0.859531772575251,\"#A0DA39\"],[0.862876254180602,\"#A2DA37\"],[0.866220735785953,\"#A5DB36\"],[0.869565217391304,\"#A7DB35\"],[0.872909698996656,\"#A9DC33\"],[0.876254180602007,\"#ABDC31\"],[0.879598662207358,\"#AEDC30\"],[0.882943143812709,\"#B0DD2F\"],[0.88628762541806,\"#B2DD2D\"],[0.889632107023411,\"#B5DE2B\"],[0.892976588628763,\"#B7DE2A\"],[0.896321070234114,\"#B9DE28\"],[0.899665551839465,\"#BBDE27\"],[0.903010033444816,\"#BEDF26\"],[0.906354515050167,\"#C0DF25\"],[0.909698996655518,\"#C2DF23\"],[0.91304347826087,\"#C4E021\"],[0.916387959866221,\"#C7E020\"],[0.919732441471572,\"#C9E11F\"],[0.923076923076923,\"#CBE11E\"],[0.926421404682274,\"#CEE11D\"],[0.929765886287625,\"#D0E11C\"],[0.933110367892977,\"#D2E21B\"],[0.936454849498328,\"#D4E21A\"],[0.939799331103679,\"#D7E219\"],[0.94314381270903,\"#D9E319\"],[0.946488294314381,\"#DBE319\"],[0.949832775919733,\"#DDE318\"],[0.953177257525084,\"#DFE318\"],[0.956521739130435,\"#E2E418\"],[0.959866220735786,\"#E4E419\"],[0.963210702341137,\"#E6E419\"],[0.966555183946488,\"#E8E419\"],[0.969899665551839,\"#EBE51A\"],[0.973244147157191,\"#EDE51B\"],[0.976588628762542,\"#EFE51C\"],[0.979933110367893,\"#F1E51D\"],[0.983277591973244,\"#F3E61E\"],[0.986622073578595,\"#F5E61F\"],[0.989966555183946,\"#F7E620\"],[0.993311036789298,\"#F9E622\"],[0.996655518394649,\"#FBE723\"],[1,\"#FDE725\"]],\"colorbar\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"thickness\":23.04,\"title\":null,\"titlefont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"tickmode\":\"array\",\"ticktext\":[\"-2\",\"0\",\"2\",\"4\"],\"tickvals\":[0.0573804294317733,0.370927114009461,0.684473798587148,0.998020483164836],\"tickfont\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"ticklen\":2,\"len\":0.5},\"showscale\":false},\"xaxis\":\"x\",\"yaxis\":\"y2\",\"frame\":null},{\"x\":[8.26864683236489,8.26864683236489,null,8.26864683236489,3.80869352939085,null,3.80869352939085,3.80869352939085,null,3.80869352939085,1.45804605637737,null,1.45804605637737,1.45804605637737,null,1.45804605637737,0,null,1.45804605637737,1.45804605637737,null,1.45804605637737,0,null,3.80869352939085,3.80869352939085,null,3.80869352939085,1.064077433296,null,1.064077433296,1.064077433296,null,1.064077433296,0.550305448394801,null,0.550305448394801,0.550305448394801,null,0.550305448394801,0,null,0.550305448394801,0.550305448394801,null,0.550305448394801,0,null,1.064077433296,1.064077433296,null,1.064077433296,0,null,8.26864683236489,8.26864683236489,null,8.26864683236489,6.68600487811545,null,6.68600487811545,6.68600487811545,null,6.68600487811545,3.98596168562858,null,3.98596168562858,3.98596168562858,null,3.98596168562858,2.60281104326354,null,2.60281104326354,2.60281104326354,null,2.60281104326354,1.57617877538157,null,1.57617877538157,1.57617877538157,null,1.57617877538157,0,null,1.57617877538157,1.57617877538157,null,1.57617877538157,0.90246519504285,null,0.90246519504285,0.90246519504285,null,0.90246519504285,0,null,0.90246519504285,0.90246519504285,null,0.90246519504285,0,null,2.60281104326354,2.60281104326354,null,2.60281104326354,2.09417408470887,null,2.09417408470887,2.09417408470887,null,2.09417408470887,1.33862995656272,null,1.33862995656272,1.33862995656272,null,1.33862995656272,0.835385683553249,null,0.835385683553249,0.835385683553249,null,0.835385683553249,0.173180411525934,null,0.173180411525934,0.173180411525934,null,0.173180411525934,0,null,0.173180411525934,0.173180411525934,null,0.173180411525934,0,null,0.835385683553249,0.835385683553249,null,0.835385683553249,0,null,1.33862995656272,1.33862995656272,null,1.33862995656272,0,null,2.09417408470887,2.09417408470887,null,2.09417408470887,1.26239401995496,null,1.26239401995496,1.26239401995496,null,1.26239401995496,0,null,1.26239401995496,1.26239401995496,null,1.26239401995496,0.698465918146521,null,0.698465918146521,0.698465918146521,null,0.698465918146521,0.476084674387117,null,0.476084674387117,0.476084674387117,null,0.476084674387117,0,null,0.476084674387117,0.476084674387117,null,0.476084674387117,0,null,0.698465918146521,0.698465918146521,null,0.698465918146521,0,null,3.98596168562858,3.98596168562858,null,3.98596168562858,3.40907613824518,null,3.40907613824518,3.40907613824518,null,3.40907613824518,1.80985480786772,null,1.80985480786772,1.80985480786772,null,1.80985480786772,1.25118466867819,null,1.25118466867819,1.25118466867819,null,1.25118466867819,0,null,1.25118466867819,1.25118466867819,null,1.25118466867819,0.907285435661171,null,0.907285435661171,0.907285435661171,null,0.907285435661171,0.679008889084171,null,0.679008889084171,0.679008889084171,null,0.679008889084171,0,null,0.679008889084171,0.679008889084171,null,0.679008889084171,0,null,0.907285435661171,0.907285435661171,null,0.907285435661171,0,null,1.80985480786772,1.80985480786772,null,1.80985480786772,0.644310726388438,null,0.644310726388438,0.644310726388438,null,0.644310726388438,0,null,0.644310726388438,0.644310726388438,null,0.644310726388438,0.35544525466552,null,0.35544525466552,0.35544525466552,null,0.35544525466552,0,null,0.35544525466552,0.35544525466552,null,0.35544525466552,0,null,3.40907613824518,3.40907613824518,null,3.40907613824518,0,null,6.68600487811545,6.68600487811545,null,6.68600487811545,4.10064760121012,null,4.10064760121012,4.10064760121012,null,4.10064760121012,0,null,4.10064760121012,4.10064760121012,null,4.10064760121012,0],\"y\":[11.76953125,2.875,null,2.875,2.875,null,2.875,1.5,null,1.5,1.5,null,1.5,1,null,1,1,null,1.5,2,null,2,2,null,2.875,4.25,null,4.25,4.25,null,4.25,3.5,null,3.5,3.5,null,3.5,3,null,3,3,null,3.5,4,null,4,4,null,4.25,5,null,5,5,null,11.76953125,20.6640625,null,20.6640625,20.6640625,null,20.6640625,15.828125,null,15.828125,15.828125,null,15.828125,9.6875,null,9.6875,9.6875,null,9.6875,6.75,null,6.75,6.75,null,6.75,6,null,6,6,null,6.75,7.5,null,7.5,7.5,null,7.5,7,null,7,7,null,7.5,8,null,8,8,null,9.6875,12.625,null,12.625,12.625,null,12.625,11.125,null,11.125,11.125,null,11.125,10.25,null,10.25,10.25,null,10.25,9.5,null,9.5,9.5,null,9.5,9,null,9,9,null,9.5,10,null,10,10,null,10.25,11,null,11,11,null,11.125,12,null,12,12,null,12.625,14.125,null,14.125,14.125,null,14.125,13,null,13,13,null,14.125,15.25,null,15.25,15.25,null,15.25,14.5,null,14.5,14.5,null,14.5,14,null,14,14,null,14.5,15,null,15,15,null,15.25,16,null,16,16,null,15.828125,21.96875,null,21.96875,21.96875,null,21.96875,19.9375,null,19.9375,19.9375,null,19.9375,18.125,null,18.125,18.125,null,18.125,17,null,17,17,null,18.125,19.25,null,19.25,19.25,null,19.25,18.5,null,18.5,18.5,null,18.5,18,null,18,18,null,18.5,19,null,19,19,null,19.25,20,null,20,20,null,19.9375,21.75,null,21.75,21.75,null,21.75,21,null,21,21,null,21.75,22.5,null,22.5,22.5,null,22.5,22,null,22,22,null,22.5,23,null,23,23,null,21.96875,24,null,24,24,null,20.6640625,25.5,null,25.5,25.5,null,25.5,25,null,25,25,null,25.5,26,null,26,26],\"text\":[\"y: 8.2686468\",\"y: 8.2686468\",null,\"y: 8.2686468\",\"y: 8.2686468\",null,\"y: 3.8086935\",\"y: 3.8086935\",null,\"y: 3.8086935\",\"y: 3.8086935\",null,\"y: 1.4580461\",\"y: 1.4580461\",null,\"y: 1.4580461\",\"y: 1.4580461\",null,\"y: 1.4580461\",\"y: 1.4580461\",null,\"y: 1.4580461\",\"y: 1.4580461\",null,\"y: 3.8086935\",\"y: 3.8086935\",null,\"y: 3.8086935\",\"y: 3.8086935\",null,\"y: 1.0640774\",\"y: 1.0640774\",null,\"y: 1.0640774\",\"y: 1.0640774\",null,\"y: 0.5503054\",\"y: 0.5503054\",null,\"y: 0.5503054\",\"y: 0.5503054\",null,\"y: 0.5503054\",\"y: 0.5503054\",null,\"y: 0.5503054\",\"y: 0.5503054\",null,\"y: 1.0640774\",\"y: 1.0640774\",null,\"y: 1.0640774\",\"y: 1.0640774\",null,\"y: 8.2686468\",\"y: 8.2686468\",null,\"y: 8.2686468\",\"y: 8.2686468\",null,\"y: 6.6860049\",\"y: 6.6860049\",null,\"y: 6.6860049\",\"y: 6.6860049\",null,\"y: 3.9859617\",\"y: 3.9859617\",null,\"y: 3.9859617\",\"y: 3.9859617\",null,\"y: 2.6028110\",\"y: 2.6028110\",null,\"y: 2.6028110\",\"y: 2.6028110\",null,\"y: 1.5761788\",\"y: 1.5761788\",null,\"y: 1.5761788\",\"y: 1.5761788\",null,\"y: 1.5761788\",\"y: 1.5761788\",null,\"y: 1.5761788\",\"y: 1.5761788\",null,\"y: 0.9024652\",\"y: 0.9024652\",null,\"y: 0.9024652\",\"y: 0.9024652\",null,\"y: 0.9024652\",\"y: 0.9024652\",null,\"y: 0.9024652\",\"y: 0.9024652\",null,\"y: 2.6028110\",\"y: 2.6028110\",null,\"y: 2.6028110\",\"y: 2.6028110\",null,\"y: 2.0941741\",\"y: 2.0941741\",null,\"y: 2.0941741\",\"y: 2.0941741\",null,\"y: 1.3386300\",\"y: 1.3386300\",null,\"y: 1.3386300\",\"y: 1.3386300\",null,\"y: 0.8353857\",\"y: 0.8353857\",null,\"y: 0.8353857\",\"y: 0.8353857\",null,\"y: 0.1731804\",\"y: 0.1731804\",null,\"y: 0.1731804\",\"y: 0.1731804\",null,\"y: 0.1731804\",\"y: 0.1731804\",null,\"y: 0.1731804\",\"y: 0.1731804\",null,\"y: 0.8353857\",\"y: 0.8353857\",null,\"y: 0.8353857\",\"y: 0.8353857\",null,\"y: 1.3386300\",\"y: 1.3386300\",null,\"y: 1.3386300\",\"y: 1.3386300\",null,\"y: 2.0941741\",\"y: 2.0941741\",null,\"y: 2.0941741\",\"y: 2.0941741\",null,\"y: 1.2623940\",\"y: 1.2623940\",null,\"y: 1.2623940\",\"y: 1.2623940\",null,\"y: 1.2623940\",\"y: 1.2623940\",null,\"y: 1.2623940\",\"y: 1.2623940\",null,\"y: 0.6984659\",\"y: 0.6984659\",null,\"y: 0.6984659\",\"y: 0.6984659\",null,\"y: 0.4760847\",\"y: 0.4760847\",null,\"y: 0.4760847\",\"y: 0.4760847\",null,\"y: 0.4760847\",\"y: 0.4760847\",null,\"y: 0.4760847\",\"y: 0.4760847\",null,\"y: 0.6984659\",\"y: 0.6984659\",null,\"y: 0.6984659\",\"y: 0.6984659\",null,\"y: 3.9859617\",\"y: 3.9859617\",null,\"y: 3.9859617\",\"y: 3.9859617\",null,\"y: 3.4090761\",\"y: 3.4090761\",null,\"y: 3.4090761\",\"y: 3.4090761\",null,\"y: 1.8098548\",\"y: 1.8098548\",null,\"y: 1.8098548\",\"y: 1.8098548\",null,\"y: 1.2511847\",\"y: 1.2511847\",null,\"y: 1.2511847\",\"y: 1.2511847\",null,\"y: 1.2511847\",\"y: 1.2511847\",null,\"y: 1.2511847\",\"y: 1.2511847\",null,\"y: 0.9072854\",\"y: 0.9072854\",null,\"y: 0.9072854\",\"y: 0.9072854\",null,\"y: 0.6790089\",\"y: 0.6790089\",null,\"y: 0.6790089\",\"y: 0.6790089\",null,\"y: 0.6790089\",\"y: 0.6790089\",null,\"y: 0.6790089\",\"y: 0.6790089\",null,\"y: 0.9072854\",\"y: 0.9072854\",null,\"y: 0.9072854\",\"y: 0.9072854\",null,\"y: 1.8098548\",\"y: 1.8098548\",null,\"y: 1.8098548\",\"y: 1.8098548\",null,\"y: 0.6443107\",\"y: 0.6443107\",null,\"y: 0.6443107\",\"y: 0.6443107\",null,\"y: 0.6443107\",\"y: 0.6443107\",null,\"y: 0.6443107\",\"y: 0.6443107\",null,\"y: 0.3554453\",\"y: 0.3554453\",null,\"y: 0.3554453\",\"y: 0.3554453\",null,\"y: 0.3554453\",\"y: 0.3554453\",null,\"y: 0.3554453\",\"y: 0.3554453\",null,\"y: 3.4090761\",\"y: 3.4090761\",null,\"y: 3.4090761\",\"y: 3.4090761\",null,\"y: 6.6860049\",\"y: 6.6860049\",null,\"y: 6.6860049\",\"y: 6.6860049\",null,\"y: 4.1006476\",\"y: 4.1006476\",null,\"y: 4.1006476\",\"y: 4.1006476\",null,\"y: 4.1006476\",\"y: 4.1006476\",null,\"y: 4.1006476\",\"y: 4.1006476\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":0.377952755905512,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"name\":\"(black,solid)\",\"legendgroup\":\"(black,solid)\",\"showlegend\":true,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null},{\"x\":[8.26864683236489,3.80869352939085,1.45804605637737,0,0,1.064077433296,0.550305448394801,0,0,0,6.68600487811545,3.98596168562858,2.60281104326354,1.57617877538157,0,0.90246519504285,0,0,2.09417408470887,1.33862995656272,0.835385683553249,0.173180411525934,0,0,0,0,1.26239401995496,0,0.698465918146521,0.476084674387117,0,0,0,3.40907613824518,1.80985480786772,1.25118466867819,0,0.907285435661171,0.679008889084171,0,0,0,0.644310726388438,0,0.35544525466552,0,0,0,4.10064760121012,0,0],\"y\":[11.76953125,2.875,1.5,1,2,4.25,3.5,3,4,5,20.6640625,15.828125,9.6875,6.75,6,7.5,7,8,12.625,11.125,10.25,9.5,9,10,11,12,14.125,13,15.25,14.5,14,15,16,21.96875,19.9375,18.125,17,19.25,18.5,18,19,20,21.75,21,22.5,22,23,24,25.5,25,26],\"text\":[\"y: 8.2686468\",\"y: 3.8086935\",\"y: 1.4580461\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 1.0640774\",\"y: 0.5503054\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 6.6860049\",\"y: 3.9859617\",\"y: 2.6028110\",\"y: 1.5761788\",\"y: 0.0000000\",\"y: 0.9024652\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 2.0941741\",\"y: 1.3386300\",\"y: 0.8353857\",\"y: 0.1731804\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 1.2623940\",\"y: 0.0000000\",\"y: 0.6984659\",\"y: 0.4760847\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 3.4090761\",\"y: 1.8098548\",\"y: 1.2511847\",\"y: 0.0000000\",\"y: 0.9072854\",\"y: 0.6790089\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.6443107\",\"y: 0.0000000\",\"y: 0.3554453\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 0.0000000\",\"y: 4.1006476\",\"y: 0.0000000\",\"y: 0.0000000\"],\"type\":\"scatter\",\"mode\":\"markers\",\"marker\":{\"autocolorscale\":false,\"color\":\"transparent\",\"opacity\":1,\"size\":null,\"symbol\":null,\"line\":{\"width\":1.88976377952756,\"color\":\"transparent\"}},\"hoveron\":\"points\",\"name\":\"(NA,1)\",\"legendgroup\":\"(NA,1)\",\"showlegend\":true,\"xaxis\":\"x2\",\"yaxis\":\"y2\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"xaxis\":{\"domain\":[0,0.8],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.5,8.5],\"tickmode\":\"array\",\"ticktext\":[\"Mortality rate\",\"Infant mortality\",\"Children per woman\",\"Birth rate\",\"Growth rate\",\"Pop\",\"Population aged 65 \",\"Life expectancy\"],\"tickvals\":[1,2,3,4,5,6,7,8],\"categoryorder\":\"array\",\"categoryarray\":[\"Mortality rate\",\"Infant mortality\",\"Children per woman\",\"Birth rate\",\"Growth rate\",\"Pop\",\"Population aged 65 \",\"Life expectancy\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":6.6417600664176},\"tickangle\":-45,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"y2\",\"hoverformat\":\".2f\"},\"xaxis2\":{\"domain\":[0.8,1],\"automargin\":true,\"showticklabels\":false,\"showgrid\":false,\"zeroline\":false,\"anchor\":\"y2\",\"type\":\"linear\",\"autorange\":false,\"range\":[0,8.26864683236489],\"tickmode\":\"array\",\"ticktext\":[\"0\",\"2\",\"4\",\"6\",\"8\"],\"tickvals\":[0,2,4,6,8],\"categoryorder\":\"array\",\"categoryarray\":[\"0\",\"2\",\"4\",\"6\",\"8\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.65296803652968,\"tickwidth\":0,\"tickfont\":{\"color\":null,\"family\":null,\"size\":0},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"gridcolor\":null,\"gridwidth\":0,\"hoverformat\":\".2f\"},\"yaxis2\":{\"domain\":[0,0.8],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[0.5,26.5],\"tickmode\":\"array\",\"ticktext\":[\"Angola\",\"Burundi\",\"Togo\",\"Kenya\",\"Afghanistan\",\"Bolivia\",\"Fiji\",\"Argentina\",\"Venezuela\",\"Peru\",\"Bangladesh\",\"Brazil\",\"Chile\",\"Australia\",\"New Zealand\",\"Canada\",\"Thailand\",\"Sweden\",\"France\",\"Spain\",\"Italy\",\"Portugal\",\"Greece\",\"United States of America\",\"China\",\"India\"],\"tickvals\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\"categoryorder\":\"array\",\"categoryarray\":[\"Angola\",\"Burundi\",\"Togo\",\"Kenya\",\"Afghanistan\",\"Bolivia\",\"Fiji\",\"Argentina\",\"Venezuela\",\"Peru\",\"Bangladesh\",\"Brazil\",\"Chile\",\"Australia\",\"New Zealand\",\"Canada\",\"Thailand\",\"Sweden\",\"France\",\"Spain\",\"Italy\",\"Portugal\",\"Greece\",\"United States of America\",\"China\",\"India\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(51,51,51,1)\",\"ticklen\":3.65296803652968,\"tickwidth\":0.66417600664176,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":6.6417600664176},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":false,\"gridcolor\":null,\"gridwidth\":0,\"zeroline\":false,\"anchor\":\"x\",\"title\":\"\",\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0.8,1],\"automargin\":true,\"showticklabels\":false,\"showgrid\":false,\"zeroline\":false,\"anchor\":\"x\",\"type\":\"linear\",\"autorange\":false,\"range\":[0,9.89145535249036],\"tickmode\":\"array\",\"ticktext\":[\"0.0\",\"2.5\",\"5.0\",\"7.5\"],\"tickvals\":[0,2.5,5,7.5],\"categoryorder\":\"array\",\"categoryarray\":[\"0.0\",\"2.5\",\"5.0\",\"7.5\"],\"nticks\":null,\"ticks\":\"\",\"tickcolor\":null,\"ticklen\":3.65296803652968,\"tickwidth\":0,\"tickfont\":{\"color\":null,\"family\":null,\"size\":0},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"gridcolor\":null,\"gridwidth\":0,\"title\":{\"text\":\"\",\"font\":{\"color\":null,\"family\":null,\"size\":0}},\"hoverformat\":\".2f\"},\"annotations\":[],\"shapes\":[{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.8,\"y0\":0.8,\"y1\":1},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":0.8,\"y0\":0,\"y1\":0.8},{\"type\":\"rect\",\"fillcolor\":null,\"line\":{\"color\":null,\"width\":0,\"linetype\":[]},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0.8,\"x1\":1,\"y0\":0,\"y1\":0.8}],\"images\":[],\"margin\":{\"t\":40,\"r\":20,\"b\":60,\"l\":100},\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.6118721461187},\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.88976377952756,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.689497716895},\"y\":1,\"yanchor\":\"top\"},\"hovermode\":\"closest\",\"barmode\":\"relative\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"title\":\"\"},\"attrs\":{\"1e945ed06642\":{\"xend\":{},\"yend\":{},\"colour\":{},\"linetype\":{},\"size\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"1e943dc0383\":{\"colour\":{},\"shape\":{},\"size\":{},\"x\":{},\"y\":{}},\"1e9450655648\":{\"alpha_stroke\":1,\"sizes\":[10,100],\"spans\":[1,20]},\"1e9423a943e7\":{\"fill\":{},\"text\":{},\"x\":{},\"y\":{},\"type\":\"heatmap\"},\"1e9446bc2944\":{\"yintercept\":{}},\"1e9424494cab\":{\"xintercept\":{}},\"1e94458e8f2\":{\"xend\":{},\"yend\":{},\"colour\":{},\"linetype\":{},\"size\":{},\"x\":{},\"y\":{},\"type\":\"scatter\"},\"1e94686f5445\":{\"colour\":{},\"shape\":{},\"size\":{},\"x\":{},\"y\":{}}},\"source\":\"A\",\"config\":{\"doubleClick\":\"reset\",\"showSendToCloud\":false,\"displaylogo\":false,\"modeBarButtonsToRemove\":[\"sendDataToCloud\",\"select2d\",\"lasso2d\",\"autoScale2d\",\"hoverClosestCartesian\",\"hoverCompareCartesian\",\"sendDataToCloud\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.2,\"selected\":{\"opacity\":1},\"debounce\":0},\"subplot\":true,\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}&lt;/script&gt; r # save the widget # library(htmlwidgets) # saveWidget(p, file= \"~/Desktop/R-graph-gallery/HtmlWidget/heatmapInter.html\") ### Heatmap for Time Series Heatmaps can be a very good alternative to visualize time series, especially when the time frame you study is repeating, like weeks. Here is a customized example, but visit the time series section for more. A submission by John MacKintosh who visualized meteorological data using a heatmap built with ggplot2. Initial code is stored on github and displayed below: ### The Hourly Heatmap A heatmap used to display time series with R and ggplot2. A submission by John MacKintosh with reproducible code. A submission by John MacKintosh who visualized meteorological data using a heatmap built with ggplot2. Initial code is stored on github and displayed below: ```r library(ggplot2) library(dplyr) # easier data wrangling library(viridis) # colour blind friendly palette, works in B&amp;W also library(Interpol.T) # will generate a large dataset on initial load library(lubridate) # for easy date manipulation library(ggExtra) # because remembering ggplot theme options is beyond me library(tidyr) data &lt;- data(Trentino_hourly_T,package = “Interpol.T”) names(h_d_t)[1:5]&lt;- c(“stationid,”“date,”“hour,”“temp,”“flag”) df &lt;- tbl_df(h_d_t) %&gt;% filter(stationid ==“T0001”) df &lt;- df %&gt;% mutate(year = year(date), month = month(date, label=TRUE), day = day(date)) df\\(date&lt;-ymd(df\\)date) # not necessary for plot but #useful if you want to do further work with the data #cleanup rm(list=c(“h_d_t,”“mo_bias,”“Tn,”“Tx,” “Th_int_list,”“calibration_l,” “calibration_shape,”“Tm_list”)) #create plotting df df &lt;-df %&gt;% dplyr::select(stationid,day,hour,month,year,temp)%&gt;% fill(temp) #optional - see note below # Re: use of fill # This code is for demonstrating a visualisation technique # There are 5 missing hourly values in the dataframe. # see the original plot here (from my ggplot demo earlier this year) to see the white spaces where the missing values occcur: # https://github.com/johnmackintosh/ggplotdemo/blob/master/temp8.png # I used ‘fill’ from tidyr to take the prior value for each missing value and replace the NA # This is a quick fix for the blog section only - do not do this with your real world data # Should really use either use replace_NA or complete(with fill)in tidyr # OR # Look into more specialist way of replacing these missing values -e.g. imputation. statno &lt;-unique(df$stationid) ######## Plotting starts here##################### p &lt;-ggplot(df,aes(day,hour,fill=temp))+ geom_tile(color= “white,”size=0.1) + scale_fill_viridis(name=“Hrly Temps C,”option =“C”) p &lt;-p + facet_grid(year~month) p &lt;-p + scale_y_continuous(trans = “reverse,” breaks = unique(df$hour)) p &lt;-p + scale_x_continuous(breaks =c(1,10,20,31)) p &lt;-p + theme_minimal(base_size = 8) p &lt;-p + labs(title= paste(“Hourly Temps - Station,”statno), x=“Day,” y=“Hour Commencing”) p &lt;-p + theme(legend.position = “bottom”)+ theme(plot.title=element_text(size = 14))+ theme(axis.text.y=element_text(size=6)) + theme(strip.background = element_rect(colour=“white”))+ theme(plot.title=element_text(hjust=0))+ theme(axis.ticks=element_blank())+ theme(axis.text=element_text(size=7))+ theme(legend.title=element_text(size=8))+ theme(legend.text=element_text(size=6))+ removeGrid()#ggExtra # you will want to expand your plot screen before this bit! p #awesomeness ``&lt;center&gt; ![](https://www.r-graph-gallery.com/283-the-hourly-heatmap_files/figure-html/thecode-1.png) &lt;/center&gt; ### Using thelevelplot()Function ofLatticeThis document explains how to use thelevelplot()function of the lattice R package to build [heatmaps](https://www.r-graph-gallery.com/heatmap.html). #### Basis use oflevelplot()Thelatticepackage allows to build [heatmaps](https://www.r-graph-gallery.com/heatmap.html) thanks to thelevelplot()` function. Input data: here input is a data frame with 3 columns prividing the X and Y coordinate of the cell and its value. (Long format). ```r # Load the lattice package library(“lattice”) # Dummy data x &lt;- seq(1,10, length.out=20) y &lt;- seq(1,10, length.out=20) data &lt;- expand.grid(X=x, Y=y) data$Z &lt;- runif(400, 0, 5) ## Try it out levelplot(Z ~ X*Y, data=data ,xlab=“X,” main=\"\") ``` ### From Wide Input Matrix Previous example of this document was based on a data frame at the long format. Here, a square matrix is used instead. It is the second format understood by the levelplot() function. Note: here row and column order isn’t respected in the heatmap. ```r # Load the library library(“lattice”) # Dummy data data &lt;- matrix(runif(100, 0, 5) , 10 , 10) colnames(data) &lt;- letters[c(1:10)] rownames(data) &lt;- paste( rep(“row,”10) , c(1:10) , sep=\" \") # plot it flipping the axis levelplot(data) ``` ### Flip and Reorder Axis The t() function of R allows to transpose the input matrix, and thus to flip X and Y coordinates. Moreover, you can reverse matrix order as shown below to reverse order in the heatmap as well. Now the heatmap is organized exactly as the input matrix. ```r # Load the library library(“lattice”) # Dummy data data &lt;- matrix(runif(100, 0, 5) , 10 , 10) colnames(data) &lt;- letters[c(1:10)] rownames(data) &lt;- paste( rep(“row,”10) , c(1:10) , sep=\" \") # plot it flipping the axis levelplot( t(data[c(nrow(data):1) , ]), col.regions=heat.colors(100)) ``` ### Custom Colors There are several ways to custom the color palette: * Native palettes of R: terrain.color(), rainbow(), heat.colors(), topo.colors() or cm.colors() * Palettes of RColorBrewer. See list of available palettes here. * Palettes of Viridis: viridis, magma, inferno, plasma. r # Lattice package require(lattice) # The volcano dataset is provided, it looks like that: #head(volcano) # 1: native palette from R levelplot(volcano, col.regions = terrain.colors(100)) # try cm.colors() or terrain.colors() r # 2: Rcolorbrewer palette library(RColorBrewer) coul &lt;- colorRampPalette(brewer.pal(8, \"PiYG\"))(25) levelplot(volcano, col.regions = coul) # try cm.colors() or terrain.colors() r # 3: Viridis library(viridisLite) coul &lt;- viridis(100) levelplot(volcano, col.regions = coul) r #levelplot(volcano, col.regions = magma(100)) ### Heatmap with Smoothing - LatticeExtra The latticeExtra package allows to build a heatmap with smoothing. Here is how with reproducible code. The levelplot function of lattice allows to deal with 3 numeric variables as shown in the heatmap section of the gallery. Here, the idea is to plot data points as circles using panel.levelplot.points to get a scatterplot. Then, a layer is added using panel.2dsmoother to show the general distribution of the third numeric variable. ```r # library library(latticeExtra) # create data set.seed(1) data &lt;- data.frame(x = rnorm(100), y = rnorm(100)) data$z &lt;- with(data, x * y + rnorm(100, sd = 1)) # showing data points on the same color scale levelplot(z ~ x * y, data, panel = panel.levelplot.points, cex = 1.2 ) + layer_(panel.2dsmoother(…, n = 200)) ``` ## Correlogram A correlogram or correlation matrix allows to analyse the relationship between each pair of numeric variables in a dataset. It gives a quick overview of the whole dataset. It is more used for exploratory purpose than explanatory. 3.4.35.3 Using the ggally Package The GGally package offers great options to build correlograms. The ggpairs() function build a classic correlogram with scatterplot, correlation coefficient and variable distribution. On top of that, it is possible to inject ggplot2 code, for instance to color categories. 3.4.35.4 Correlation Matrix with Ggally This section explains how to build a correlogram with the ggally R package. It provides several reproducible examples with explanation and R code. 3.4.35.5 Scatterplot Matrix with Ggpairs() The ggpairs() function of the GGally package allows to build a great scatterplot matrix. Scatterplots of each pair of numeric variable are drawn on the left part of the figure. Pearson correlation is displayed on the right. Variable distribution is available on the diagonal. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # Create data data &lt;- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1)) data$v4 = data$var1 ** 2 data$v5 = -(data$var1 ** 2) # Check correlations (as scatterplots), distribution and print corrleation coefficient ggpairs(data, title=&quot;correlogram with ggpairs()&quot;) 3.4.36 Visualize Correlation with ggcorr() The ggcorr() function allows to visualize the correlation of each pair of variable as a square. Note that the method argument allows to pick the correlation type you desire. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # Create data data &lt;- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1)) data$v4 = data$var1 ** 2 data$v5 = -(data$var1 ** 2) # Check correlation between variables #cor(data) # Nice visualization of correlations ggcorr(data, method = c(&quot;everything&quot;, &quot;pearson&quot;)) 3.4.37 Change Plot Types Change the type of plot used on each part of the correlogram. This is done with the upper and lower argument. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # From the help page: data(tips, package = &quot;reshape&quot;) ggpairs( tips[, c(1, 3, 4, 2)], upper = list(continuous = &quot;density&quot;, combo = &quot;box_no_facet&quot;), lower = list(continuous = &quot;points&quot;, combo = &quot;dot_no_facet&quot;) ) 3.4.38 Split by Group It is possible to use ggplot2 aesthetics on the chart, for instance to color each category. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # From the help page: data(flea) ggpairs(flea, columns = 2:4, ggplot2::aes(colour=species)) 3.4.39 Using the corrgram Package The corrgram is another great alternative to build correlograms. You can choose what to display in the upper, lower and diagonal part of the figure: scatterplot, pie chart, text, ellipse and more. 3.4.39.1 Correlogram with the corrgram Library This section explains how to build a correlogram with the corrgram R package. It provides several reproducible examples with explanation and R code. 3.4.39.2 Scatterplot Matrix with ggpairs() The corrgram package allows to build correlogram. The output allows to check the relationship between each pair of a set of numeric variable. Relationship can be visualized with different methods: panel.ellipse to display ellipses panel.shade for colored squares panel.pie for pie charts panel.pts for scatterplots # Corrgram library library(corrgram) # mtcars dataset is natively available in R # head(mtcars) # First corrgram(mtcars, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt, main=&quot;Car Milage Data in PC2/PC1 Order&quot;) # Second corrgram(mtcars, order=TRUE, lower.panel=panel.ellipse, upper.panel=panel.pts, text.panel=panel.txt, diag.panel=panel.minmax, main=&quot;Car Milage Data in PC2/PC1 Order&quot;) # Third corrgram(mtcars, order=NULL, lower.panel=panel.shade, upper.panel=NULL, text.panel=panel.txt, main=&quot;Car Milage Data (unsorted)&quot;) 3.4.40 Visualize Correlation with ggcorr() The gcorr() function allows to visualize the correlation of each pair of variable as a square. Note that the method argument allows to pick the correlation type you desire. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # Create data data &lt;- data.frame( var1 = 1:100 + rnorm(100,sd=20), v2 = 1:100 + rnorm(100,sd=27), v3 = rep(1, 100) + rnorm(100, sd = 1)) data$v4 = data$var1 ** 2 data$v5 = -(data$var1 ** 2) # Check correlation between variables #cor(data) # Nice visualization of correlations ggcorr(data, method = c(&quot;everything&quot;, &quot;pearson&quot;)) 3.4.41 Split by Group It is possible to use ggplot2 aesthetics on the chart, for instance to color each category. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # From the help page: data(flea) ggpairs(flea, columns = 2:4, ggplot2::aes(colour=species)) 3.4.42 Change plot types Change the type of plot used on each part of the correlogram. This is done with the upper and lower argument. # Quick display of two cabapilities of GGally, to assess the distribution and correlation of variables library(GGally) # From the help page: data(tips, package = &quot;reshape&quot;) ggpairs( tips[, c(1, 3, 4, 2)], upper = list(continuous = &quot;density&quot;, combo = &quot;box_no_facet&quot;), lower = list(continuous = &quot;points&quot;, combo = &quot;dot_no_facet&quot;) ) 3.4.43 Other Methods Lesser known ways to build correlogram with R, like the ellipse package, the plot() function and the car package. 3.4.43.1 Correlogram with the Ellipse Package This section explains how to build a correlogram based on ellipses with the ellipse R package. It provides several reproducible examples with explanation and R code. 3.4.43.2 Scatterplot Matrix with ggpairs() The ellipse package allows to build a correlogram thanks to the plotcorr() function. First of all, you have to compute the correlation matrix of your dataset using the cor() function of R. Each correlation will be represented as an ellipse by the plotcorr() function. Color, shape and orientation depend on the correlation value. # Libraries library(ellipse) library(RColorBrewer) # Use of the mtcars data proposed by R data &lt;- cor(mtcars) # Build a Pannel of 100 colors with Rcolor Brewer my_colors &lt;- brewer.pal(5, &quot;Spectral&quot;) my_colors &lt;- colorRampPalette(my_colors)(100) # Order the correlation matrix ord &lt;- order(data[1, ]) data_ord &lt;- data[ord, ord] plotcorr(data_ord , col=my_colors[data_ord*50+50] , mar=c(1,1,1,1) ) 3.4.44 Basic Scatterplot Matrix This section explains how to build a scatterplot matrix with base R, without any packages. It provides several reproducible examples with explanation and R code 3.4.44.1 Scatterplot Matrix with the Native plot() Function For a set of data variables (dimensions) \\(X_1, X_2, ... , X_k\\), the scatter plot matrix shows all the pairwise scatterplots of the variables on a single view with multiple scatterplots in a matrix format. The native plot() function does the job pretty well as long as you just need to display scatterplots. For more option, check the correlogram section. # Data: numeric variables of the native mtcars dataset data &lt;- mtcars[ , c(1,3:6)] # Plot plot(data , pch=20 , cex=1.5 , col=&quot;#69b3a2&quot;) 3.4.45 Correlogram with the car Package This section explains how to build a scatterplot matrix with the car package. It provides several reproducible examples with explanation and R code. 3.4.45.1 Scatterplot Matrix with the Native plot() Function This is a scatterplot matrix built with the scatterplotMatrix() function of the car package. See more correlogram examples in the dedicated section. Note the |cyl syntax: it means that categories available in the cyl variable must be represented distinctly (color, shape, size..). # Packages library(car) library(RColorBrewer) # for the color palette # Let&#39;s use the car dataset natively available in R data &lt;- mtcars # Make the plot my_colors &lt;- brewer.pal(nlevels(as.factor(data$cyl)), &quot;Set2&quot;) scatterplotMatrix(~mpg+disp+drat|cyl, data=data , reg.line=&quot;&quot; , smoother=&quot;&quot;, col=my_colors , smoother.args=list(col=&quot;grey&quot;) , cex=1.5 , pch=c(15,16,17) , main=&quot;Scatter plot with Three Cylinder Options&quot; ) "],
["ranking.html", "Chapter 4 Ranking 4.1 Barplot 4.2 Circular Barplot 4.3 Lollipop Plot 4.4 Parallel Coordinates Chart 4.5 Radar Chart 4.6 Wordcloud", " Chapter 4 Ranking Figure 4.1: Wordcloud 4.1 Barplot Welcome to the barplot section of the R graph gallery. A barplot is used to display the relationship between a numeric and a categorical variable. This section also include stacked barplot and grouped barplot where two levels of grouping are shown. 4.1.0.1 Step by Step - ggplot2 and geom_bar() ggplot2 allows to build barplot thanks to the geom_bar() function. The examples below will guide you through the basics of this tool: 4.1.1 Basic Barplot with Ggplot2 This section explains how to draw barplots with R and ggplot2, using the geom_bar() function. It starts with the most basic example and describes a few possible customizations. 4.1.1.1 Most basic barplot with geom_bar() This is the most basic barplot you can build using the ggplot2 package. It follows those steps: Always start by calling the ggplot() function. Then specify the data object. It has to be a data frame. And it needs one numeric and one categorical variable. Then come thes aesthetics, set in the aes() function: set the categorical variable for the X axis, use the numeric for the Y axis Finally call geom_bar(). You have to specify stat=\"identity\" for this kind of dataset. # Load ggplot2 library(ggplot2) # Create data data &lt;- data.frame( name=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) , value=c(3,12,5,18,45) ) # Barplot ggplot(data, aes(x=name, y=value)) + geom_bar(stat = &quot;identity&quot;) 4.1.2 Control Bar Color Here are a few different methods to control bar colors. Note that using a legend in this case is not necessary since names are already displayed on the X axis. You can remove it with theme(legend.position=\"none\"). # Libraries library(ggplot2) # 1: uniform color. Color is for the border, fill is for the inside ggplot(mtcars, aes(x=as.factor(cyl) )) + geom_bar(color=&quot;blue&quot;, fill=rgb(0.1,0.4,0.5,0.7) ) # 2: Using Hue ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + geom_bar( ) + scale_fill_hue(c = 40) + theme(legend.position=&quot;none&quot;) # 3: Using RColorBrewer ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + geom_bar( ) + scale_fill_brewer(palette = &quot;Set1&quot;) + theme(legend.position=&quot;none&quot;) # 4: Using greyscale: ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + geom_bar( ) + scale_fill_grey(start = 0.25, end = 0.75) + theme(legend.position=&quot;none&quot;) # 5: Set manualy ggplot(mtcars, aes(x=as.factor(cyl), fill=as.factor(cyl) )) + geom_bar( ) + scale_fill_manual(values = c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;) ) + theme(legend.position=&quot;none&quot;) 4.1.3 Horizontal Barplot with coord_flip() It often makes sense to turn your barplot horizontal. Indeed, it makes the group labels much easier to read. Fortunately, the coord_flip() function makes it a breeze. # Load ggplot2 library(ggplot2) # Create data data &lt;- data.frame( name=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) , value=c(3,12,5,18,45) ) # Barplot ggplot(data, aes(x=name, y=value)) + geom_bar(stat = &quot;identity&quot;) + coord_flip() 4.1.4 Control Bar Width with width The width argument of the geom_bar() function allows to control the bar width. It ranges between 0 and 1, 1 being full width. See how this can be used to make bar charts with variable width. # Load ggplot2 library(ggplot2) # Create data data &lt;- data.frame( name=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) , value=c(3,12,5,18,45) ) # Barplot ggplot(data, aes(x=name, y=value)) + geom_bar(stat = &quot;identity&quot;, width=0.2) 4.1.4.1 What’s next? This section was an overview of ggplot2 barplots, showing the basic options of geom_barplot(). Visit the barplot section for more: How to reorder your barplot How to use variable bar width What about error bars Circular barplots 4.1.5 Reorder a Variable with Ggplot2 This section describes how to reorder a variable in a ggplot2 chart. Several methods are suggested, always providing examples with reproducible code chunks. Reordering groups in a ggplot2 chart can be a struggle. This is due to the fact that ggplot2 takes into account the order of the factor levels, not the order you observe in your data frame. You can sort your input data frame with sort() or arrange(), it will never have any impact on your ggplot2 output. This section explains how to reorder the level of your factor through several examples. Examples are based on 2 dummy datasets: # Library library(ggplot2) library(dplyr) # Dataset 1: one value per group data &lt;- data.frame( name=c(&quot;north&quot;,&quot;south&quot;,&quot;south-east&quot;,&quot;north-west&quot;,&quot;south-west&quot;,&quot;north-east&quot;,&quot;west&quot;,&quot;east&quot;), val=sample(seq(1,10), 8 ) ) # Dataset 2: several values per group (natively provided in R) # mpg 4.1.6 Method 1: the Forecats Library The Forecats library is a library from the tidyverse especially made to handle factors in R. It provides a suite of useful tools that solve common problems with factors. The fact_reorder() function allows to reorder the factor (data$name for example) following the value of another column (data$val here).. # load the library library(forcats) # Reorder following the value of another column: data %&gt;% mutate(name = fct_reorder(name, val)) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#f68060&quot;, alpha=.6, width=.4) + coord_flip() + xlab(&quot;&quot;) + theme_bw() # Reverse side data %&gt;% mutate(name = fct_reorder(name, desc(val))) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#f68060&quot;, alpha=.6, width=.4) + coord_flip() + xlab(&quot;&quot;) + theme_bw() If you have several values per level of your factor, you can specify which function to apply to determine the order. The default is to use the median, but you can use the number of data points per group to make the classification: # Using median mpg %&gt;% mutate(class = fct_reorder(class, hwy, .fun=&#39;median&#39;)) %&gt;% ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) + geom_boxplot() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) # Using number of observation per group mpg %&gt;% mutate(class = fct_reorder(class, hwy, .fun=&#39;length&#39; )) %&gt;% ggplot( aes(x=class, y=hwy, fill=class)) + geom_boxplot() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) + xlab(&quot;&quot;) The last common operation is to provide a specific order to your levels, you can do so using the fct_relevel() function as follow: # Reorder following a precise order p &lt;- data %&gt;% mutate(name = fct_relevel(name, &quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;)) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;) + xlab(&quot;&quot;) p 4.1.7 Method 2: Using dplyr Only The mutate() function of dplyr allows to create a new variable or modify an existing one. It is possible to use it to recreate a factor with a specific order. Here are 2 examples: The first use arrange() to sort your data frame, and reorder the factor following this desired order. The second specifies a custom order for the factor giving the levels one by one. data %&gt;% arrange(val) %&gt;% # First sort by val. This sort the dataframe but NOT the factor levels mutate(name=factor(name, levels=name)) %&gt;% # This trick update the factor levels ggplot( aes(x=name, y=val)) + geom_segment( aes(xend=name, yend=0)) + geom_point( size=4, color=&quot;orange&quot;) + coord_flip() + theme_bw() + xlab(&quot;&quot;) data %&gt;% arrange(val) %&gt;% mutate(name = factor(name, levels=c(&quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;))) %&gt;% ggplot( aes(x=name, y=val)) + geom_segment( aes(xend=name, yend=0)) + geom_point( size=4, color=&quot;orange&quot;) + theme_bw() + xlab(&quot;&quot;) 4.1.8 Method 3: the reorder() Function of Base R In case your an unconditional user of the good old R, here is how to control the order using the reorder() function inside a with() call: # reorder is close to order, but is made to change the order of the factor levels. mpg$class = with(mpg, reorder(class, hwy, median)) p &lt;- mpg %&gt;% ggplot( aes(x=class, y=hwy, fill=class)) + geom_violin() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) p 4.1.9 Barplot with Variable Width - Ggplot2 This section explains how to draw a barplot with variable bar width using R and ggplot2. It can be useful to represent the sample size available behind each group. This example shows how to customize bar width in your barchart. It can be used to show the sample size hidden between each category. It is not possible to draw that kind of chart using geom_bar() directly. You need to compute manually the position of each bar extremity using the cumsum() function, and plot the result using geom_rect(). Note: if you know what the distribution behind each bar is, don’t do a barplot, show it. # Load ggplot2 library(ggplot2) library(hrbrthemes) # for style # make data data &lt;- data.frame( group=c(&quot;A &quot;,&quot;B &quot;,&quot;C &quot;,&quot;D &quot;) , value=c(33,62,56,67) , number_of_obs=c(100,500,459,342) ) # Calculate the future positions on the x axis of each bar (left border, central position, right border) data$right &lt;- cumsum(data$number_of_obs) + 30*c(0:(nrow(data)-1)) data$left &lt;- data$right - data$number_of_obs # Plot ggplot(data, aes(ymin = 0)) + geom_rect(aes(xmin = left, xmax = right, ymax = value, colour = group, fill = group)) + xlab(&quot;number of obs&quot;) + ylab(&quot;value&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) 4.1.10 Barplot with Error Bars This section describes how to add error bars on your barplot using R. Both ggplot2 and base R solutions are considered. A focus on different types of error bar calculation is made. 4.1.10.1 The geom_errorbar() Function Error bars give a general idea of how precise a measurement is, or conversely, how far from the reported value the true (error free) value might be. If the value displayed on your barplot is the result of an aggregation (like the mean value of several data points), you may want to display error bars. To understand how to build it, you first need to understand how to build a basic barplot with R. Then, you just it to add an extra layer using the geom_errorbar() function. The function takes at least 3 arguments in its aesthetics: ymin and ymax: position of the bottom and the top of the error bar respectively x: position on the X axis Note: the lower and upper limits of your error bars must be computed before building the chart, and available in a column of the input data. # Load ggplot2 library(ggplot2) # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5), sd=c(1,0.2,3,2,4) ) # Most basic error bar ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.7) + geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.3) 4.1.11 Customization It is possible to change error bar types thanks to similar function: geom_crossbar(), geom_linerange() and geom_pointrange(). Those functions works basically the same as the most common geom_errorbar(). # Load ggplot2 library(ggplot2) # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5), sd=c(1,0.2,3,2,4) ) # rectangle ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_crossbar( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.3) # line ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_linerange( aes(x=name, ymin=value-sd, ymax=value+sd), colour=&quot;orange&quot;, alpha=0.9, size=1.3) # line + dot ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_pointrange( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), colour=&quot;orange&quot;, alpha=0.9, size=1.3) # horizontal ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.3) + coord_flip() 4.1.12 Basic R and the barplot() Function Basic R can build quality barplots thanks to the barplot() function. Here is a list of examples guiding you through the most common customization you will need. 4.1.12.1 Most Basic Barplot This section describes how to build a basic barplot with R, without any packages, using the barplot() function. In R, a barplot is computed using the barplot() function. Here is the most basic example you can do. The input data is a data frame with 2 columns. value is used for bar height, name is used as category label. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # The most basic barplot you can do: barplot(height=data$value, names=data$name) 4.1.13 Custom Color Here are 2 examples showing how to custom the barplot color: Uniform color with col, asking one color only. Using a palette coming from RColorBrewer. Change border color with the border argument. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Uniform color barplot(height=data$value, names=data$name, col=rgb(0.2,0.4,0.6,0.6) ) # Specific color for each bar? Use a well known palette library(RColorBrewer) coul &lt;- brewer.pal(5, &quot;Set2&quot;) barplot(height=data$value, names=data$name, col=coul ) # Change border color barplot(height=data$value, names=data$name, border=&quot;#69b3a2&quot;, col=&quot;white&quot; ) 4.1.14 Title, Axis label, Custom Limits Usual customizations with xlab, ylab, main and ylim. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Uniform color barplot(height=data$value, names=data$name, col=rgb(0.8,0.1,0.1,0.6), xlab=&quot;categories&quot;, ylab=&quot;values&quot;, main=&quot;My title&quot;, ylim=c(0,40) ) 4.1.15 Horizontal Barplot Usual customization with xlab, ylab, main and ylim. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Uniform color barplot(height=data$value, names=data$name, col=&quot;#69b3a2&quot;, horiz=T, las=1 ) 4.1.16 Bar Width &amp; Space between Bars It is possible to control the space between bars and the width of the bars using space and width. Can be useful to represent the number of value behind each bar. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Control space: barplot(height=data$value, names=data$name, col=rgb(0.2,0.4,0.6,0.6), space=c(0.1,0.2,3,1.5,0.3) ) # Control width: barplot(height=data$value, names=data$name, col=rgb(0.2,0.4,0.6,0.6), width=c(0.1,0.2,3,1.5,0.3) ) 4.1.17 Barplot Texture Change bar texture with the density and angle arguments. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # barplot barplot( height=data$value, names=data$name , density=c(5,10,20,30,7) , angle=c(0,45,90,11,36) , col=&quot;brown&quot; ) 4.1.18 Advanced R Barplot Customization Take your base R barplot to the next step: modify axis, label orientation, margins, and more. 4.1.18.1 Start Basic: barplot() Function # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # The most basic barplot you can do: barplot(height=data$value, names=data$name, col=&quot;#69b3a2&quot;) 4.1.19 Axis Labels Orientation with las() The las argument allows to change the orientation of the axis labels: 0: always parallel to the axis 1: always horizontal 2: always perpendicular to the axis 3: always vertical. This is specially helpful for horizontal bar chart. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # The most basic barplot you can do: barplot(height=data$value, names=data$name, col=&quot;#69b3a2&quot;, horiz=T , las=1) 4.1.20 Change Group Labels with names.arg Change the group names using the names.arg argument. The vector you provide must be the same length as the number of categories. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Uniform color barplot(height=data$value, names.arg=c(&quot;group1&quot;,&quot;group2&quot;,&quot;group3&quot;,&quot;group4&quot;,&quot;group5&quot;), col=&quot;#69b3a2&quot;) 4.1.21 Axis Labels &amp; Axis Title Style Customize the labels: font.axis: font: 1: normal, 2: bold, 3: italic, 4: bold italic col.axis: color cex.axis: size Customize axis title: font.lab col.lab cex.lab # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Customize labels (left) barplot(height=data$value, names=data$name, names.arg=c(&quot;group1&quot;,&quot;group2&quot;,&quot;group3&quot;,&quot;group4&quot;,&quot;group5&quot;), font.axis=2, col.axis=&quot;orange&quot;, cex.axis=1.5 ) # Customize title (right) barplot(height=data$value, names=data$name, xlab=&quot;category&quot;, font.lab=2, col.lab=&quot;orange&quot;, cex.lab=2 ) 4.1.22 Increase Margin Size If your group names are long, you need to: Rotate them to avoid overlapping. This is done with las Increase bottom margin size using the mar parameter of the par() function. Four values are provided: bottom, left, top, right respectively. Note: prefer a horizontal barplot in this case. # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5) ) # Increase margin size par(mar=c(11,4,4,4)) # Uniform color barplot(height=data$value, col=&quot;#69b3a2&quot;, names.arg=c(&quot;very long group name 1&quot;,&quot;very long group name 2&quot;,&quot;very long group name 3&quot;,&quot;very long group name 4&quot;,&quot;very long group name 5&quot;), las=2 ) 4.1.23 Barplot with Error Bars This section describes how to add error bars on your barplot using R. Both ggplot2 and base R solutions are considered. A focus on different types of error bar calculation is made. 4.1.23.1 The geom_errorbar() Function Error bars give a general idea of how precise a measurement is, or conversely, how far from the reported value the true (error free) value might be. If the value displayed on your barplot is the result of an aggregation (like the mean value of several data points), you may want to display error bars. To understand how to build it, you first need to understand how to build a basic barplot with R. Then, you just it to add an extra layer using the geom_errorbar() function. The function takes at least 3 arguments in its aesthetics: ymin and ymax: position of the bottom and the top of the error bar respectively x: position on the X axis Note: the lower and upper limits of your error bars must be computed before building the chart, and available in a column of the input data. # Load ggplot2 library(ggplot2) # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5), sd=c(1,0.2,3,2,4) ) # Most basic error bar ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.7) + geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.3) 4.1.24 Customization It is possible to change error bar types thanks to similar function: geom_crossbar(), geom_linerange() and geom_pointrange(). Those functions works basically the same as the most common geom_errorbar(). #Load ggplot2 library(ggplot2) # create dummy data data &lt;- data.frame( name=letters[1:5], value=sample(seq(4,15),5), sd=c(1,0.2,3,2,4) ) # rectangle ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_crossbar( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.3) # line ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_linerange( aes(x=name, ymin=value-sd, ymax=value+sd), colour=&quot;orange&quot;, alpha=0.9, size=1.3) # line + dot ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_pointrange( aes(x=name, y=value, ymin=value-sd, ymax=value+sd), colour=&quot;orange&quot;, alpha=0.9, size=1.3) # horizontal ggplot(data) + geom_bar( aes(x=name, y=value), stat=&quot;identity&quot;, fill=&quot;skyblue&quot;, alpha=0.5) + geom_errorbar( aes(x=name, ymin=value-sd, ymax=value+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.3) + coord_flip() 4.1.25 Standard Deviation, Standard Error or Confidence Interval? Three different types of values are commonly used for error bars, sometimes without even specifying which one is used. It is important to understand how they are calculated, since they give very different results (see above). Let’s compute them on a simple vector: vec=c(1,3,5,9,38,7,2,4,9,19,19) 4.1.25.1 Standard Deviation (SD) It represents the amount of dispersion of the variable. Calculated as the root square of the variance: sd &lt;- sd(vec) sd &lt;- sqrt(var(vec)) sd 4.1.25.2 Standard Error (SE) It is the standard deviation of the vector sampling distribution. Calculated as the SD divided by the square root of the sample size. By construction, SE is smaller than SD. With a very big sample size, SE tends toward 0. se = sd(vec) / sqrt(length(vec)) se 4.1.25.3 Confidence Interval (CI) This interval is defined so that there is a specified probability that a value lies within it. It is calculated as t * SE. Where t is the value of the Student’s t-distribution for a specific alpha. Its value is often rounded to 1.96 (its value with a big sample size). If the sample size is huge or the distribution not normal, it is better to calculate the CI using the bootstrap method, however. alpha=0.05 t=qt((1-alpha)/2 + .5, length(vec)-1) # tend to 1.96 if sample size is big enough CI=t*se CI After this short introduction, here is how to compute these 3 values for each group of your dataset, and use them as error bars on your barplot. As you can see, the differences can greatly influence your conclusions. # Load ggplot2 library(ggplot2) library(dplyr) # Data data &lt;- iris %&gt;% dplyr::select(Species, Sepal.Length) # Calculates mean, sd, se and IC my_sum &lt;- data %&gt;% group_by(Species) %&gt;% summarise( n=n(), mean=mean(Sepal.Length), sd=sd(Sepal.Length) ) %&gt;% mutate( se=sd/sqrt(n)) %&gt;% mutate( ic=se * qt((1-0.05)/2 + .5, n-1)) # Standard deviation ggplot(my_sum) + geom_bar( aes(x=Species, y=mean), stat=&quot;identity&quot;, fill=&quot;forestgreen&quot;, alpha=0.5) + geom_errorbar( aes(x=Species, ymin=mean-sd, ymax=mean+sd), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.5) + ggtitle(&quot;using standard deviation&quot;) # Standard Error ggplot(my_sum) + geom_bar( aes(x=Species, y=mean), stat=&quot;identity&quot;, fill=&quot;forestgreen&quot;, alpha=0.5) + geom_errorbar( aes(x=Species, ymin=mean-se, ymax=mean+se), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.5) + ggtitle(&quot;using standard error&quot;) # Confidence Interval ggplot(my_sum) + geom_bar( aes(x=Species, y=mean), stat=&quot;identity&quot;, fill=&quot;forestgreen&quot;, alpha=0.5) + geom_errorbar( aes(x=Species, ymin=mean-ic, ymax=mean+ic), width=0.4, colour=&quot;orange&quot;, alpha=0.9, size=1.5) + ggtitle(&quot;using confidence interval&quot;) 4.1.26 Basic R: Use the arrows() Function It is double to add error bars with base R only as well, but requires more work. In any case, everything relies on the arrows() function. Let’s build a dataset : height of 10 sorgho and poacee sample in 3 environmental conditions (A, B, C) #Let&#39;s build a dataset : height of 10 sorgho and poacee sample in 3 environmental conditions (A, B, C) data &lt;- data.frame( specie=c(rep(&quot;sorgho&quot; , 10) , rep(&quot;poacee&quot; , 10) ), cond_A=rnorm(20,10,4), cond_B=rnorm(20,8,3), cond_C=rnorm(20,5,4) ) #Let&#39;s calculate the average value for each condition and each specie with the *aggregate* function bilan &lt;- aggregate(cbind(cond_A,cond_B,cond_C)~specie , data=data , mean) rownames(bilan) &lt;- bilan[,1] bilan &lt;- as.matrix(bilan[,-1]) #Plot boundaries lim &lt;- 1.2*max(bilan) #A function to add arrows on the chart error.bar &lt;- function(x, y, upper, lower=upper, length=0.1,...){ arrows(x,y+upper, x, y-lower, angle=90, code=3, length=length, ...) } #Then I calculate the standard deviation for each specie and condition : stdev &lt;- aggregate(cbind(cond_A,cond_B,cond_C)~specie , data=data , sd) rownames(stdev) &lt;- stdev[,1] stdev &lt;- as.matrix(stdev[,-1]) * 1.96 / 10 #I am ready to add the error bar on the plot using my &quot;error bar&quot; function ! ze_barplot &lt;- barplot(bilan , beside=T , legend.text=T,col=c(&quot;blue&quot; , &quot;skyblue&quot;) , ylim=c(0,lim) , ylab=&quot;height&quot;) error.bar(ze_barplot,bilan, stdev) 4.1.27 Barplot with Number of Observation A barplot with number of observation on top of bars, legend, ablines, increased margin and more. This chart illustrates many tips you can apply to a base R barplot: Add abline with abline() Change axis labels orientation with las() Add text with text() Add a legend with legend() # Data data &lt;- data.frame( name = c(&quot;DD&quot;,&quot;with himself&quot;,&quot;with DC&quot;,&quot;with Silur&quot; ,&quot;DC&quot;,&quot;with himself&quot;,&quot;with DD&quot;,&quot;with Silur&quot; ,&quot;Silur&quot;,&quot;with himself&quot;,&quot;with DD&quot;,&quot;with DC&quot; ), average = sample(seq(1,10) , 12 , replace=T), number = sample(seq(4,39) , 12 , replace=T) ) # Increase bottom margin par(mar=c(6,4,4,4)) # Basic Barplot my_bar &lt;- barplot(data$average , border=F , names.arg=data$name , las=2 , col=c(rgb(0.3,0.1,0.4,0.6) , rgb(0.3,0.5,0.4,0.6) , rgb(0.3,0.9,0.4,0.6) , rgb(0.3,0.9,0.4,0.6)) , ylim=c(0,13) , main=&quot;&quot; ) # Add abline abline(v=c(4.9 , 9.7) , col=&quot;grey&quot;) # Add the text text(my_bar, data$average+0.4 , paste(&quot;n: &quot;, data$number, sep=&quot;&quot;) ,cex=1) #Legende legend(&quot;topleft&quot;, legend = c(&quot;Alone&quot;,&quot;with Himself&quot;,&quot;With other genotype&quot; ) , col = c(rgb(0.3,0.1,0.4,0.6) , rgb(0.3,0.5,0.4,0.6) , rgb(0.3,0.9,0.4,0.6) , rgb(0.3,0.9,0.4,0.6)) , bty = &quot;n&quot;, pch=20 , pt.cex = 2, cex = 0.8, horiz = FALSE, inset = c(0.05, 0.05)) 4.2 Circular Barplot This is the circular barplot section of the gallery, a variation of the well known barplot. Note that even if visually appealing, circular barplot must be used with care since groups do not share the same Y axis. It is very adapted for cyclical data though. Visit data-to-viz.com for more info. 4.2.0.1 Step by Step Here is a set of examples leading to a proper circular barplot, step by step. The first most basic circular barchart shows how to use coord_polar() to make the barchart circular. Next examples describe the next steps to get a proper figure: gap between groups, labels and customization. 4.2.1 Most Basic Circular Barplot A circular barplot is a barplot where bars are displayed along a circle instead of a line. This section explains how to build a basic version with R and ggplot2. It provides the reproducible code and explain how the coord_polar() function works. A circular barplot is a barplot where bars are displayed along a circle instead of a line. The input dataset is the same than for a barplot: we need one numeric value per group (one group = one bar). (See more explanation in the barplot section). Basically, the method is the same than to do a classic barplot. At the end, we call coord_polar() to make the chart circular. Note that the ylim() argument is really important. If it starts at 0, the bars will start from the centre of the circle. If you provide a negative value, a white circle space will appear! This chart is not really insightful, go to the next example to learn how to add labels! # Libraries library(tidyverse) # Create dataset data &lt;- data.frame( id=seq(1,60), individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), value=sample( seq(10,100), 60, replace=T) ) # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value)) + # Note that id is a factor. If x is numeric, there is some space between the first bar # This add the bars with a blue color geom_bar(stat=&quot;identity&quot;, fill=alpha(&quot;blue&quot;, 0.3)) + # Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar ylim(-100,120) + # Custom the theme: no axis title and no cartesian grid theme_minimal() + theme( axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-2,4), &quot;cm&quot;) # This remove unnecessary margin around plot ) + # This makes the coordinate polar instead of cartesian. coord_polar(start = 0) p 4.2.2 Add Labels to Circular Barplot This section explains how to add labels on a ggplot2 circular barchart, on top of each bar. It follows the previous most basic circular barchart. The chart #295 explains how to make a basic circular barplot. The next step is to add labels to each bar, to give insight to the graphic. Here I suggest a method to add label at the top of each bar, using the same angle that the central part of the bar. In the code below, a short section creates a dataframe with the feature of each label, that we can then call in geom_text(). Note that labels are always in an angle that allows to read them easily, what requires a 180 degrees flip for some of them. # Libraries library(tidyverse) # Create dataset data &lt;- data.frame( id=seq(1,60), individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), value=sample( seq(10,100), 60, replace=T) ) # ----- This section prepare a dataframe for labels ---- # # Get the name and the y position of each label label_data &lt;- data # calculate the ANGLE of the labels number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) # calculate the alignment of labels: right or left # If I am on the left part of the plot, my labels have currently an angle &lt; -90 label_data$hjust&lt;-ifelse( angle &lt; -90, 1, 0) # flip angle BY to make them readable label_data$angle&lt;-ifelse(angle &lt; -90, angle+180, angle) # ----- ------------------------------------------- ---- # # Start the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value)) + # Note that id is a factor. If x is numeric, there is some space between the first bar # This add the bars with a blue color geom_bar(stat=&quot;identity&quot;, fill=alpha(&quot;skyblue&quot;, 0.7)) + # Limits of the plot = very important. The negative value controls the size of the inner circle, the positive one is useful to add size over each bar ylim(-100,120) + # Custom the theme: no axis title and no cartesian grid theme_minimal() + theme( axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) # Adjust the margin to make in sort labels are not truncated! ) + # This makes the coordinate polar instead of cartesian. coord_polar(start = 0) + # Add the labels, using the label_data dataframe that we have created before geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 4.2.3 Circular Barplot with Groups This section explains how to build a circular barchart with groups. A gap is added between groups to highlight them. Bars are labeled, group names are annotated 4.2.3.1 Add a Gap in the Circle A circular barplot is a barplot where bars are displayed along a circle instead of a line. This page aims to teach you how to make a circular barplot with groups. Since this kind of chart is a bit tricky, I strongly advise to understand graph #295 and #296 that will teach you the basics. The first step is to build a circular barplot with a break in the circle. Actually, I just added a few empty lines at the end of the initial data frame: # library library(tidyverse) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; empty_bar &lt;- 10 # Add lines to the initial dataset to_add &lt;- matrix(NA, empty_bar, ncol(data)) colnames(to_add) &lt;- colnames(data) data &lt;- rbind(data, to_add) data$id &lt;- seq(1, nrow(data)) # Get the name and the y position of each label label_data &lt;- data number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(stat=&quot;identity&quot;, fill=alpha(&quot;green&quot;, 0.3)) + ylim(-100,120) + theme_minimal() + theme( axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar(start = 0) + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 4.2.4 Space between Groups This concept can now be used to add space between each group of the dataset. Added n lines with only NA at the bottom of each group. This chart is far more insightful since it allows one to quickly compare the different groups, and to compare the value of items within each group. # library library(tidyverse) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar &lt;- 4 to_add &lt;- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) ) colnames(to_add) &lt;- colnames(data) to_add$group &lt;- rep(levels(data$group), each=empty_bar) data &lt;- rbind(data, to_add) data &lt;- data %&gt;% arrange(group) data$id &lt;- seq(1, nrow(data)) # Get the name and the y position of each label label_data &lt;- data number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(stat=&quot;identity&quot;, alpha=0.5) + ylim(-100,120) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 4.2.5 Order Bars Here observations are sorted by bar height within each group. It can be useful if your goal is to understand what are the highest / lowest observations within and across groups. The method used to order groups in ggplot2 is extensively described in this dedicated page. Basically, you just have to add the following piece of code right after the data frame creation: # Order data: data = data %&gt;% arrange(group, value) 4.2.6 Circular Barchart Customization Last but not least, it is highly advisable to add some customisation to your chart. Here we add group names (A, B, C and D), and we add a scale to help compare the sizes of the bars. # library library(tidyverse) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar &lt;- 3 to_add &lt;- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) ) colnames(to_add) &lt;- colnames(data) to_add$group &lt;- rep(levels(data$group), each=empty_bar) data &lt;- rbind(data, to_add) data &lt;- data %&gt;% arrange(group) data$id &lt;- seq(1, nrow(data)) # Get the name and the y position of each label label_data &lt;- data number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # prepare a data frame for base lines base_data &lt;- data %&gt;% group_by(group) %&gt;% summarize(start=min(id), end=max(id) - empty_bar) %&gt;% rowwise() %&gt;% mutate(title=mean(c(start, end))) # prepare a data frame for grid (scales) grid_data &lt;- base_data grid_data$end &lt;- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1 grid_data$start &lt;- grid_data$start - 1 grid_data &lt;- grid_data[-1,] # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=&quot;identity&quot;, alpha=0.5) + # Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it. geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + # Add text showing the value of each 100/75/50/25 lines annotate(&quot;text&quot;, x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c(&quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;) , color=&quot;grey&quot;, size=3 , angle=0, fontface=&quot;bold&quot;, hjust=1) + geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=&quot;identity&quot;, alpha=0.5) + ylim(-100,120) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) + # Add base line information geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = &quot;black&quot;, alpha=0.8, size=0.6 , inherit.aes = FALSE ) + geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = &quot;black&quot;, alpha=0.8, size=4, fontface=&quot;bold&quot;, inherit.aes = FALSE) p 4.2.7 Circular Stacked Barplot A circular barplot is a barplot where bars are displayed along a circle instead of a line. This page aims to teach you how to make a grouped and stacked circular barplot with R and ggplot2. A circular barplot is a barplot where bars are displayed along a circle instead of a line. This page aims to teach you how to make a grouped and stacked circular barplot. I highly recommend to visit graph #295, #296 and #297 Before diving into this code, which is a bit rough. I tried to add as many comments as possible in the code, and thus hope that the method is understandable. If it is not, please comment and ask supplementary explanations. You first need to understand how to make a stacked barplot with ggplot2. Then understand how to properly add labels, calculating the good angles, flipping them if necessary, and adjusting their position. The trickiest part is probably the one allowing to add space between each group. All these steps are described one by one in the circular barchart section. # library library(tidyverse) library(viridis) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value1=sample( seq(10,100), 60, replace=T), value2=sample( seq(10,100), 60, replace=T), value3=sample( seq(10,100), 60, replace=T) ) # Transform data in a tidy format (long format) data &lt;- data %&gt;% gather(key = &quot;observation&quot;, value=&quot;value&quot;, -c(1,2)) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar &lt;- 2 nObsType &lt;- nlevels(as.factor(data$observation)) to_add &lt;- data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) ) colnames(to_add) &lt;- colnames(data) to_add$group &lt;- rep(levels(data$group), each=empty_bar*nObsType ) data &lt;- rbind(data, to_add) data &lt;- data %&gt;% arrange(group, individual) data$id &lt;- rep( seq(1, nrow(data)/nObsType) , each=nObsType) # Get the name and the y position of each label label_data &lt;- data %&gt;% group_by(id, individual) %&gt;% summarize(tot=sum(value)) number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # prepare a data frame for base lines base_data &lt;- data %&gt;% group_by(group) %&gt;% summarize(start=min(id), end=max(id) - empty_bar) %&gt;% rowwise() %&gt;% mutate(title=mean(c(start, end))) # prepare a data frame for grid (scales) grid_data &lt;- base_data grid_data$end &lt;- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1 grid_data$start &lt;- grid_data$start - 1 grid_data &lt;- grid_data[-1,] # Make the plot p &lt;- ggplot(data) + # Add the stacked bar geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat=&quot;identity&quot;, alpha=0.5) + scale_fill_viridis(discrete=TRUE) + # Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it. geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + # Add text showing the value of each 100/75/50/25 lines ggplot2::annotate(&quot;text&quot;, x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c(&quot;0&quot;, &quot;50&quot;, &quot;100&quot;, &quot;150&quot;, &quot;200&quot;) , color=&quot;grey&quot;, size=6 , angle=0, fontface=&quot;bold&quot;, hjust=1) + ylim(-150,max(label_data$tot, na.rm=T)) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + # Add labels on top of each bar geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) + # Add base line information geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = &quot;black&quot;, alpha=0.8, size=0.6 , inherit.aes = FALSE ) + geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = &quot;black&quot;, alpha=0.8, size=4, fontface=&quot;bold&quot;, inherit.aes = FALSE) # Save at png #ggsave(p, file=&quot;output.png&quot;, width=10, height=10) p 4.3 Lollipop Plot A lollipop plot is basically a barplot, where the bar is transformed in a line and a dot. It shows the relationship between a numeric and a categorical variable. Lollipop charts can be created using ggplot2: the trick is to combine geom_point() for the dots with geom_segment() for the stems. See this basic example to see how to proceed. 4.3.0.1 GGPLOT2 Lollipop charts can be created using ggplot2: the trick is to combine geom_point() for the dots with geom_segment() for the stems. See this basic example to see how to proceed. 4.3.1 Most Basic Lollipop Plot How to build a very basic lollipop chart with R and ggplot2. This section how to use geom_point() and geom_segment() based on different input formats. 4.3.1.1 From 2 Numeric Variables A lollipop plot is very close from both scatterplots and barplots. Thus, 2 types of input format work to build it: 2 numeric values like for a scatterplot one numeric and one categorical variable like for the barplot. In any case, a lollipop is built using geom_point() for the circle, and geom_segment() for the stem. # Libraries library(ggplot2) # Create data data &lt;- data.frame(x=seq(1,30), y=abs(rnorm(30))) # Plot ggplot(data, aes(x=x, y=y)) + geom_point() + geom_segment( aes(x=x, xend=x, y=0, yend=y)) 4.3.2 From 1 Numeric and 1 Categorical Variable The code works pretty much the same way, but it is important to note that the X axis can represent a categorical variable as well. In this case, the lollipop chart is a good replacement of the barplot. # Libraries library(ggplot2) # Create data data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # Plot ggplot(data, aes(x=x, y=y)) + geom_point() + geom_segment( aes(x=x, xend=x, y=0, yend=y)) 4.3.3 Custom Lollipop Chart A lollipop chart is constituted of a circle (made with geom_point()) and a segment (made with geom_segment()). This page explains how to customize the chart appearance with R and ggplot2. 4.3.3.1 Marker A lollipop plot is constituted of a marker and a stem. You can customize the marker as usual with ggplot2: size, color alpha : transparency shape : see list of available shape here stroke and fill : only for shapes that have stroke, like the 21 # Library library(tidyverse) # Create data data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # plot ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y)) + geom_point( size=5, color=&quot;red&quot;, fill=alpha(&quot;orange&quot;, 0.3), alpha=0.7, shape=21, stroke=2) 4.3.4 Stem The stem is built using geom_segment() and can be customized as well: size, color linetype: can be an integer (see list), a word like dotted, dashed, dotdash and more (type help(linetype)) # Libraries library(ggplot2) # Create data data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # Plot ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y) , size=1, color=&quot;blue&quot;, linetype=&quot;dotdash&quot; ) + geom_point() 4.3.5 General Appearance with theme() As usual, you can customize the general appearance of the chart using the theme() function. Note: another solution is to use the pre-built theme_ipsum() offered in the hrbrthemes package. # Create data data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # Plot ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y), color=&quot;grey&quot;) + geom_point( color=&quot;orange&quot;, size=4) + theme_light() + theme( panel.grid.major.x = element_blank(), panel.border = element_blank(), axis.ticks.x = element_blank() ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) 4.3.6 Horizontal Version It is pretty straightforward to flip the chart using the coord_flip() function. It makes sense to do so if you have long labels they will be much easier to read. # Libraries library(ggplot2) # Create data data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # Horizontal version ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y), color=&quot;skyblue&quot;) + geom_point( color=&quot;blue&quot;, size=4, alpha=0.6) + theme_light() + coord_flip() + theme( panel.grid.major.y = element_blank(), panel.border = element_blank(), axis.ticks.y = element_blank() ) 4.3.7 Baseline Lastly, you can easily change the baseline of the chart. It gives more insight to the figure if there is a specific threshold in the data that interests you. You just have to change the y argument in the geom_segment() call. # Libraries library(ggplot2) # Create data data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # Change baseline ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=1, yend=y), color=&quot;grey&quot;) + geom_point( color=&quot;orange&quot;, size=4) + theme_light() + theme( panel.grid.major.x = element_blank(), panel.border = element_blank(), axis.ticks.x = element_blank() ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) 4.3.8 Lollipop Chart with 2 Groups A lollipop chart can be used to compare 2 categories, linking them with a segment to stress out their difference. This section explains how to do it with R and ggplot2. Lollipop plots can be very appropriate when it comes to compare 2 values for several entities. For each entity, one point is drawn for each variable, with a different color. Their difference is then highlighted using a segment. This type of visualisation is also called Cleveland dot plots. As usual, it is advised to order your individuals by mean, median, or group difference to give even more insight to the figure. # Library library(ggplot2) library(dplyr) library(hrbrthemes) # Create data value1 &lt;- abs(rnorm(26))*2 data &lt;- data.frame( x=LETTERS[1:26], value1=value1, value2=value1+1+rnorm(26, sd=1) ) # Reorder data using average? Learn more about reordering in chart #267 data &lt;- data %&gt;% rowwise() %&gt;% mutate( mymean = mean(c(value1,value2) )) %&gt;% arrange(mymean) %&gt;% mutate(x=factor(x, x)) # Plot ggplot(data) + geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color=&quot;grey&quot;) + geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) + geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) + coord_flip()+ theme_ipsum() + theme( legend.position = &quot;none&quot;, ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) 4.3.9 Highlight a Group in a Lollipop Chart This section describes how to build a lollipop chart with R and ggplot2. It shows how to highlight one or several groups of interest to convey your message more efficiently. Annotation is key in data visualization: it allows the reader to focus on the main message you want to convey. If one or a few groups specifically interest you, it is a good practice to highlight them on the plot. Your reader will understand quicker what the story behind the chart is. To do so, you can use an ifelse statement to change size, color, alpha or any other aesthetics. Moreover, it is even more insightful to add text annotation directly on the chart. Learn more about ggplot2 annotation here and more generally in the ggplot2 section. # Library library(ggplot2) library(dplyr) library(hrbrthemes) # Create data set.seed(1000) data &lt;- data.frame( x=LETTERS[1:26], y=abs(rnorm(26)) ) # Reorder the data data &lt;- data %&gt;% arrange(y) %&gt;% mutate(x=factor(x,x)) # Plot p &lt;- ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y ), color=ifelse(data$x %in% c(&quot;A&quot;,&quot;D&quot;), &quot;orange&quot;, &quot;grey&quot;), size=ifelse(data$x %in% c(&quot;A&quot;,&quot;D&quot;), 1.3, 0.7) ) + geom_point( color=ifelse(data$x %in% c(&quot;A&quot;,&quot;D&quot;), &quot;orange&quot;, &quot;grey&quot;), size=ifelse(data$x %in% c(&quot;A&quot;,&quot;D&quot;), 5, 2) ) + theme_ipsum() + coord_flip() + theme( legend.position=&quot;none&quot; ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) + ggtitle(&quot;How did groups A and D perform?&quot;) # Add annotation p + annotate(&quot;text&quot;, x=grep(&quot;D&quot;, data$x), y=data$y[which(data$x==&quot;D&quot;)]*1.2, label=&quot;Group D is very impressive&quot;, color=&quot;orange&quot;, size=4 , angle=0, fontface=&quot;bold&quot;, hjust=0) + annotate(&quot;text&quot;, x = grep(&quot;A&quot;, data$x), y = data$y[which(data$x==&quot;A&quot;)]*1.2, label = paste(&quot;Group A is not too bad\\n (val=&quot;,data$y[which(data$x==&quot;A&quot;)] %&gt;% round(2),&quot;)&quot;,sep=&quot;&quot; ) , color=&quot;orange&quot;, size=4 , angle=0, fontface=&quot;bold&quot;, hjust=0) 4.3.10 Lollipop Chart with Conditional Color If your lollipop plot goes on both side of an interesting threshold, you probably want to change the color of its components conditionally. Here is how using R and ggplot2. 4.3.10.1 Marker Here is the process to use conditional color on your ggplot2 chart: 4.3.10.2 Marker Here is the process to use conditional color on your ggplot2 chart: Add a new column to your dataframe specifying if you are over or under the threshold (use an ifelse statement). Give this column to the color aesthetic. # library library(ggplot2) library(dplyr) # Create data (this takes more sense with a numerical X axis) x &lt;- seq(0, 2*pi, length.out=100) data &lt;- data.frame( x=x, y=sin(x) + rnorm(100, sd=0.2) ) # Add a column with your condition for the color data &lt;- data %&gt;% mutate(mycolor = ifelse(y&gt;0, &quot;type1&quot;, &quot;type2&quot;)) # plot ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y, color=mycolor), size=1.3, alpha=0.9) + theme_light() + theme( legend.position = &quot;none&quot;, panel.border = element_blank(), ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) 4.4 Parallel Coordinates Chart This is the Parallel Coordinates chart section of the gallery. If you want to know more about this kind of chart, visit data-to-viz.com. If you’re looking for a simple way to implement it in d3.js, pick an example below. 4.4.0.1 Step by Step - The ggally Library The ggally package is a ggplot2 extension that allows to build parallel coordinates charts thanks to the parcoord() function. It allows to beneficiate the grammar of graphics and all the usual ggplot2 customization. 4.4.1 Parallel Coordinates Chart with ggally ggally is a ggplot2 extension. It allows to build parallel coordinates charts thanks to the ggparcoord() function. Check several reproducible examples in this section. 4.4.1.1 Most Basic This is the most basic parallel coordinates chart you can build with R, the ggally packages and its ggparcoord() function. The input dataset must be a data frame with several numeric variables, each being used as a vertical axis on the chart. Columns number of these variables are specified in the columns argument of the function. Note: Categoric variable is used to color lines, as specified in the groupColumn variable. # Libraries library(GGally) # Data set is provided by R natively data &lt;- iris # Plot ggparcoord(data, columns = 1:4, groupColumn = 5 ) 4.4.2 Custom Color, Theme, General Appearance This is pretty much the same chart as the previous one, except for the following customization’s: Color palette is improved thanks to the viridis package. Title is added with title, and customized in theme. Dots are added with showPoints. Transparency is applied to lines with alphaLines. theme_ipsum() is used for the general appearance. # Libraries library(hrbrthemes) library(GGally) library(viridis) # Data set is provided by R natively data &lt;- iris # Plot ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, showPoints = TRUE, title = &quot;Parallel Coordinate Plot for the Iris Data&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( plot.title = element_text(size=10) ) 4.4.3 Scaling Scaling transforms the raw data to a new scale that is common with other variables. It is a crucial step to compare variables that do not have the same unit, but can also help otherwise as shown in the example below. The ggally package offers a scale argument. Four possible options are applied on the same dataset below: globalminmax: No scaling uniminmax: Standardize to Min = 0 and Max = 1 std:Normalize univariately (substract mean &amp; divide by sd) center: Standardize and center variables ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;globalminmax&quot;, showPoints = TRUE, title = &quot;No scaling&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;uniminmax&quot;, showPoints = TRUE, title = &quot;Standardize to Min = 0 and Max = 1&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;std&quot;, showPoints = TRUE, title = &quot;Normalize univariately (substract mean &amp; divide by sd)&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;center&quot;, showPoints = TRUE, title = &quot;Standardize and center variables&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) 4.4.4 Highlight a Group Data visualization aims to highlight a story in the data. If you are interested in a specific group, you can highlight it as follow: # Libraries library(GGally) library(dplyr) # Data set is provided by R natively data &lt;- iris # Plot data %&gt;% arrange(desc(Species)) %&gt;% ggparcoord( columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, showPoints = TRUE, title = &quot;Original&quot;, alphaLines = 1 ) + scale_color_manual(values=c( &quot;#69b3a2&quot;, &quot;#E8E8E8&quot;, &quot;#E8E8E8&quot;) ) + theme_ipsum()+ theme( legend.position=&quot;Default&quot;, plot.title = element_text(size=10) ) + xlab(&quot;&quot;) 4.4.4.1 Step by Step - The MASS Library The MASS library allows to build parallel coordinates chart thanks to the parcoord() function. Learn how to use the function, how to reorder variables, how to custom the color palette and how to highlight a group on the chart. 4.4.5 Parallel Chart with the MASS Library This section explains how to build a parallel coordinate chart with R and the MASS library. Note that using ggplot2 is probably a better option. 4.4.5.1 The parcoord() Function of the MASS Library The MASS library provides the parcoord() function that automatically builds parallel coordinates chart. The input dataset must be a data frame composed by numeric variables only. Each variable will be used to build one vertical axis of the chart. # You need the MASS library library(MASS) # Vector color my_colors &lt;- colors()[as.numeric(iris$Species)*11] # Make the graph ! parcoord(iris[,c(1:4)] , col= my_colors ) 4.4.6 Reorder Variables It is important to find the best variable order in your parallel coordinates chart. To change it, just change the order in the input dataset. Note: the RColorBrewer package is used to generate a nice and reliable color palette. # You need the MASS library library(MASS) # Vector color library(RColorBrewer) palette &lt;- brewer.pal(3, &quot;Set1&quot;) my_colors &lt;- palette[as.numeric(iris$Species)] # Make the graph ! parcoord(iris[,c(1,3,4,2)] , col= my_colors ) 4.4.7 Highlight a Group Data visualization aims to highlight a story in the data. If you are interested in a specific group, you can highlight it as follow: # You need the MASS library library(MASS) # Let&#39;s use the Iris dataset as an example data(iris) # Vector color: red if Setosa, grey otherwise. isSetosa &lt;- ifelse(iris$Species==&quot;setosa&quot;,&quot;red&quot;,&quot;grey&quot;) # Make the graph ! parcoord(iris[,c(1,3,4,2)] , col=isSetosa ) 4.5 Radar Chart A radar or spider or web chart is a two-dimensional chart type designed to plot one or more series of values over multiple quantitative variables. It has several downsides and should be used with care. In R, the fmsb library is the best tool to build it. 4.5.1 One Group Only - FMSB Library The fmsb package allows to build radar chart in R. Next examples explain how to format your data to build a basic version, and what are the available option to customize the chart appearance. 4.5.1.1 Basic Radar Chart How to build the most basic radar chart with R and the fmsb library: check several reproducible examples with explanation and R code. 4.5.1.2 Most basic radar chart with the fmsb package Radar charts are also called Spider or Web or Polar charts. They are drawn in R using the fmsb library. Input data format is very specific. Each row must be an entity. Each column is a quantitative variable. First 2 rows provide the min and the max that will be used for each variable. Once you have this format, the radarchart() function makes all the job for you. # Library library(fmsb) # Create data: note in High school for Jonathan: data &lt;- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10)) colnames(data) &lt;- c(&quot;math&quot; , &quot;english&quot; , &quot;biology&quot; , &quot;music&quot; , &quot;R-coding&quot;, &quot;data-viz&quot; , &quot;french&quot; , &quot;physic&quot;, &quot;statistic&quot;, &quot;sport&quot; ) # To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot! data &lt;- rbind(rep(20,10) , rep(0,10) , data) # Check your data, it has to look like this! # head(data) # The default radar chart radarchart(data) 4.5.2 Customization The radarchart() function offers several options to customize the chart: Polygon features: * pcol: line color * pfcol: fill color * plwd: line width Grid features: * cglcol: color of the net * cglty: net line type (see possibilities) * axislabcol: color of axis labels * caxislabels: vector of axis labels to display * cglwd: net width Labels: * vlcex: group labels size # Library library(fmsb) # Create data: note in High school for Jonathan: data &lt;- as.data.frame(matrix( sample( 2:20 , 10 , replace=T) , ncol=10)) colnames(data) &lt;- c(&quot;math&quot; , &quot;english&quot; , &quot;biology&quot; , &quot;music&quot; , &quot;R-coding&quot;, &quot;data-viz&quot; , &quot;french&quot; , &quot;physic&quot;, &quot;statistic&quot;, &quot;sport&quot; ) # To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each topic to show on the plot! data &lt;- rbind(rep(20,10) , rep(0,10) , data) # Check your data, it has to look like this! # head(data) # Custom the radarChart ! radarchart( data , axistype=1 , #custom polygon pcol=rgb(0.2,0.5,0.5,0.9) , pfcol=rgb(0.2,0.5,0.5,0.5) , plwd=4 , #custom the grid cglcol=&quot;grey&quot;, cglty=1, axislabcol=&quot;grey&quot;, caxislabels=seq(0,20,5), cglwd=0.8, #custom labels vlcex=0.8 ) 4.5.3 Several Groups It is acceptable to show several groups on the same spider chart, still using the fmsb package. The examples below will guide you through this process. But keep in mind that displaying more than 2 or 3 groups will result in a cluttered and unreadable figure. 4.5.3.1 Radar Chart with Several Individuals It is possible to display several groups on the same radar chart. This section describes how to draw it with R and the fmsb library. 4.5.3.2 Multi-Group Spider Chart - No Options If you’re using the fmsb package for the first time, have a look to the most basic radar chart first, it explains how the data must be formatted for the radarchart() function. If you have several individuals, the code looks pretty much the same as shown below. Note: Don’t show more that 2 or 3 groups on the same web chart, it would make it unreadable. Read more about radar chart caveats. # Library library(fmsb) # Create data: note in High school for several students set.seed(99) data &lt;- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5)) colnames(data) &lt;- c(&quot;math&quot; , &quot;english&quot; , &quot;biology&quot; , &quot;music&quot; , &quot;R-coding&quot; ) rownames(data) &lt;- paste(&quot;mister&quot; , letters[1:3] , sep=&quot;-&quot;) # To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot! data &lt;- rbind(rep(20,5) , rep(0,5) , data) # plot with default options: radarchart(data) 4.5.4 Customization The radarchart() function offers several options to customize the chart: Polygon features: * pcol: line color * pfcol: fill color * plwd: line width Grid features: * cglcol: color of the net * cglty: net line type (see possibilities) * axislabcol: color of axis labels * caxislabels: vector of axis labels to display * cglwd: net width Labels: * vlcex: group labels size # Library library(fmsb) # Create data: note in High school for several students set.seed(99) data &lt;- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5)) colnames(data) &lt;- c(&quot;math&quot; , &quot;english&quot; , &quot;biology&quot; , &quot;music&quot; , &quot;R-coding&quot; ) rownames(data) &lt;- paste(&quot;mister&quot; , letters[1:3] , sep=&quot;-&quot;) # To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot! data &lt;- rbind(rep(20,5) , rep(0,5) , data) # Color vector colors_border=c( rgb(0.2,0.5,0.5,0.9), rgb(0.8,0.2,0.5,0.9) , rgb(0.7,0.5,0.1,0.9) ) colors_in=c( rgb(0.2,0.5,0.5,0.4), rgb(0.8,0.2,0.5,0.4) , rgb(0.7,0.5,0.1,0.4) ) # plot with default options: radarchart( data , axistype=1 , #custom polygon pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1, #custom the grid cglcol=&quot;grey&quot;, cglty=1, axislabcol=&quot;grey&quot;, caxislabels=seq(0,20,5), cglwd=0.8, #custom labels vlcex=0.8 ) # Add a legend legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = &quot;n&quot;, pch=20 , col=colors_in , text.col = &quot;grey&quot;, cex=1.2, pt.cex=3) 4.5.5 About Axis Limits In the previous examples, axis limits were set in the 2 first rows of the input dataset. If you do not specify these values, the axis limits will be computed automatically, as shown below. # Library library(fmsb) # Create data: note in High school for several students set.seed(99) data &lt;- as.data.frame(matrix( sample( 0:20 , 15 , replace=F) , ncol=5)) colnames(data) &lt;- c(&quot;math&quot; , &quot;english&quot; , &quot;biology&quot; , &quot;music&quot; , &quot;R-coding&quot; ) rownames(data) &lt;- paste(&quot;mister&quot; , letters[1:3] , sep=&quot;-&quot;) # To use the fmsb package, I have to add 2 lines to the dataframe: the max and min of each variable to show on the plot! data &lt;- rbind(rep(20,5) , rep(0,5) , data) # Set graphic colors library(RColorBrewer) coul &lt;- brewer.pal(3, &quot;BuPu&quot;) colors_border &lt;- coul library(scales) colors_in &lt;- alpha(coul,0.3) # If you remove the 2 first lines, the function compute the max and min of each variable with the available data: radarchart( data[-c(1,2),] , axistype=0 , maxmin=F, #custom polygon pcol=colors_border , pfcol=colors_in , plwd=4 , plty=1, #custom the grid cglcol=&quot;grey&quot;, cglty=1, axislabcol=&quot;black&quot;, cglwd=0.8, #custom labels vlcex=0.8 ) # Add a legend legend(x=0.7, y=1, legend = rownames(data[-c(1,2),]), bty = &quot;n&quot;, pch=20 , col=colors_in , text.col = &quot;grey&quot;, cex=1.2, pt.cex=3) 4.5.5.1 Warning There is a lot of criticism going around spider chart. Before using it in a project, you probably want to learn more about it. 4.6 Wordcloud A wordcloud (or tag cloud) is a visual representation of text data. Tags are usually single words, and the importance of each tag is shown with font size or color. In R, two packages allow to create wordclouds: Wordcloud and Wordcloud2. 4.6.1 wordcloud2 The Wordcloud2 package by Chiffon Lang is probably the best way to build wordclouds with R. Note that it is a html widget. Thus the default output format is HTML. If you need a PNG or PDF, read this section. 4.6.2 The Wordcloud2 Library This section explains how to draw wordclouds with R and the wordcloud2 package. It provides several reproducible examples with explanation and R code. It is largely inspired from the very well done vignette. 4.6.2.1 Most Basic with wordcloud2() This is the most basic barplot you can build with the wordcloud2 library, using its wordcloud2() function. Note: data: is a data frame including word and freq in each column. size: is the font size, default is 1. # library library(wordcloud2) # have a look to the example dataset head(demoFreq) # Basic plot wordcloud2(data=demoFreq, size=1.6) 4.6.3 Color &amp; Background Color It is possible to change the word color using the color argument. You can provide a vector of color, or use random-dark or random-light. You can also customize the background color with backgroundColor. # library library(wordcloud2) # Gives a proposed palette wordcloud2(demoFreq, size=1.6, color=&#39;random-dark&#39;) # or a vector of colors. vector must be same length than input data wordcloud2(demoFreq, size=1.6, color=rep_len( c(&quot;green&quot;,&quot;blue&quot;), nrow(demoFreq) ) ) # Change the background color wordcloud2(demoFreq, size=1.6, color=&#39;random-light&#39;, backgroundColor=&quot;black&quot;) 4.6.4 Shape You can custom the wordcloud shape using the shape argument. Available shapes are: circle cardioid diamond triangle-forward triangle pentagon star You can also use an image like this one as a mask. # library library(wordcloud2) # Change the shape: wordcloud2(demoFreq, size = 0.7, shape = &#39;star&#39;) # Change the shape using your image wordcloud2(demoFreq, figPath = &quot;~/Desktop/R-graph-gallery/img/other/peaceAndLove.jpg&quot;, size = 1.5, color = &quot;skyblue&quot;, backgroundColor=&quot;black&quot;) 4.6.5 Word Orientation Rotate words with 3 arguments: minRotation, maxRotation and rotateRatio. # library library(wordcloud2) # wordcloud wordcloud2(demoFreq, size = 2.3, minRotation = -pi/6, maxRotation = -pi/6, rotateRatio = 1) 4.6.6 Chinese Version Chinese version. Comes from the doc. # library library(wordcloud2) # wordcloud wordcloud2(demoFreqC, size = 2, fontFamily = &quot;????????????&quot;, color = &quot;random-light&quot;, backgroundColor = &quot;grey&quot;) 4.6.7 Use Letter or Text as Shape The letterCloud function allows to use a letter or a word as a mask for the wordcloud: # library library(wordcloud2) letterCloud( demoFreq, word = &quot;R&quot;, color=&#39;random-light&#39; , backgroundColor=&quot;black&quot;) letterCloud( demoFreq, word = &quot;PEACE&quot;, color=&quot;white&quot;, backgroundColor=&quot;pink&quot;) 4.6.8 Export the Wordcloud Wordcloud2 is a html widget. It means your wordcloud will be output in a HTML format. You can export it as a png image using rstudio, or using the webshot library as follow: # load wordcloud2 library(wordcloud2) # install webshot library(webshot) webshot::install_phantomjs() # Make the graph my_graph &lt;- wordcloud2(demoFreq, size=1.5) # save it in html library(&quot;htmlwidgets&quot;) saveWidget(my_graph,&quot;tmp.html&quot;,selfcontained = F) # and in png or pdf webshot(&quot;tmp.html&quot;,&quot;fig_1.pdf&quot;, delay =5, vwidth = 480, vheight=480) 4.6.9 Basic wordcloud in R A wordcloud is a visual representation of text data. Learn how to build a basic wordcloud with R and the wordcloud library, with reproducible code provided. Wordclouds can be very useful to highlight the main topics in text. In R, it can be built using the wordcloud package as described below. Note: the wordcloud2 package allows more customizations and is extensively described here. Note: this online tool is a good non-programming alternative. #Charge the wordcloud library library(wordcloud) #Create a list of words (Random words concerning my work) a &lt;- c(&quot;Cereal&quot;,&quot;WSSMV&quot;,&quot;SBCMV&quot;,&quot;Experimentation&quot;,&quot;Talk&quot;,&quot;Conference&quot;,&quot;Writing&quot;, &quot;Publication&quot;,&quot;Analysis&quot;,&quot;Bioinformatics&quot;,&quot;Science&quot;,&quot;Statistics&quot;,&quot;Data&quot;, &quot;Programming&quot;,&quot;Wheat&quot;,&quot;Virus&quot;,&quot;Genotyping&quot;,&quot;Work&quot;,&quot;Fun&quot;,&quot;Surfing&quot;,&quot;R&quot;, &quot;R&quot;, &quot;Data-Viz&quot;,&quot;Python&quot;,&quot;Linux&quot;,&quot;Programming&quot;,&quot;Graph Gallery&quot;,&quot;Biologie&quot;, &quot;Resistance&quot;, &quot;Computing&quot;,&quot;Data-Science&quot;,&quot;Reproductible&quot;,&quot;GitHub&quot;,&quot;Script&quot;) #I give a frequency to each word of this list b &lt;- sample(seq(0,1,0.01) , length(a) , replace=TRUE) #The package will automatically make the wordcloud ! (I add a black background) par(bg=&quot;black&quot;) wordcloud(a , b , col=terrain.colors(length(a) , alpha=0.9) , rot.per=0.3 ) 4.6.10 Text mining and wordcloud with R This section describes a text mining project done with R, showing results as wordclouds. It was used for a document classification challenge. R code is provided. These graphics come from the blog of Benjamin Tovarcis. He answered a machine learning challenge at Hackerrank which consisted on document classification. The dataset consists of 5485 documents distributed among 8 different classes, perfect to learn text mining (with the tm package) and compute wordclouds (using the wordcloud package). If you need a more basic approach of wordcloud, have a look to the graph #15. Have a look to the blog of Benjamin for more explanations and thanks to him for his contribution ! # Packages library(reshape) library(tm) library(wordcloud) # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- # -- STEP 1 : GET THE DATA # A dataset with 5485 lines, each line has several words. dataset=read.delim(&quot;https://raw.githubusercontent.com/TATABOX42/text-mining-in-r/master/dataset.txt&quot;, header=FALSE) # The labels of each line of the dataset file dataset_labels &lt;- read.delim(&quot;https://raw.githubusercontent.com/TATABOX42/text-mining-in-r/master/labels.txt&quot;,header=FALSE) dataset_labels &lt;- dataset_labels[,1] dataset_labels_p &lt;- paste(&quot;class&quot;,dataset_labels,sep=&quot;_&quot;) unique_labels &lt;- unique(dataset_labels_p) # merge documents that match certain class into a list object dataset_s &lt;- sapply(unique_labels,function(label) list( dataset[dataset_labels_p %in% label,1] ) ) # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- # -- STEP2 : COMPUTE DOCUMENT CORPUS TO MAKE TEXT MINING # convert each list content into a corpus dataset_corpus &lt;- lapply(dataset_s, function(x) Corpus(VectorSource( toString(x) ))) # merge all documents into one single corpus dataset_corpus_all &lt;- dataset_corpus[[1]] for (i in 2:length(unique_labels)) { dataset_corpus_all &lt;- c(dataset_corpus_all,dataset_corpus[[i]]) } # remove punctuation, numbers and stopwords dataset_corpus_all &lt;- tm_map(dataset_corpus_all, removePunctuation) dataset_corpus_all &lt;- tm_map(dataset_corpus_all, removeNumbers) dataset_corpus_all &lt;- tm_map(dataset_corpus_all, function(x) removeWords(x,stopwords(&quot;english&quot;))) #remove some unintersting words words_to_remove &lt;- c(&quot;said&quot;,&quot;from&quot;,&quot;what&quot;,&quot;told&quot;,&quot;over&quot;,&quot;more&quot;,&quot;other&quot;,&quot;have&quot;,&quot;last&quot;,&quot;with&quot;,&quot;this&quot;,&quot;that&quot;,&quot;such&quot;,&quot;when&quot;,&quot;been&quot;,&quot;says&quot;,&quot;will&quot;,&quot;also&quot;,&quot;where&quot;,&quot;why&quot;,&quot;would&quot;,&quot;today&quot;) dataset_corpus_all &lt;- tm_map(dataset_corpus_all, removeWords, words_to_remove) # compute term matrix &amp; convert to matrix class --&gt; you get a table summarizing the occurence of each word in each class. document_tm &lt;- TermDocumentMatrix(dataset_corpus_all) document_tm_mat &lt;- as.matrix(document_tm) colnames(document_tm_mat) &lt;- unique_labels document_tm_clean &lt;- removeSparseTerms(document_tm, 0.8) document_tm_clean_mat &lt;- as.matrix(document_tm_clean) colnames(document_tm_clean_mat) &lt;- unique_labels # remove words in term matrix with length &lt; 4 index &lt;- as.logical(sapply(rownames(document_tm_clean_mat), function(x) (nchar(x)&gt;3) )) document_tm_clean_mat_s &lt;- document_tm_clean_mat[index,] # Have a look to the matrix you are going to use for wordcloud ! head(document_tm_clean_mat_s) # -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- # -- STEP 3 : make the graphics ! # Graph 1 : first top 500 discriminant words png(&quot;#102_1_comparison_cloud_top_500_words.png&quot;, width = 480, height = 480) comparison.cloud(document_tm_clean_mat_s, max.words=500, random.order=FALSE,c(4,0.4), title.size=1.4) dev.off() # Graph 2 : first top 2000 discriminant words png(&quot;#102_1_comparison_cloud_top_2000_words.png&quot;, width = 480, height = 480) comparison.cloud(document_tm_clean_mat_s,max.words=2000,random.order=FALSE,c(4,0.4), title.size=1.4) dev.off() # Graph 3: commonality word cloud : first top 2000 common words across classes png(&quot;#103_commonality_wordcloud.png&quot;, width = 480, height = 480) commonality.cloud(document_tm_clean_mat_s, max.words=2000, random.order=FALSE) dev.off() "],
["part.html", "Chapter 5 Part of a Whole 5.1 Circular Packing 5.2 Circular Stacked Barchart 5.3 Dendrogram 5.4 Donut Chart 5.5 Grouped and Stacked Barplot 5.6 Piechart 5.7 Treemap", " Chapter 5 Part of a Whole Figure 5.1: Barchart Small Multiple 5.1 Circular Packing Circular packing or circular treemap allows to visualize a hierarchic organization. It is an equivalent of a treemap or a dendrogram, where each node of the tree is represented as a circle and its sub-nodes are represented as circles inside of it. 5.1.0.1 One Level - packcircles and ggplot2 If your dataset has no hierarchy (it is basically just a few entities with attributed numeric values), the packcircles package is the best way to build a circular packing chart in R. The packages basically computes the position of each bubble, allowing to build the chart with ggplot2. 5.1.1 Basic Circle Packing with One Level This page aims to describe how to build a basic circle packing chart with only one level of hierarchy. It uses the packcircle package for circle position, and ggplot2 for drawing. This page aims to describe how to build a basic circle packing chart with only one level of hierarchy. Basically, you just represent each entity or individual of your dataset with a circle, its size depending on a provided value. It is like a barplot, but you use circle size instead of bar length. It is close to a bubble plot, but X and Y positions do not mean anything. It is a circle version of a treemap. Calculating the arrangement of dots is not a trivial problem. The packcircles library solves it and output coordinates of every points of the circle edges. Finally, ggplot2 allows to draw shapes thanks to geom_polygon(). # Libraries library(packcircles) library(ggplot2) # Create data data &lt;- data.frame(group=paste(&quot;Group&quot;, letters[1:20]), value=sample(seq(1,100),20)) # Generate the layout. This function return a dataframe with one line per bubble. # It gives its center (x and y) and its radius, proportional of the value packing &lt;- circleProgressiveLayout(data$value, sizetype=&#39;area&#39;) # We can add these packing information to the initial data frame data &lt;- cbind(data, packing) # Check that radius is proportional to value. We don&#39;t want a linear relationship, since it is the AREA that must be proportionnal to the value # plot(data$radius, data$value) # The next step is to go from one center + a radius to the coordinates of a circle that # is drawn by a multitude of straight lines. dat.gg &lt;- circleLayoutVertices(packing, npoints=50) # Make the plot ggplot() + # Make the bubbles geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = &quot;black&quot;, alpha = 0.6) + # Add text in the center of each bubble + control its size geom_text(data = data, aes(x, y, size=value, label = group)) + scale_size_continuous(range = c(1,4)) + # General theme: theme_void() + theme(legend.position=&quot;none&quot;) + coord_equal() 5.1.2 Circle Packing Customization with R This page is dedicated to one level circle packing customization with R. It notably shows how to use different color palettes and provides reproducible code snippets. 5.1.2.1 Using the Viridis Color Scale This chart follows the previous most basic circle packing section. It shows how to use the awesome viridis package to build color scales, a very good alternative to the usual colorBrewer. Note that magma is used here, but you could use the same code with inferno or viridis instead. # libraries library(packcircles) library(ggplot2) library(viridis) # Create data data &lt;- data.frame(group=paste(&quot;Group&quot;, letters[1:20]), value=sample(seq(1,100),20)) # Generate the layout. sizetype can be area or radius, following your preference on what to be proportional to value. packing &lt;- circleProgressiveLayout(data$value, sizetype=&#39;area&#39;) data &lt;- cbind(data, packing) dat.gg &lt;- circleLayoutVertices(packing, npoints=50) # Basic color customization ggplot() + geom_polygon(data = dat.gg, aes(x, y, group = id, fill=as.factor(id)), colour = &quot;black&quot;, alpha = 0.6) + scale_fill_manual(values = magma(nrow(data))) + geom_text(data = data, aes(x, y, size=value, label = group)) + scale_size_continuous(range = c(1,4)) + theme_void() + theme(legend.position=&quot;none&quot;) + coord_equal() 5.1.3 Map Color to Bubble Value It is a common task to make the bubble color being lighter or darker according to its value. This is possible by passing the focus variable to the dataframe that is read by ggplot2, and specifying it in tha aes(). # First I need to add the &#39;value&#39; of each group to dat.gg. # Here I repeat each value 51 times since I create my polygons with 50 lines dat.gg$value &lt;- rep(data$value, each=51) # Plot ggplot() + # Make the bubbles geom_polygon(data = dat.gg, aes(x, y, group = id, fill=value), colour = &quot;black&quot;, alpha = 0.6) + scale_fill_distiller(palette = &quot;BuPu&quot;, direction = 1 ) + # Add text in the center of each bubble + control its size geom_text(data = data, aes(x, y, size=value, label = group)) + scale_size_continuous(range = c(1,4)) + # General theme: theme_void() + theme(legend.position=&quot;none&quot;) + coord_equal() 5.1.4 Background Customization Change the background thanks to the theme() function and its plot.background() argument. ggplot() + # Make the bubbles geom_polygon(data = dat.gg, aes(x, y, group = id, fill=value), colour = &quot;grey&quot;, alpha = 0.6, size=.5) + scale_fill_distiller(palette = &quot;Spectral&quot;, direction = 1 ) + # Add text in the center of each bubble + control its size geom_label(data = data, aes(x, y, size=value, label = group)) + scale_size_continuous(range = c(1,4)) + # General theme: theme_void() + theme( legend.position=&quot;none&quot;, plot.background = element_rect(fill=&quot;black&quot;), plot.title = element_text(color=&quot;white&quot;) ) + coord_equal() + ggtitle(&quot;A custom circle packing with\\nblack background&quot;) 5.1.5 Space between Bubbles This chart is just a customization of the chart #305 which describes the basic process to make a one level circle packing chart. I personally like to add a bit of space between each circle. Basically, all you have to do is to reduce the radius size in your data once this one has been calculated. Just multiply it by a number under 0, and it will decrease the circle size. If you have been so far, you probably want to check the interactive version of the chart ! # libraries library(packcircles) library(ggplot2) library(viridis) # Create data data &lt;- data.frame(group=paste(&quot;Group&quot;, letters[1:20]), value=sample(seq(1,100),20)) # Generate the layout packing &lt;- circleProgressiveLayout(data$value, sizetype=&#39;area&#39;) packing$radius &lt;- 0.95*packing$radius data &lt;- cbind(data, packing) dat.gg &lt;- circleLayoutVertices(packing, npoints=50) # Plot ggplot() + geom_polygon(data = dat.gg, aes(x, y, group = id, fill=id), colour = &quot;black&quot;, alpha = 0.6) + scale_fill_viridis() + geom_text(data = data, aes(x, y, size=value, label = group), color=&quot;black&quot;) + theme_void() + theme(legend.position=&quot;none&quot;)+ coord_equal() 5.1.6 Interactive Circle Packing with R This section describes how to build an interactive circle packing chart with R and the ggiraph package. It allows to hover bubbles to get additionnal information. This chart follows sections #305 and #306 that explains how to build a static version of circle packing, and how to customize it. This interactive version is very close to the static one. It uses the ggiraph library to transform the ggplot2 code in something interactive. The steps are quite easy: First you need to prepare a column in the data frame with the text you want to display while hovering. Second, you need to change the geometries to use the interactive geometries of ggiraph. Check the code below: # libraries library(packcircles) library(ggplot2) library(viridis) library(ggiraph) # Create data data &lt;- data.frame(group=paste(&quot;Group_&quot;, sample(letters, 70, replace=T), #sample(letters, 70, replace=T), sample(letters, 70, replace=T), sep=&quot;&quot; ), #value=sample(seq(1,70),70)) # Add a column with the text you want to display for each bubble: data$text &lt;- paste(&quot;name: &quot;,data$group, &quot;\\n&quot;, &quot;value:&quot;, data$value, &quot;\\n&quot;, &quot;You can add a story here!&quot;) # Generate the layout packing &lt;- circleProgressiveLayout(data$value, sizetype=&#39;area&#39;) data &lt;- cbind(data, packing) dat.gg &lt;- circleLayoutVertices(packing, npoints=50) # Make the plot with a few differences compared to the static version: p &lt;- ggplot() + geom_polygon_interactive(data = dat.gg, aes(x, y, group = id, fill=id, #tooltip = data$text[id], data_id = id), colour = &quot;black&quot;, alpha = 0.6) + scale_fill_viridis() + geom_text(data = data, aes(x, y, label = gsub(&quot;Group_&quot;, &quot;&quot;, group)), #size=2, color=&quot;black&quot;) + theme_void() + theme(legend.position=&quot;none&quot;, plot.margin=unit(c(0,0,0,0),&quot;cm&quot;) ) + coord_equal() # Turn it interactive widg &lt;- ggiraph(ggobj = p, width_svg = 7, height_svg = 7) widg # save the widget library(htmlwidgets) saveWidget(widg, file=paste0( getwd(), &quot;/HtmlWidget/circular_packing_interactive.html&quot;)) 5.1.7 Basic Circle Packing with Several Hierarchy Level This page is dedicated to multi level circle packing. It explains how to build one using R and the ggraph package. 5.1.7.1 Several Levels - ggraph If your dataset is a hierarchy, it is time to switch to other tools. For static versions, the ggraph package is the best option. It follows the grammar of graphic and makes it a breeze to customize the appearance following the same logic than ggplot2. 5.1.8 Input &amp; Concept Circular packing represents a hierarchy: The biggest circle (origin of the hierarchy) contains several big circles (nodes of level 1), which contain smaller circle (level 2) and so on.. The last level is called leaf. The input data is a list of edges between nodes. It should look more or less like the table beside. Moreover, we usually accompany this table with another one that gives features for each node. 5.1.8.1 Most Basic Circular Packing with ggraph The ggraph package makes it a breeze to build a circular packing from an edge list. Here is an example based on the flare dataset proovded with the package. The first step is to transform the dataframe to a graph object thanks to the graph_from_data_frame() function of the igraph package. Then, ggraph offers the geom_node_circle() function that will build the chart. # Libraries library(ggraph) library(igraph) library(tidyverse) # We need a data frame giving a hierarchical structure. Let&#39;s consider the flare dataset: edges &lt;- flare$edges # Usually we associate another dataset that give information about each node of the dataset: vertices &lt;- flare$vertices # Then we have to make a &#39;graph&#39; object using the igraph library: mygraph &lt;- graph_from_data_frame( edges, vertices=vertices ) # Make the plot ggraph(mygraph, layout = &#39;circlepack&#39;) + geom_node_circle() + theme_void() 5.1.9 Switching to another Chart Type Note that the ggraph library allows to easily go from one type of representation to another. Indeed several types of representation are suitable for hierarchical data: dendrogram (can be circular), treemap, sunburst diagram or network! library(ggraph) ggraph(mygraph, layout=&#39;dendrogram&#39;, circular=TRUE) + geom_edge_diagonal() + theme_void() + theme(legend.position=&quot;none&quot;) ggraph(mygraph, layout=&#39;dendrogram&#39;, circular=FALSE) + geom_edge_diagonal() + theme_void() + theme(legend.position=&quot;none&quot;) ggraph(mygraph, &#39;treemap&#39;, weight = size) + geom_node_tile(aes(fill = depth), size = 0.25) + theme_void() + theme(legend.position=&quot;none&quot;) ggraph(mygraph, &#39;partition&#39;, circular = TRUE) + geom_node_arc_bar(aes(fill = depth), size = 0.25) + theme_void() + theme(legend.position=&quot;none&quot;) ggraph(mygraph) + geom_edge_link() + geom_node_point() + theme_void() + theme(legend.position=&quot;none&quot;) 5.1.10 Customized Circle Packing with R and ggraph This page follows the previous introduction that explained the basis of circle packing with R and the ggraph library. It describes how to customize color, size, labels and more. 5.1.10.1 Bubble Size Proportionnal to a Variable Mapping the bubble size to a numeric variable allows to add an additionnal layer of information to the chart. Here, the vertices data frame has a size column that is used for the bubble size. Basically, it just needs to be passed to the weight argument of the ggraph() function. # Libraries library(ggraph) library(igraph) library(tidyverse) library(viridis) # We need a data frame giving a hierarchical structure. Let&#39;s consider the flare dataset: edges &lt;- flare$edges vertices &lt;- flare$vertices mygraph &lt;- graph_from_data_frame(edges, vertices=vertices) # Control the size of each circle: (use the size column of the vertices data frame) ggraph(mygraph, layout = &#39;circlepack&#39;, weight=size) + geom_node_circle() + theme_void() 5.1.11 Map Color to Hierarchy Depth Adding color to circular packing definitely makes sense. The first option is to map color to depth: the origin of every node will have a color, the level 1 another one, and so on.. As usual, you can play with the colour palette to fit your needs. Here are 2 examples with the viridis and the RColorBrewer palettes: # Left: color depends of depth p &lt;- ggraph(mygraph, layout = &#39;circlepack&#39;, weight=size) + geom_node_circle(aes(fill = depth)) + theme_void() + theme(legend.position=&quot;FALSE&quot;) p # Adjust color palette: viridis p + scale_fill_viridis() # Adjust color palette: colorBrewer p + scale_fill_distiller(palette = &quot;RdPu&quot;) 5.1.12 Map Color to Hierarchy Depth To add more insight to the plot, we often need to add labels to the circles. However you can do it only if the number of circle is not to big. Note that you can use geom_node_text (left) or geom_node_label to annotate leaves of the circle packing: # Create a subset of the dataset (I remove 1 level) edges &lt;- flare$edges %&gt;% filter(to %in% from) %&gt;% droplevels() vertices &lt;- flare$vertices %&gt;% filter(name %in% c(edges$from, edges$to)) %&gt;% droplevels() vertices$size &lt;- runif(nrow(vertices)) # Rebuild the graph object mygraph &lt;- graph_from_data_frame( edges, vertices=vertices ) # left ggraph(mygraph, layout = &#39;circlepack&#39;, weight=size ) + geom_node_circle(aes(fill = depth)) + geom_node_text( aes(label=shortName, filter=leaf, fill=depth, size=size)) + theme_void() + theme(legend.position=&quot;FALSE&quot;) + scale_fill_viridis() # Right ggraph(mygraph, layout = &#39;circlepack&#39;, weight=size ) + geom_node_circle(aes(fill = depth)) + geom_node_label( aes(label=shortName, filter=leaf, size=size)) + theme_void() + theme(legend.position=&quot;FALSE&quot;) + scale_fill_viridis() 5.1.13 Circular Packing with Hidden First Level of Hierarchy This section shows how to build a circular packing with R and the ggraph package, and how to remove the main bubble that packs all the others. 5.1.14 Hiding the First Level for Better Styling I personally do not like to display the big circle that surrounds the whole chart (level 0, origin). This circle does not provide any information, and the chart looks better without it in my opinion. To get rid of it, just specify a color equal to the background color in the scale_fill_manual() and scale_color_manual() functions. Following the same idea, you can get rid of as many levels of hierarchy as you like. # Libraries library(ggraph) library(igraph) library(tidyverse) library(viridis) # We need a data frame giving a hierarchical structure. Let&#39;s consider the flare dataset: edges=flare$edges vertices = flare$vertices mygraph &lt;- graph_from_data_frame( edges, vertices=vertices ) # Hide the first level (right) ggraph(mygraph, layout = &#39;circlepack&#39;, weight=&quot;size&quot;) + geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth) )) + scale_fill_manual(values=c(&quot;0&quot; = &quot;white&quot;, &quot;1&quot; = viridis(4)[1], &quot;2&quot; = viridis(4)[2], &quot;3&quot; = viridis(4)[3], &quot;4&quot;=viridis(4)[4])) + scale_color_manual( values=c(&quot;0&quot; = &quot;white&quot;, &quot;1&quot; = &quot;black&quot;, &quot;2&quot; = &quot;black&quot;, &quot;3&quot; = &quot;black&quot;, &quot;4&quot;=&quot;black&quot;) ) + theme_void() + theme(legend.position=&quot;FALSE&quot;) # Second one: hide 2 first levels ggraph(mygraph, layout = &#39;circlepack&#39;, weight=&quot;size&quot;) + geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth) )) + scale_fill_manual(values=c(&quot;0&quot; = &quot;white&quot;, &quot;1&quot; = &quot;white&quot;, &quot;2&quot; = magma(4)[2], &quot;3&quot; = magma(4)[3], &quot;4&quot;=magma(4)[4])) + scale_color_manual( values=c(&quot;0&quot; = &quot;white&quot;, &quot;1&quot; = &quot;white&quot;, &quot;2&quot; = &quot;black&quot;, &quot;3&quot; = &quot;black&quot;, &quot;4&quot;=&quot;black&quot;) ) + theme_void() + theme(legend.position=&quot;FALSE&quot;) 5.1.15 Add Labels to a Specific Level of the Hierarchy A related problem consists to add labels for one specific level of hierarchy only. For instance, if you want to display the names of group of level2, but not of level 3 to avoid cluttering the chart. To solve this issue, the trickiest part is to determine the level of each node in the edge list data frame. Fortunately, the data.tree library is here to help with its FromDataFrameNetwork() function. It allows to isolate the level of each node, making it a breeze to select the labels to display. # Add the data.tree library library(data.tree) # Rebuild the data edges &lt;-flare$edges vertices &lt;- flare$vertices # Transform it in a &#39;tree&#39; format tree &lt;- FromDataFrameNetwork(edges) # Then I can easily get the level of each node, and add it to the initial data frame: mylevels &lt;- data.frame( name=tree$Get(&#39;name&#39;), level=tree$Get(&quot;level&quot;) ) vertices &lt;- vertices %&gt;% left_join(., mylevels, by=c(&quot;name&quot;=&quot;name&quot;)) # Now we can add label for level1 and 2 only for example: vertices &lt;- vertices %&gt;% mutate(new_label=ifelse(level==2, shortName, NA)) mygraph &lt;- graph_from_data_frame( edges, vertices=vertices ) # Make the graph ggraph(mygraph, layout = &#39;circlepack&#39;, weight=&quot;size&quot;) + geom_node_circle(aes(fill = as.factor(depth), color = as.factor(depth) )) + scale_fill_manual(values=c(&quot;0&quot; = &quot;white&quot;, &quot;1&quot; = viridis(4)[1], &quot;2&quot; = viridis(4)[2], &quot;3&quot; = viridis(4)[3], &quot;4&quot;=viridis(4)[4])) + scale_color_manual( values=c(&quot;0&quot; = &quot;white&quot;, &quot;1&quot; = &quot;black&quot;, &quot;2&quot; = &quot;black&quot;, &quot;3&quot; = &quot;black&quot;, &quot;4&quot;=&quot;black&quot;) ) + geom_node_label( aes(label=new_label), size=4) + theme_void() + theme(legend.position=&quot;FALSE&quot;, plot.margin = unit(rep(0,4), &quot;cm&quot;)) 5.1.16 Zoomable Circle Packing with R and circlePacker The circlePacker package allows to build interactive and zoomable circle packing charts. This section explains how to use the package with different kind of input datasets. The circlepackeR package allows to build interactive circle packing. Click on a group, and a smooth zoom will reveal the subgroups behind it. Circle packing is a visualization method for hierarchical data. This kind of data can be stored in 2 main ways: Nested data frame Edge list 5.1.16.1 Circular Packing fom Nested Data Frame In a nested data frame, each line represents a leaf of the organization. Each column represents a level of the organization. This data format will require the data.tree library to reformat the input dataset into something readable by circlepackeR. # Circlepacker package library(circlepackeR) # devtools::install_github(&quot;jeromefroe/circlepackeR&quot;) # If needed # create a nested data frame giving the info of a nested dataset: data &lt;- data.frame( root=rep(&quot;root&quot;, 15), group=c(rep(&quot;group A&quot;,5), rep(&quot;group B&quot;,5), rep(&quot;group C&quot;,5)), subgroup= rep(letters[1:5], each=3), subsubgroup=rep(letters[1:3], 5), value=sample(seq(1:15), 15) ) # Change the format. This use the data.tree library. This library needs a column that looks like root/group/subgroup/..., so I build it library(data.tree) data$pathString &lt;- paste(&quot;world&quot;, data$group, data$subgroup, data$subsubgroup, sep = &quot;/&quot;) population &lt;- as.Node(data) # Make the plot #circlepackeR(population, size = &quot;value&quot;) # You can custom the minimum and maximum value of the color range. p &lt;- circlepackeR(population, size = &quot;value&quot;, color_min = &quot;hsl(56,80%,80%)&quot;, color_max = &quot;hsl(341,30%,40%)&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/circular_packing_circlepackeR2.html&quot;)) 5.1.17 Circular Packing fom Edge List The edge list format has at least 2 columns. It describes all the edges of the data. This format is widely spread. In this example, we just convert it to a nested data frame before plotting it as seen above. # Circlepacker package library(circlepackeR) # devtools::install_github(&quot;jeromefroe/circlepackeR&quot;) # If needed # Let&#39;s use the &#39;flare dataset&#39; (stored in the ggraph library) library(ggraph) data_edge &lt;- flare$edges data_edge$from &lt;- gsub(&quot;.*\\\\.&quot;,&quot;&quot;,data_edge$from) data_edge$to &lt;- gsub(&quot;.*\\\\.&quot;,&quot;&quot;,data_edge$to) head(data_edge) # This is an edge list # We need to convert it to a nested data frame. the data.tree library is our best friend for that: library(data.tree) data_tree &lt;- FromDataFrameNetwork(data_edge) data_nested &lt;- ToDataFrameTree(data_tree, level1 = function(x) x$path[2], level2 = function(x) x$path[3], level3 = function(x) x$path[4], level4 = function(x) x$path[5])[-1,-1] data_nested &lt;- na.omit(data_nested) # Now we can plot it as seen before! data_nested$pathString &lt;- paste(&quot;roots&quot;, data_nested$level1, data_nested$level2, data_nested$level3, data_nested$level4, sep = &quot;/&quot;) data_nested$value=1 data_Node &lt;- as.Node(data_nested) p &lt;- circlepackeR(data_Node, size = &quot;value&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/circular_packing_circlepackeR1.html&quot;)) 5.2 Circular Stacked Barchart A barchart can look pretty good using a circular layout, even if there are some caveats associated. If it interests you, visit the circular barchart section. 5.2.1 Circular Stacked Barplot A circular barplot is a barplot where bars are displayed along a circle instead of a line. This page aims to teach you how to make a grouped and stacked circular barplot with R and ggplot2. A circular barplot is a barplot where bars are displayed along a circle instead of a line. This page aims to teach you how to make a grouped and stacked circular barplot. I highly recommend to visit graph #295, #296 and #297 Before diving into this code, which is a bit rough. I tried to add as many comments as possible in the code, and thus hope that the method is understandable. If it is not, please comment and ask supplementary explanations. You first need to understand how to make a stacked barplot with ggplot2. Then understand how to properly add labels, calculating the good angles, flipping them if necessary, and adjusting their position. The trickiest part is probably the one allowing to add space between each group. All these steps are described one by one in the circular barchart section. # library library(tidyverse) library(viridis) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value1=sample( seq(10,100), 60, replace=T), value2=sample( seq(10,100), 60, replace=T), value3=sample( seq(10,100), 60, replace=T) ) # Transform data in a tidy format (long format) data &lt;- data %&gt;% gather(key = &quot;observation&quot;, value=&quot;value&quot;, -c(1,2)) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar &lt;- 2 nObsType &lt;- nlevels(as.factor(data$observation)) to_add &lt;- data.frame( matrix(NA, empty_bar*nlevels(data$group)*nObsType, ncol(data)) ) colnames(to_add) &lt;- colnames(data) to_add$group &lt;- rep(levels(data$group), each=empty_bar*nObsType ) data &lt;- rbind(data, to_add) data &lt;- data %&gt;% arrange(group, individual) data$id &lt;- rep( seq(1, nrow(data)/nObsType) , each=nObsType) # Get the name and the y position of each label label_data &lt;- data %&gt;% group_by(id, individual) %&gt;% summarize(tot=sum(value)) number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # prepare a data frame for base lines base_data &lt;- data %&gt;% group_by(group) %&gt;% summarize(start=min(id), end=max(id) - empty_bar) %&gt;% rowwise() %&gt;% mutate(title=mean(c(start, end))) # prepare a data frame for grid (scales) grid_data &lt;- base_data grid_data$end &lt;- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1 grid_data$start &lt;- grid_data$start - 1 grid_data &lt;- grid_data[-1,] # Make the plot p &lt;- ggplot(data) + # Add the stacked bar geom_bar(aes(x=as.factor(id), y=value, fill=observation), stat=&quot;identity&quot;, alpha=0.5) + scale_fill_viridis(discrete=TRUE) + # Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it. geom_segment(data=grid_data, aes(x = end, y = 0, xend = start, yend = 0), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 50, xend = start, yend = 50), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 100, xend = start, yend = 100), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 150, xend = start, yend = 150), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 200, xend = start, yend = 200), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + # Add text showing the value of each 100/75/50/25 lines ggplot2::annotate(&quot;text&quot;, x = rep(max(data$id),5), y = c(0, 50, 100, 150, 200), label = c(&quot;0&quot;, &quot;50&quot;, &quot;100&quot;, &quot;150&quot;, &quot;200&quot;) , color=&quot;grey&quot;, size=6 , angle=0, fontface=&quot;bold&quot;, hjust=1) + ylim(-150,max(label_data$tot, na.rm=T)) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + # Add labels on top of each bar geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) + # Add base line information geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = &quot;black&quot;, alpha=0.8, size=0.6 , inherit.aes = FALSE ) + geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = &quot;black&quot;, alpha=0.8, size=4, fontface=&quot;bold&quot;, inherit.aes = FALSE) p # Save at png #ggsave(p, file=&quot;output.png&quot;, width=10, height=10) 5.2.2 Stacked Barplot for Evolution Stacked area chart are sometimes used to study an evolution using each group on the X axis as a timestamp. There are many alternatives to that, like streamgraph or area chart: 5.2.3 Base R A stacked area chart showing the evolution of a few baby names in the US. Zoom on a specific time frame through brushing. Highlight a specific group by hovering the legend. Double click to unzoom 5.2.4 Stacking Barplot # Libraries library(tidyverse) library(babynames) library(streamgraph) library(viridis) library(hrbrthemes) library(plotly) # Load dataset from github data &lt;- babynames %&gt;% filter(name %in% c(&quot;Amanda&quot;, &quot;Jessica&quot;, &quot;Patricia&quot;, &quot;Deborah&quot;, &quot;Dorothy&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot p &lt;- data %&gt;% ggplot( aes(x=year, y=n, fill=name, text=name)) + geom_area( ) + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) ggplotly(p, tooltip=&quot;text&quot;) 5.2.5 Three Periods Stacked Barplot # create dummy data don &lt;- data.frame( x = rep(seq(2000,2005), 3), value = c( 75, 73, 68, 57, 36, 0, 15, 16, 17, 18, 19, 20, 10, 11, 15, 25, 45, 80), group = rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each=6) ) #plot don %&gt;% ggplot( aes(x=x, y=value, fill=group)) + geom_area( ) + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) 5.2.6 Base R A stacked area chart showing the evolution of a few baby names in the US. Zoom on a specific time frame through brushing. Highlight a specific group by hovering the legend. Double click to unzoom. 5.2.7 Grouped, Stacked and Percent Stacked Barplot in Base R This section explains how to build grouped, stacked and percent stacked barplot with base R. It provides a reproducible example with code for each type. 5.2.7.1 Grouped Barchart A grouped barplot display a numeric value for a set of entities split in groups and subgroups. Before trying to build one, check how to make a basic barplot with R and ggplot2. A few explanation about the code below: Input dataset must be a numeric matrix. Each group is a column. Each subgroup is a row. The barplot() function will recognize this format, and automatically perform the grouping for you. The beside allows to toggle between the grouped and the stacked barchart. # Create data set.seed(112) data &lt;- matrix(sample(1:30,15) , nrow=3) colnames(data) &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) rownames(data) &lt;- c(&quot;var1&quot;,&quot;var2&quot;,&quot;var3&quot;) # Grouped barplot barplot(data, col=colors()[c(23,89,12)] , border=&quot;white&quot;, font.axis=2, beside=T, legend=rownames(data), xlab=&quot;group&quot;, font.lab=2) 5.2.8 Grouped Stacked Barchart A stacked barplot is very similar to the grouped barplot above. The subgroups are just displayed on top of each other, not beside. The stacked barchart is the default option of the barplot() function in base R, so you don’t need to use the beside argument. # Create data set.seed(112) data &lt;- matrix(sample(1:30,15) , nrow=3) colnames(data) &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) rownames(data) &lt;- c(&quot;var1&quot;,&quot;var2&quot;,&quot;var3&quot;) # Get the stacked barplot barplot(data, col=colors()[c(23,89,12)] , border=&quot;white&quot;, space=0.04, font.axis=2, xlab=&quot;group&quot;) 5.2.9 Percent Stacked Barplot A percent stacked barchart displays the evolution of the proportion of each subgroup. The sum is always equal to 100%. In base R, you have to manually compute the percentages, using the apply() function. This is more straightforward using ggplot2. Note that here, a custom color palette is used, thanks to the RColorBrewer package. # Create data set.seed(1124) data &lt;- matrix(sample(1:30,15) , nrow=3) colnames(data) &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) rownames(data) &lt;- c(&quot;var1&quot;,&quot;var2&quot;,&quot;var3&quot;) # create color palette: library(RColorBrewer) coul &lt;- brewer.pal(3, &quot;Pastel2&quot;) # Transform this data in % data_percentage &lt;- apply(data, 2, function(x){x*100/sum(x,na.rm=T)}) # Make a stacked barplot--&gt; it will be in %! barplot(data_percentage, col=coul , border=&quot;white&quot;, xlab=&quot;group&quot;) 5.2.10 Barplot for likert Type Items This section shows how to use the likert R package. It allows to build 0-centered stacked barplot to study likert type items. Likert is an R package designed to help analyzing and visualizing Likert type items. It has been developped by Jason Bryer and Kim Speerschneider. This barplot comes from the demo page and has been sent by Carlos Ortega. It allows to analyse the reading attitudes from a panel of people. Each line represents a question. The barplot explains the feeling of people concerning this question. # library library(likert) # Use a provided dataset data(pisaitems) items28 &lt;- pisaitems[, substr(names(pisaitems), 1, 5) == &quot;ST24Q&quot;] # Build plot p &lt;- likert(items28) plot(p) 5.3 Dendrogram A dendrogram (or tree diagram) is a network structure. It is constituted of a root node that gives birth to several nodes connected by edges or branches. The last nodes of the hierarchy are called leaves. Many options are available to build one with R. This sections aims to lead you toward the best strategy for your data. 5.3.0.1 Two Types of Dendrogram Dendrograms can be built from: Hierarchical dataset: Think about a CEO managing team leads managing employees and so on. Clustering result: clustering divides a set of individuals in group according to their similarity. Its result can be visualized as a tree. 5.3.1 Dendrogram fromn Hierarchical Data The ggraph package is the best option to build a dendrogram from hierarchical data with R. It is based on the grammar of graphic and thus follows the same logic that ggplot2. 5.3.2 Dendrogram from Edge List This section aims to describe how to make a basic dendrogram representing hierarchical data with the ggraph library. Two input formats are considered: edge list - 2 columns, one row is on connection. nested data frame - one row is one path from root to leaf. As many columns as the number of levels in the hierarchy. Please visit this page to learn how to custom these dendrograms. If you want to create a dendrogram from clustering result, visit the dendrogram section of the gallery. Edge list is the most convenient format to use ggraph. Follow those steps: Transform the input dataframe to a graph object using the graph_from_data_frame() function from the igraph library. Use the dendrogram layout of ggraph with layout = 'dendrogram'. # libraries library(ggraph) library(igraph) library(tidyverse) # create an edge list data frame giving the hierarchical structure of your individuals d1 &lt;- data.frame(from=&quot;origin&quot;, to=paste(&quot;group&quot;, seq(1,5), sep=&quot;&quot;)) d2 &lt;- data.frame(from=rep(d1$to, each=5), to=paste(&quot;subgroup&quot;, seq(1,25), sep=&quot;_&quot;)) edges &lt;- rbind(d1, d2) # Create a graph object mygraph &lt;- graph_from_data_frame( edges ) # Basic tree ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = FALSE) + geom_edge_diagonal() + geom_node_point() + theme_void() 5.3.3 Dendrogram from a Nested Dataframe Another common format is the nested data frame. The code below shows how to easily transform it into a nested data frame. Once it is done, just apply the code described above once more. # libraries library(ggraph) library(igraph) library(tidyverse) # create a data frame data &lt;- data.frame( level1=&quot;CEO&quot;, level2=c( rep(&quot;boss1&quot;,4), rep(&quot;boss2&quot;,4)), level3=paste0(&quot;mister_&quot;, letters[1:8]) ) # transform it to a edge list! edges_level1_2 &lt;- data %&gt;% select(level1, level2) %&gt;% unique %&gt;% rename(from=level1, to=level2) edges_level2_3 &lt;- data %&gt;% select(level2, level3) %&gt;% unique %&gt;% rename(from=level2, to=level3) edge_list=rbind(edges_level1_2, edges_level2_3) # Now we can plot that mygraph &lt;- graph_from_data_frame( edge_list ) ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = FALSE) + geom_edge_diagonal() + geom_node_point() + theme_void() mygraph 5.3.4 Dendrogram Customization with R and ggraph This section follows the previous introduction to ggraph and dendrogram. It shows how to customize the dendrogram: layout, edge style, node features and more. Start by creating a dataset and a graph object using the igraph package. # Libraries library(ggraph) library(igraph) library(tidyverse) theme_set(theme_void()) # data: edge list d1 &lt;- data.frame(from=&quot;origin&quot;, to=paste(&quot;group&quot;, seq(1,7), sep=&quot;&quot;)) d2 &lt;- data.frame(from=rep(d1$to, each=7), to=paste(&quot;subgroup&quot;, seq(1,49), sep=&quot;_&quot;)) edges &lt;- rbind(d1, d2) # We can add a second data frame with information for each node! name &lt;- unique(c(as.character(edges$from), as.character(edges$to))) vertices &lt;- data.frame( name=name, group=c( rep(NA,8) , rep( paste(&quot;group&quot;, seq(1,7), sep=&quot;&quot;), each=7)), cluster=sample(letters[1:4], length(name), replace=T), value=sample(seq(10,30), length(name), replace=T) ) # Create a graph object mygraph &lt;- graph_from_data_frame( edges, vertices=vertices) 5.3.5 Circular or Linear layout First of all, you can use a linear or a circular representation using the circular option thanks to the layout argument of ggraph. Note: a customized version of the circular dendrogram is available here, with more node features and labels. # Left ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = FALSE) + geom_edge_diagonal() # Right ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_edge_diagonal() 5.3.6 Edge Style Then you can choose between different styles for your edges. The ggraph package comes with 2 main functions: geom_edge_link() and geom_edge_diagonal(). Note that the most usual elbow representation is not implemented for hierarchical data yet. # Left ggraph(mygraph, layout = &#39;dendrogram&#39;) + geom_edge_link() # Right ggraph(mygraph, layout = &#39;dendrogram&#39;) + geom_edge_diagonal() 5.3.7 Labels and Nodes You probably want to add labels to give more insight to your tree. And eventually nodes. This can be done using the geom_node_text and geom_node_point respectively. Note: the label addition is a bit more tricky for circular dendrogram, a solution is suggested in graph #339. # Left ggraph(mygraph, layout = &#39;dendrogram&#39;) + geom_edge_diagonal() + geom_node_text(aes( label=name, filter=leaf) , angle=90 , hjust=1, nudge_y = -0.01) + ylim(-.4, NA) # Right ggraph(mygraph, layout = &#39;dendrogram&#39;) + geom_edge_diagonal() + geom_node_text(aes( label=name, filter=leaf) , angle=90 , hjust=1, nudge_y = -0.04) + geom_node_point(aes(filter=leaf) , alpha=0.6) + ylim(-.5, NA) 5.3.8 Customize Aesthetics It is a common task to add color or shapes to your dendrogram. It allows to show more clearly the organization of the dataset. ggraph works the same way as ggplot2. In the aesthetics part of each component, you can use a column of your initial data frame to be mapped to a shape, a color, a size or other.. ggraph(mygraph, layout = &#39;dendrogram&#39;) + geom_edge_diagonal() + geom_node_text(aes( label=name, filter=leaf, color=group) , angle=90 , hjust=1, nudge_y=-0.1) + geom_node_point(aes(filter=leaf, size=value, color=group) , alpha=0.6) + ylim(-.6, NA) + theme(legend.position=&quot;none&quot;) 5.3.9 Circular Dendrogram with R and ggraph This section shows how to build a customized circular dendrogram using R and the ggraph package. It provides explanation and reproducible code. The circular dendrogram of the ggraph library deserves its own page because it can be a bit tricky to adjust the labels. Indeed they need to have a good angle, be flipped upside down on the left part of the chart, and their alignment needs to be adjusted as well. The following piece of code should allow you to display them correctly as shown beside. Note that the graph #334 gives the basis of dendrogram with ggraph, and that graph #335 presents a few possible customizations. # Libraries library(ggraph) library(igraph) library(tidyverse) library(RColorBrewer) # create a data frame giving the hierarchical structure of your individuals d1=data.frame(from=&quot;origin&quot;, to=paste(&quot;group&quot;, seq(1,10), sep=&quot;&quot;)) d2=data.frame(from=rep(d1$to, each=10), to=paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;)) edges=rbind(d1, d2) # create a vertices data.frame. One line per object of our hierarchy vertices = data.frame( name = unique(c(as.character(edges$from), as.character(edges$to))) , value = runif(111) ) # Let&#39;s add a column with the group of each name. It will be useful later to color points vertices$group = edges$from[ match( vertices$name, edges$to ) ] #Let&#39;s add information concerning the label we are going to add: angle, horizontal adjustement and potential flip #calculate the ANGLE of the labels vertices$id=NA myleaves=which(is.na( match(vertices$name, edges$from) )) nleaves=length(myleaves) vertices$id[ myleaves ] = seq(1:nleaves) vertices$angle= 90 - 360 * vertices$id / nleaves # calculate the alignment of labels: right or left # If I am on the left part of the plot, my labels have currently an angle &lt; -90 vertices$hjust&lt;-ifelse( vertices$angle &lt; -90, 1, 0) # flip angle BY to make them readable vertices$angle&lt;-ifelse(vertices$angle &lt; -90, vertices$angle+180, vertices$angle) # Create a graph object mygraph &lt;- graph_from_data_frame( edges, vertices=vertices ) # Make the plot ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_edge_diagonal(colour=&quot;grey&quot;) + scale_edge_colour_distiller(palette = &quot;RdPu&quot;) + geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2.7, alpha=1) + geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) + scale_colour_manual(values= rep( brewer.pal(9,&quot;Paired&quot;) , 30)) + scale_size_continuous( range = c(0.1,10) ) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(c(0,0,0,0),&quot;cm&quot;), ) + expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3)) 5.3.10 Interactive Dendrogram with R This section describes how to use the CollapsibleTree package to build an interactive tree diagram. Explanation and reproducible code provided. The collapsibletree package is the best option to build interactive dendrogram with R. The input must be a data frame that stores the hierarchical information. Basically, each row describes a complete path from the root to the leaf. In this example, the warpbreaks dataset has 3 columns: wool, tension and breaks. # Load library # install.packages(&quot;collapsibleTree&quot;) library(collapsibleTree) # input data must be a nested data frame: head(warpbreaks) # Represent this tree: p &lt;- collapsibleTree( warpbreaks, c(&quot;wool&quot;, &quot;tension&quot;, &quot;breaks&quot;)) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dendrogram_interactive.html&quot;)) 5.3.11 Dendrogram from Clustering Result Hierarchical clustering is a common task in data science and can be performed with the hclust() function in R. The following examples will guide you through your process, showing how to prepare the data, how to run the clustering and how to build an appropriate chart to visualize its result. 5.3.11.1 Most Basic Dendrogram with R Input dataset is a matrix where each row is a sample, and each column is a variable. Keep in mind you can transpose a matrix using the t() function if needed. Clustering is performed on a square matrix (sample x sample) that provides the distance between samples. It can be computed using the dist() or the cor() function depending on the question your asking The hclust() function is used to perform the hierarchical clustering Its output can be visualized directly with the plot() function. See possible customization. # Dataset data &lt;- matrix( sample(seq(1,2000),200), ncol = 10 ) rownames(data) &lt;- paste0(&quot;sample_&quot; , seq(1,20)) colnames(data) &lt;- paste0(&quot;variable&quot;,seq(1,10)) # Euclidean distance dist &lt;- dist(data[ , c(4:8)] , diag=TRUE) # Hierarchical Clustering with hclust hc &lt;- hclust(dist) # Plot the result plot(hc) 5.3.11.2 Hierarchical clustering principle: Take distances between objects. Seek the smallest distance between 2 objects. Aggregate the 2 objects in a cluster. Replace them with their barycenter. Again until having only one cluster containing every points. There are several ways to calculate the distance between 2 clusters ( using the max between 2 points of the clusters, or the mean, or the min, or ward (default) ). 5.3.12 Zoom on a Group It is possible to zoom on a specific part of the tree. Select the group of interest using the [[..]] operator: # store the dedrogram in an object dhc &lt;- as.dendrogram(hc) # set the margin par(mar=c(4,4,2,2)) # Plot the Second group plot(dhc[[2]] , main= &quot;zoom on a part of the dendrogram&quot;) 5.3.13 Dendrogram with Color and Legend in R This section describes how to apply a clustering method to a dataset and visualize the result as a dendrogram with colors and legends. This is a upgrade of the basic dendrogram presented in the figure #29. Please refer to this previous section to understand how a dendrogram works. In this exemple, we just show how to add specific colors to leaves and sample name. It allows to check if the expected groups are indeed found after clustering. # Build dataset (just copy and paste, this is NOT interesting) sample &lt;- paste(rep(&quot;sample_&quot;,24) , seq(1,24) , sep=&quot;&quot;) specie &lt;- c(rep(&quot;dicoccoides&quot; , 8) , rep(&quot;dicoccum&quot; , 8) , rep(&quot;durum&quot; , 8)) treatment &lt;- rep(c(rep(&quot;High&quot;,4 ) , rep(&quot;Low&quot;,4)),3) data &lt;- data.frame(sample,specie,treatment) for (i in seq(1:5)){ gene=sample(c(1:40) , 24 ) data=cbind(data , gene) colnames(data)[ncol(data)]=paste(&quot;gene_&quot;,i,sep=&quot;&quot;) } data[data$treatment==&quot;High&quot; , c(4:8)]=data[data$treatment==&quot;High&quot; , c(4:8)]+100 data[data$specie==&quot;durum&quot; , c(4:8)]=data[data$specie==&quot;durum&quot; , c(4:8)]-30 rownames(data) &lt;- data[,1] # Have a look to the dataset # head(data) # Compute Euclidean distance between samples dist=dist(data[ , c(4:8)] , diag=TRUE) # Perfor clustering with hclust hc &lt;- hclust(dist) dhc &lt;- as.dendrogram(hc) # Actually, each leaf of the tree has several attributes, like the color, the shape.. Have a look to it: specific_leaf &lt;- dhc[[1]][[1]][[1]] # specific_leaf # attributes(specific_leaf) #So if I Want to color each leaf of the Tree, I have to change the attribute of each leaf. This can be done using the dendrapply function. So I create a function that # # add 3 attributes to the leaf : one for the color (lab.col) ,one for the font lab.font and one for the size (lab.cex). i=0 colLab&lt;&lt;-function(n){ if(is.leaf(n)){ #I take the current attributes a=attributes(n) #I deduce the line in the original data, and so the treatment and the specie. ligne=match(attributes(n)$label,data[,1]) treatment=data[ligne,3]; if(treatment==&quot;Low&quot;){col_treatment=&quot;blue&quot;};if(treatment==&quot;High&quot;){col_treatment=&quot;red&quot;} specie=data[ligne,2]; if(specie==&quot;dicoccoides&quot;){col_specie=&quot;red&quot;};if(specie==&quot;dicoccum&quot;){col_specie=&quot;Darkgreen&quot;};if(specie==&quot;durum&quot;){col_specie=&quot;blue&quot;} #Modification of leaf attribute attr(n,&quot;nodePar&quot;)&lt;-c(a$nodePar,list(cex=1.5,lab.cex=1,pch=20,col=col_treatment,lab.col=col_specie,lab.font=1,lab.cex=1)) } return(n) } # Finally I just have to apply this to my dendrogram dL &lt;- dendrapply(dhc, colLab) # And the plot plot(dL , main=&quot;structure of the population&quot;) legend(&quot;topright&quot;, legend = c(&quot;High Nitrogen&quot; , &quot;Low Nitrogen&quot; , &quot;Durum&quot; , &quot;Dicoccoides&quot; , &quot;Dicoccum&quot;), col = c(&quot;red&quot;, &quot;blue&quot; , &quot;blue&quot; , &quot;red&quot; , &quot;Darkgreen&quot;), pch = c(20,20,4,4,4), bty = &quot;n&quot;, pt.cex = 1.5, cex = 0.8 , text.col = &quot;black&quot;, horiz = FALSE, inset = c(0, 0.1)) 5.3.14 More Customization with Dendextend The dendextend package allows to go one step further in term of dendrogram customization. Here is a set of examples showing the main possibilities, like adding color bar on the bottom, drawing 2 trees face to face and more. 5.3.15 Customized Dendrogram with R and the Dendextend Package The dendextend package allows to apply all kinds of customization to a dendrogram: coloring nodes, labels, putting several tree face to face and more. 5.3.15.1 Basic Dendrogram First of all, let’s remind how to build a basic dendrogram with R: Input dataset is a dataframe with individuals in row, and features in column. dist() is used to compute distance between sample. hclust() performs the hierarchical clustering. the plot() function can plot the output directly as a tree. # Library library(tidyverse) library(dendextend) # Data head(mtcars) # Clusterization using 3 variables mtcars %&gt;% select(mpg, cyl, disp) %&gt;% dist() %&gt;% hclust() %&gt;% as.dendrogram() -&gt; dend # Plot par(mar=c(7,3,1,1)) # Increase bottom margin to have the complete label plot(dend) 5.3.16 The set() Function The set() function of dendextend allows to modify the attribute of a specific part of the tree. You can customize the cex, lwd, col, lty for branches and labels for example. You can also custom the nodes or the leaf. The code below illustrates this concept: # library library(dendextend) # Chart (left) dend %&gt;% # Custom branches set(&quot;branches_col&quot;, &quot;grey&quot;) %&gt;% set(&quot;branches_lwd&quot;, 3) %&gt;% # Custom labels set(&quot;labels_col&quot;, &quot;orange&quot;) %&gt;% set(&quot;labels_cex&quot;, 0.8) %&gt;% plot() # Middle dend %&gt;% set(&quot;nodes_pch&quot;, 19) %&gt;% set(&quot;nodes_cex&quot;, 0.7) %&gt;% set(&quot;nodes_col&quot;, &quot;orange&quot;) %&gt;% plot() # right dend %&gt;% set(&quot;leaves_pch&quot;, 19) %&gt;% set(&quot;leaves_cex&quot;, 0.7) %&gt;% set(&quot;leaves_col&quot;, &quot;skyblue&quot;) %&gt;% plot() 5.3.17 Highlight Clusters The dendextend library has some good functionalities to highlight the tree clusters. You can color branches and label following their cluster attribution, specifying the number of cluster you want. The rect.dendrogram() function even allows to highlight one or several specific clusters with a rectangle. # Color in function of the cluster par(mar=c(1,1,1,7)) dend %&gt;% set(&quot;labels_col&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k=3) %&gt;% set(&quot;branches_k_color&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k = 3) %&gt;% plot(horiz=TRUE, axes=FALSE) abline(v = 350, lty = 2) v # Highlight a cluster with rectangle par(mar=c(9,1,1,1)) dend %&gt;% set(&quot;labels_col&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k=3) %&gt;% set(&quot;branches_k_color&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k = 3) %&gt;% plot(axes=FALSE) rect.dendrogram( dend, k=3, lty = 5, lwd = 0, x=1, col=rgb(0.1, 0.2, 0.4, 0.1) ) 5.3.18 Comparing with an Expected Clustering It is a common task to compare the cluster you get with an expected distribution. In the mtcars dataset we used to build our dendrogram, there is an am column that is a binary variable. We can check if this variable is consistent with the cluster we got using the colored_bars() function. # Create a vector of colors, darkgreen if am is 0, green if 1. my_colors &lt;- ifelse(mtcars$am==0, &quot;forestgreen&quot;, &quot;green&quot;) # Make the dendrogram par(mar=c(10,1,1,1)) dend %&gt;% set(&quot;labels_col&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k=3) %&gt;% set(&quot;branches_k_color&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k = 3) %&gt;% set(&quot;leaves_pch&quot;, 19) %&gt;% set(&quot;nodes_cex&quot;, 0.7) %&gt;% plot(axes=FALSE) # Add the colored bar colored_bars(colors = my_colors, dend = dend, rowLabels = &quot;am&quot;) v 5.3.19 Comparing 2 Dendrograms with tanglegram() It is possible to compare 2 dendrograms using the tanglegram() function. Here it illustrates a very important concept: when you calculate your distance matrix and when you run your hierarchical clustering algorithm, you cannot simply use the default options without thinking about what you’re doing. Have a look to the differences between 2 different methods of clusterisation. # Make 2 dendrograms, using 2 different clustering methods d1 &lt;- USArrests %&gt;% dist() %&gt;% hclust( method=&quot;average&quot; ) %&gt;% as.dendrogram() d2 &lt;- USArrests %&gt;% dist() %&gt;% hclust( method=&quot;complete&quot; ) %&gt;% as.dendrogram() # Custom these kendo, and place them in a list dl &lt;- dendlist( d1 %&gt;% set(&quot;labels_col&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k=3) %&gt;% set(&quot;branches_lty&quot;, 1) %&gt;% set(&quot;branches_k_color&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k = 3), d2 %&gt;% set(&quot;labels_col&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k=3) %&gt;% set(&quot;branches_lty&quot;, 1) %&gt;% set(&quot;branches_k_color&quot;, value = c(&quot;skyblue&quot;, &quot;orange&quot;, &quot;grey&quot;), k = 3) ) # Plot them together tanglegram(dl, common_subtrees_color_lines = FALSE, highlight_distinct_edges = TRUE, highlight_branches_lwd=FALSE, margin_inner=7, lwd=2 ) 5.4 Donut Chart A donut or doughnut chart is a ring divided into sectors that each represent a proportion of the whole. It is very close from a pie chart and thus suffers the same problem. In R, it can be built in both ggplot2 and base R. There is no specific geom to build donut charts with ggplot2. 5.4.1 Most Basic Doughnut Chart with ggplot2 The ggplot2 package allows to build donut charts. Note however that this is possible thanks a hack, since no specific function has been created for this kind of chart. (This is voluntary, to avoid donut charts that are dataviz bad practice). Here is the process: * Input data provides a numeric variable for a set of entities. * Absolute numeric values must be translated to proportion. * Group positions must be stacked: we’re gonna display them one after the other. * geom_rect() is used to plot each group as a rectangle. * coord_polar() is used to switch from stacked rectangles to a ring. * xlim() allows to switch from pie to donut: it adds the empty circle in the middle. # load library library(ggplot2) # Create test data. data &lt;- data.frame( category=c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), count=c(10, 60, 30) ) # Compute percentages data$fraction = data$count / sum(data$count) # Compute the cumulative percentages (top of each rectangle) data$ymax = cumsum(data$fraction) # Compute the bottom of each rectangle data$ymin = c(0, head(data$ymax, n=-1)) # Make the plot ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) + geom_rect() + coord_polar(theta=&quot;y&quot;) + # Try to remove that to understand how the chart is built initially xlim(c(2, 4)) # Try to remove that to see how to make a pie chart 5.4.2 Customization Here are a couple of things you can do improve your donut chart style: Use theme_void() to get rid of the unnecessary background, axis, labels and so on. Use a better color palette. Don’t use a legend, add labels to groups directly. # load library library(ggplot2) # Create test data. data &lt;- data.frame( category=c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), count=c(10, 60, 30) ) # Compute percentages data$fraction &lt;- data$count / sum(data$count) # Compute the cumulative percentages (top of each rectangle) data$ymax &lt;- cumsum(data$fraction) # Compute the bottom of each rectangle data$ymin &lt;- c(0, head(data$ymax, n=-1)) # Compute label position data$labelPosition &lt;- (data$ymax + data$ymin) / 2 # Compute a good label data$label &lt;- paste0(data$category, &quot;\\n value: &quot;, data$count) # Make the plot ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) + geom_rect() + geom_label( x=3.5, aes(y=labelPosition, label=label), size=6) + scale_fill_brewer(palette=4) + coord_polar(theta=&quot;y&quot;) + xlim(c(2, 4)) + theme_void() + theme(legend.position = &quot;none&quot;) 5.4.3 Donut Thickness It is important to understand that donut chart are just stacked rectangles that are made circular thanks to coord_polar. Thus, the empty circle that makes it a donut chart is just the space between the initial Y axis and the left part of the rectangle. If xlim left boundary is big, no empty circle. You get a pie chart If xlim is low, the ring becomes thinner. If you don’t get it, just plot the chart without coord_polar(). # load library library(ggplot2) # Create test data. data &lt;- data.frame( category=c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), count=c(10, 60, 30) ) # Compute percentages data$fraction &lt;- data$count / sum(data$count) # Compute the cumulative percentages (top of each rectangle) data$ymax &lt;- cumsum(data$fraction) # Compute the bottom of each rectangle data$ymin &lt;- c(0, head(data$ymax, n=-1)) # Compute label position data$labelPosition &lt;- (data$ymax + data$ymin) / 2 # Compute a good label data$label &lt;- paste0(data$category, &quot;\\n value: &quot;, data$count) # Make the plot ggplot(data, aes(ymax=ymax, ymin=ymin, xmax=4, xmin=3, fill=category)) + geom_rect() + geom_text( x=2, aes(y=labelPosition, label=label, color=category), size=6) + # x here controls label position (inner / outer) scale_fill_brewer(palette=3) + scale_color_brewer(palette=3) + coord_polar(theta=&quot;y&quot;) + xlim(c(-1, 4)) + theme_void() + theme(legend.position = &quot;none&quot;) 5.4.4 Donut Chart with Base R It is also possible to build your donut chart without using any library. The example shows how, providing a reusable function that you can quickly apply to your input dataset. If you want to stick to base R however, the function given below should allow you to get there. To draw a donut plot, the easiest way is to use ggplot2, as suggested in graph #128. If you want to stick to base R however, the function given below should allow you to get there. Important: this functions comes from here. # The doughnut function permits to draw a donut plot doughnut &lt;- function (x, labels = names(x), edges = 200, outer.radius = 0.8, inner.radius=0.6, clockwise = FALSE, init.angle = if (clockwise) 90 else 0, density = NULL, angle = 45, col = NULL, border = FALSE, lty = NULL, main = NULL, ...) { if (!is.numeric(x) || any(is.na(x) | x &lt; 0)) stop(&quot;&#39;x&#39; values must be positive.&quot;) if (is.null(labels)) labels &lt;- as.character(seq_along(x)) else labels &lt;- as.graphicsAnnot(labels) x &lt;- c(0, cumsum(x)/sum(x)) dx &lt;- diff(x) nx &lt;- length(dx) plot.new() pin &lt;- par(&quot;pin&quot;) xlim &lt;- ylim &lt;- c(-1, 1) if (pin[1L] &gt; pin[2L]) xlim &lt;- (pin[1L]/pin[2L]) * xlim else ylim &lt;- (pin[2L]/pin[1L]) * ylim plot.window(xlim, ylim, &quot;&quot;, asp = 1) if (is.null(col)) col &lt;- if (is.null(density)) palette() else par(&quot;fg&quot;) col &lt;- rep(col, length.out = nx) border &lt;- rep(border, length.out = nx) lty &lt;- rep(lty, length.out = nx) angle &lt;- rep(angle, length.out = nx) density &lt;- rep(density, length.out = nx) twopi &lt;- if (clockwise) -2 * pi else 2 * pi t2xy &lt;- function(t, radius) { t2p &lt;- twopi * t + init.angle * pi/180 list(x = radius * cos(t2p), y = radius * sin(t2p)) } for (i in 1L:nx) { n &lt;- max(2, floor(edges * dx[i])) P &lt;- t2xy(seq.int(x[i], x[i + 1], length.out = n), outer.radius) polygon(c(P$x, 0), c(P$y, 0), density = density[i], angle = angle[i], border = border[i], col = col[i], lty = lty[i]) Pout &lt;- t2xy(mean(x[i + 0:1]), outer.radius) lab &lt;- as.character(labels[i]) if (!is.na(lab) &amp;&amp; nzchar(lab)) { lines(c(1, 1.05) * Pout$x, c(1, 1.05) * Pout$y) text(1.1 * Pout$x, 1.1 * Pout$y, labels[i], xpd = TRUE, adj = ifelse(Pout$x &lt; 0, 1, 0), ...) } ## Add white disc Pin &lt;- t2xy(seq.int(0, 1, length.out = n*nx), inner.radius) polygon(Pin$x, Pin$y, density = density[i], angle = angle[i], border = border[i], col = &quot;white&quot;, lty = lty[i]) } title(main = main, ...) invisible(NULL) } # Let&#39;s use the function, it works like PiePlot ! # inner.radius controls the width of the ring! doughnut( c(3,5,9,12) , inner.radius=0.5, col=c(rgb(0.2,0.2,0.4,0.5), rgb(0.8,0.2,0.4,0.5), rgb(0.2,0.9,0.4,0.4) , rgb(0.0,0.9,0.8,0.4)) ) 5.5 Grouped and Stacked Barplot Grouped and Stacked barplot display a numeric value for several entities, organised in groups and subgroups. It is probably better to have a solid understanding of the basic barplot first. 5.5.0.1 Step by Step - ggplot2 ggplot2 is probably the best option to build grouped and stacked barchart. The input data frame requires to have 2 categorical variables that will be passed to the x and fill arguments of the aes() function. Toggling from grouped to stacked is pretty easy thanks to the position argument. 5.5.1 Grouped, Stacked and Percent Stacked Barplot in ggplot2 This section explains how to build grouped, stacked and percent stacked barplot with R and ggplot2. It provides a reproducible example with code for each type. 5.5.1.1 Grouped Barchart A grouped barplot display a numeric value for a set of entities split in groups and subgroups. Before trying to build one, check how to make a basic barplot with R and ggplot2. A few explanation about the code below: Input dataset must provide 3 columns: the numeric value (value), and 2 categorical variables for the group (specie) and the subgroup (condition) levels. In the aes() call, x is the group (specie), and the subgroup (condition) is given to the fill argument. In the geom_bar() call, position=\"dodge\" must be specified to have the bars one beside each other. # library library(ggplot2) # create a dataset specie &lt;- c(rep(&quot;sorgho&quot; , 3) , rep(&quot;poacee&quot; , 3) , rep(&quot;banana&quot; , 3) , rep(&quot;triticum&quot; , 3) ) condition &lt;- rep(c(&quot;normal&quot; , &quot;stress&quot; , &quot;Nitrogen&quot;) , 4) value &lt;- abs(rnorm(12 , 0 , 15)) data &lt;- data.frame(specie,condition,value) # Grouped ggplot(data, aes(fill=condition, y=value, x=specie)) + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) 5.5.2 Stacked Barchart A stacked barplot is very similar to the grouped barplot above. The subgroups are just displayed on top of each other, not beside. The only thing to change to get this figure is to switch the position argument to stack. # library library(ggplot2) # create a dataset specie &lt;- c(rep(&quot;sorgho&quot; , 3) , rep(&quot;poacee&quot; , 3) , rep(&quot;banana&quot; , 3) , rep(&quot;triticum&quot; , 3) ) condition &lt;- rep(c(&quot;normal&quot; , &quot;stress&quot; , &quot;Nitrogen&quot;) , 4) value &lt;- abs(rnorm(12 , 0 , 15)) data &lt;- data.frame(specie,condition,value) # Stacked ggplot(data, aes(fill=condition, y=value, x=specie)) + geom_bar(position=&quot;stack&quot;, stat=&quot;identity&quot;) 5.5.3 Percent Stacked Barchart Once more, there is not much to do to switch to a percent stacked barplot. Just switch to position=\"fill\". Now, the percentage of each subgroup is represented, allowing to study the evolution of their proportion in the whole. # library library(ggplot2) # create a dataset specie &lt;- c(rep(&quot;sorgho&quot; , 3) , rep(&quot;poacee&quot; , 3) , rep(&quot;banana&quot; , 3) , rep(&quot;triticum&quot; , 3) ) condition &lt;- rep(c(&quot;normal&quot; , &quot;stress&quot; , &quot;Nitrogen&quot;) , 4) value &lt;- abs(rnorm(12 , 0 , 15)) data &lt;- data.frame(specie,condition,value) # Stacked + percent ggplot(data, aes(fill=condition, y=value, x=specie)) + geom_bar(position=&quot;fill&quot;, stat=&quot;identity&quot;) 5.5.4 Grouped Barchart Customization As usual, some customization are often necessary to make the chart look better and personnal. Let’s: Add a title Use a theme Change color palette. See more here. Customize axis titles # library library(ggplot2) library(viridis) library(hrbrthemes) # create a dataset specie &lt;- c(rep(&quot;sorgho&quot; , 3) , rep(&quot;poacee&quot; , 3) , rep(&quot;banana&quot; , 3) , rep(&quot;triticum&quot; , 3) ) condition &lt;- rep(c(&quot;normal&quot; , &quot;stress&quot; , &quot;Nitrogen&quot;) , 4) value &lt;- abs(rnorm(12 , 0 , 15)) data &lt;- data.frame(specie,condition,value) # Small multiple ggplot(data, aes(fill=condition, y=value, x=specie)) + geom_bar(position=&quot;stack&quot;, stat=&quot;identity&quot;) + scale_fill_viridis(discrete = T) + ggtitle(&quot;Studying 4 species..&quot;) + theme_ipsum() + xlab(&quot;&quot;) 5.5.5 Small Multiple Small multiple can be used as an alternative of stacking or grouping. It is straightforward to make thanks to the facet_wrap() function. # library library(ggplot2) library(viridis) library(hrbrthemes) # create a dataset specie &lt;- c(rep(&quot;sorgho&quot; , 3) , rep(&quot;poacee&quot; , 3) , rep(&quot;banana&quot; , 3) , rep(&quot;triticum&quot; , 3) ) condition &lt;- rep(c(&quot;normal&quot; , &quot;stress&quot; , &quot;Nitrogen&quot;) , 4) value &lt;- abs(rnorm(12 , 0 , 15)) data &lt;- data.frame(specie,condition,value) # Graph ggplot(data, aes(fill=condition, y=value, x=condition)) + geom_bar(position=&quot;dodge&quot;, stat=&quot;identity&quot;) + scale_fill_viridis(discrete = T, option = &quot;E&quot;) + ggtitle(&quot;Studying 4 species..&quot;) + facet_wrap(~specie) + theme_ipsum() + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) 5.6 Piechart A piechart is a circle divided into sectors that each represent a proportion of the whole. It is highly criticized in dataviz for meaningful reasons, read more. This section teaches how to build one using R, using the pie() function or the ggplot2 package. The pie() function is natively provided in R. It allows to build nice piechart in seconds. Here is an overview of its functioning: 5.6.0.1 Step by Step - The pie() Function The pie() function is natively provided in R. It allows to build nice piechart in seconds. Here is an overview of its functioning: 5.6.1 Most Basic Piechart with pie() R natively offers the pie() function that builds pie charts. The input is just a numeric variable, each value providing the value of a group of the piechart. Important note: pie chart are widely known as a bad way to visualize information. Check this section for reasons and alternatives. # Create Data Prop &lt;- c(3,7,9,1,2) # Make the default Pie Plot pie(Prop) 5.6.2 Change Labels with labels Provide a vector of labels to the labels argument to add names to piechart groups: # You can also custom the labels: pie(Prop , labels = c(&quot;Gr-A&quot;,&quot;Gr-B&quot;,&quot;Gr-C&quot;,&quot;Gr-D&quot;,&quot;Gr-E&quot;)) 5.6.3 Non-Circular Piechart with edges Decrease the value of the edges argument to get angles around your piechart. # If you give a low value to the &quot;edge&quot; argument, you go from something circular to a shape with edges pie(Prop , labels = c(&quot;Gr-A&quot;,&quot;Gr-B&quot;,&quot;Gr-C&quot;,&quot;Gr-D&quot;,&quot;Gr-E&quot;) , edges=10) 5.6.4 Add Stripes with density The density arguments adds stripes. You can control the angle of those stripes with angle. # The density arguments adds stripes. You can control the angle of this lines with &quot;angle&quot; pie(Prop , labels = c(&quot;Gr-A&quot;,&quot;Gr-B&quot;,&quot;Gr-C&quot;,&quot;Gr-D&quot;,&quot;Gr-E&quot;) , density=10 , angle=c(20,90,30,10,0)) 5.6.5 Color with col and border Change group color with col, and border color with border. Here, the RcolorBrewer package is used to build a nice color palette. # Prepare a color palette. Here with R color brewer: library(RColorBrewer) myPalette &lt;- brewer.pal(5, &quot;Set2&quot;) # You can change the border of each area with the classical parameters: pie(Prop , labels = c(&quot;Gr-A&quot;,&quot;Gr-B&quot;,&quot;Gr-C&quot;,&quot;Gr-D&quot;,&quot;Gr-E&quot;), border=&quot;white&quot;, col=myPalette) 5.6.6 Ggplot2 Piechart A pie chart is a circle divided into sectors that each represent a proportion of the whole. This page explains how to build one with the ggplot2 package. 5.6.6.1 Step by Step - The ggplot2 Package There is no specific geom to build piechart with ggplot2. The trick is to build a barplot and use coord_polar to make it circular. This is why the pie() function described above is probably a better alternative. 5.6.6.2 Most Basic Piechart ggplot2 does not offer any specific geom to build piecharts. The trick is the following: Input data frame has 2 columns: the group names (group here) and its value (value here). Build a stacked barchart with one bar only using the geom_bar() function. Make it circular with coord_polar(). The result is far from optimal yet, keep reading for improvements. # Load ggplot2 library(ggplot2) # Create Data data &lt;- data.frame( group=LETTERS[1:5], value=c(13,7,9,21,2) ) # Basic piechart ggplot(data, aes(x=&quot;&quot;, y=value, fill=group)) + geom_bar(stat=&quot;identity&quot;, width=1) + coord_polar(&quot;y&quot;, start=0) 5.6.7 Improve Appearance Previous version looks pretty bad. We need to: Remove useless numeric labels. Remove grid and grey background. It’s better now, just need to add labels directly on chart. # Load ggplot2 library(ggplot2) # Create Data data &lt;- data.frame( group=LETTERS[1:5], value=c(13,7,9,21,2) ) # Basic piechart ggplot(data, aes(x=&quot;&quot;, y=value, fill=group)) + geom_bar(stat=&quot;identity&quot;, width=1, color=&quot;white&quot;) + coord_polar(&quot;y&quot;, start=0) + theme_void() # remove background, grid, numeric labels 5.6.8 Adding Labels with geom_text() The tricky part is to compute the y position of labels using this weird coord_polar transformation. # Load ggplot2 library(ggplot2) library(dplyr) # Create Data data &lt;- data.frame( group=LETTERS[1:5], value=c(13,7,9,21,2) ) # Compute the position of labels data &lt;- data %&gt;% arrange(desc(group)) %&gt;% mutate(prop = value / sum(data$value) *100) %&gt;% mutate(ypos = cumsum(prop)- 0.5*prop ) # Basic piechart ggplot(data, aes(x=&quot;&quot;, y=prop, fill=group)) + geom_bar(stat=&quot;identity&quot;, width=1, color=&quot;white&quot;) + coord_polar(&quot;y&quot;, start=0) + theme_void() + theme(legend.position=&quot;none&quot;) + geom_text(aes(y = ypos, label = group), color = &quot;white&quot;, size=6) + scale_fill_brewer(palette=&quot;Set1&quot;) 5.7 Treemap A Treemap displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. Visit data-to-viz.com for more theoretical explanation about what it is. For a R implementation, see below. 5.7.0.1 Step by Step - The treemap Package The treemap package is probably the best way to build treemaps in R. The 3 examples below will teach you how to build a very basic treemap, how to deal with subgroups](https://www.r-graph-gallery.com/235-treemap-with-subgroups), and how to customize the figure. Note that once you master this package, you can very easily build an interactive version as described below. 5.7.1 Most Basic Treemap with R This section explains how to build a very basic treemap with R. It uses the treemap package, provides reproducible code and explains how input data must be formatted. 5.7.1.1 Most Basic Treemap This is the most basic treemap you can do. The input dataset is simple: we just have 3 groups, and each has a value which we map to an area. It allows to learn the syntax of the treemap library: you need to provide at least a dataset (data), the column that provides groups (index), and the column that gives the size of each group (vSize). See graph #235 to learn how to add subgroups, and graph #236 to customize the chart appearance. # library library(treemap) # Create data group &lt;- c(&quot;group-1&quot;,&quot;group-2&quot;,&quot;group-3&quot;) value &lt;- c(13,5,22) data &lt;- data.frame(group,value) # treemap treemap(data, index=&quot;group&quot;, vSize=&quot;value&quot;, type=&quot;index&quot; ) 5.7.2 Treemap with Subgroups This section explains how to build a treemap with subgroups in R. It uses the treemap package, provides reproducible code and explains how input data must be formatted. This is a treemap with several levels. We have 3 groups, each containing several subgroups. Each subgroup has a value which we map to an area. In the index argument, you need to specify levels in the order of importance: group &gt; subgroup &gt; sub-subgroup. Note: If you have one level of grouping only, see chart #234. Note: Showing more than 2 levels often result in a cluttered and unredable figure. Why not considering an interactive version? # library library(treemap) # Build Dataset group &lt;- c(rep(&quot;group-1&quot;,4),rep(&quot;group-2&quot;,2),rep(&quot;group-3&quot;,3)) subgroup &lt;- paste(&quot;subgroup&quot; , c(1,2,3,4,1,2,1,2,3), sep=&quot;-&quot;) value &lt;- c(13,5,22,12,11,7,3,1,23) data &lt;- data.frame(group,subgroup,value) # treemap treemap(data, index=c(&quot;group&quot;,&quot;subgroup&quot;), vSize=&quot;value&quot;, type=&quot;index&quot; ) 5.7.3 Customize your R Treemap How to customize your treemap built with R? Learn how to control borders, labels, and more. Several examples with reproducible code provided. 5.7.3.1 Labels This page aims to explain how to customize R treemaps. Make sure you already understood how to build a basic treemap with R. The first step is to control label appearance. All the options are explained in the code below. Note that you can apply a different feature to each level of the treemap, for example using white for group labels, and orange for subgroup labels. # library library(treemap) # Create data group &lt;- c(rep(&quot;group-1&quot;,4),rep(&quot;group-2&quot;,2),rep(&quot;group-3&quot;,3)) subgroup &lt;- paste(&quot;subgroup&quot; , c(1,2,3,4,1,2,1,2,3), sep=&quot;-&quot;) value &lt;- c(13,5,22,12,11,7,3,1,23) data &lt;- data.frame(group,subgroup,value) # Custom labels: treemap(data, index=c(&quot;group&quot;,&quot;subgroup&quot;), vSize=&quot;value&quot;, type=&quot;index&quot;, fontsize.labels=c(15,12), # size of labels. Give the size per level of aggregation: size for group, size for subgroup, sub-subgroups... fontcolor.labels=c(&quot;white&quot;,&quot;orange&quot;), # Color of labels fontface.labels=c(2,1), # Font of labels: 1,2,3,4 for normal, bold, italic, bold-italic... bg.labels=c(&quot;transparent&quot;), # Background color of labels align.labels=list( c(&quot;center&quot;, &quot;center&quot;), c(&quot;right&quot;, &quot;bottom&quot;) ), # Where to place labels in the rectangle? overlap.labels=0.5, # number between 0 and 1 that determines the tolerance of the overlap between labels. 0 means that labels of lower levels are not printed if higher level labels overlap, 1 means that labels are always printed. In-between values, for instance the default value .5, means that lower level labels are printed if other labels do not overlap with more than .5 times their area size. inflate.labels=F, # If true, labels are bigger when rectangle is bigger. ) 5.7.4 Borders You can control the border: Color with border.col Width with border.lwds Remember that you can still provide a vector to each option: it gives the value for groups, subgroups and so on. # Custom borders: treemap(data, index=c(&quot;group&quot;,&quot;subgroup&quot;), vSize=&quot;value&quot;, type=&quot;index&quot;, border.col=c(&quot;black&quot;,&quot;white&quot;), # Color of borders of groups, of subgroups, of subsubgroups .... border.lwds=c(7,2) # Width of colors ) 5.7.5 General Features A few other arguments for more general customization. The palette arguments accepts any palette from RColorBrewer. # General features: treemap(data, index=c(&quot;group&quot;,&quot;subgroup&quot;), vSize=&quot;value&quot;, type=&quot;index&quot;, # How you color the treemap. type help(treemap) for more info palette = &quot;Set1&quot;, # Select your color palette from the RColorBrewer presets or make your own. title=&quot;My Treemap&quot;, # Customize your title fontsize.title=12, # Size of the title ) 5.7.5.1 Interactivity with d3treeR The d3treeR allows to build interactive treemaps with R. Click on a group to zoom in and reveal subgroups. Click on the group name on top to unzoom and come back to the previous state. Note that the syntax used in previous charts above is exactly the same. Only one more line of code is needed, give it a go! 5.7.6 Interactive Treemap in R With a big amount of data, a treemap can get cluttered and unreadable. Interactivity allows to keep a clean an insightful figure. This section shows how to build an interactive treemap with R and the d3treeR package. This section follows the previous chart #234, #235 and #236 that describe how to build and customize treemaps with the treemap package. The idea is to turn the chart interactive: you can now click on a group to zoom in and show its subgroups. Click on the group name on top to unzoom and come back to the previous state. This is done thanks to the d3treeR package: # library library(treemap) library(d3treeR) # dataset group &lt;- c(rep(&quot;group-1&quot;,4),rep(&quot;group-2&quot;,2),rep(&quot;group-3&quot;,3)) subgroup &lt;- paste(&quot;subgroup&quot; , c(1,2,3,4,1,2,1,2,3), sep=&quot;-&quot;) value &lt;- c(13,5,22,12,11,7,3,1,23) data &lt;- data.frame(group,subgroup,value) # basic treemap p &lt;- treemap(data, index=c(&quot;group&quot;,&quot;subgroup&quot;), vSize=&quot;value&quot;, type=&quot;index&quot;, palette = &quot;Set2&quot;, bg.labels=c(&quot;white&quot;), align.labels=list( c(&quot;center&quot;, &quot;center&quot;), c(&quot;right&quot;, &quot;bottom&quot;) ) ) # make it interactive (&quot;rootname&quot; becomes the title of the plot): inter &lt;- d3tree2( p , rootname = &quot;General&quot; ) # save the widget # library(htmlwidgets) # saveWidget(inter, file=paste0( getwd(), &quot;/HtmlWidget/interactiveTreemap.html&quot;)) "],
["evolution.html", "Chapter 6 Evolution 6.1 Area Chart 6.2 Line Chart 6.3 Streamgraph 6.4 Time Series", " Chapter 6 Evolution Figure 6.1: Multi Group Line Chart with Ggplot2 6.1 Area Chart An area chart represents the evolution of a numeric variable. It is very close to a line chart. This section displays many examples build with R and ggplot2. Have a look to data-to-viz.com if want to learn more about line chart theory. 6.1.0.1 Note on Area Chart This section is tightly linked with other sections. A line chart is the same but doesn’t fill the surface between the line and the X axis. A connected scatterplot is almost the same thing, but each observation is represented as a dot. More generally, the time series section can interest you. 6.1.0.2 Step by Step with ggplot2 ggplot2 allows to draw line charts thanks to the geom_line() function. It expects as input a data frame with 2 numeric variables, one displayed on each axis. Start your journey with the most basic line chart. 6.1.1 Area Chart with R and ggplot2 This section is a step by step introduction to area chart with R and ggplot2. It provides several reproducible examples with explanation and R code. 6.1.1.1 Basic Line Chart with ggplot2 and geom_line() An area chart displays the evolution of one or several numeric variables. Data points are usually connected by straight line segments, and the area between the X axis and the line is filled. See data-to-viz for a more in-depth definition. As for a line chart, the input data frame requires at least 2 columns: An ordered numeric variable for the X axis Another numeric variable for the Y axis Once the data is read by ggplot2 and those 2 variables are specified in the x and y arguments of the aes(), just call the geom_area() function. # Libraries library(ggplot2) # create data xValue &lt;- 1:50 yValue &lt;- cumsum(rnorm(50)) data &lt;- data.frame(xValue,yValue) # Plot ggplot(data, aes(x=xValue, y=yValue)) + geom_area() 6.1.2 Customize the Line Chart Several options are available to customize the area chart appearance: Add a title with ggtitle(). Change line style with arguments like shape, size, color and more. Add transparency to the filled region with opacity Custom the general theme with the theme_ipsum() function of the hrbrthemes package. Highlight the top line with geom_line() If not too many observation, show individual data points with geom_point() More generally, visit the ggplot2 section for more ggplot2 related stuff. # Libraries library(ggplot2) library(hrbrthemes) # create data xValue &lt;- 1:10 yValue &lt;- abs(cumsum(rnorm(10))) data &lt;- data.frame(xValue,yValue) # Plot ggplot(data, aes(x=xValue, y=yValue)) + geom_area( fill=&quot;#69b3a2&quot;, alpha=0.4) + geom_line(color=&quot;#69b3a2&quot;, size=2) + geom_point(size=3, color=&quot;#69b3a2&quot;) + theme_ipsum() + ggtitle(&quot;Evolution of something&quot;) 6.1.3 Basic Stacked Area Chart with R This post provides the basics concerning stacked area chart with R and ggplot2. It takes into account several input format types and show how to customize the output. 6.1.3.1 Most Basic Stacked Area with ggplot2 The data frame used as input to build a stacked area chart requires 3 columns: x: Numeric variable used for the X axis, often it is a time. y: Numeric variable used for the Y axis. What are we looking at? group: One shape will be done per group. The chart is built using the geom_area() function. # Packages library(ggplot2) library(dplyr) # create data time &lt;- as.numeric(rep(seq(1,7),each=7)) # x Axis value &lt;- runif(49, 10, 100) # y Axis group &lt;- rep(LETTERS[1:7],times=7) # group, one shape per group data &lt;- data.frame(time, value, group) # stacked area chart ggplot(data, aes(x=time, y=value, fill=group)) + geom_area() 6.1.4 Control Stacking Order with ggplot2 The gallery offers a section dedicated to reordering with ggplot2. This step can be tricky but the code below shows how to: Give a specific order with the factor() function. Order alphabetically using sort(). Order following values at a specific data. # Give a specific order: data$group &lt;- factor(data$group , levels=c(&quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;E&quot;, &quot;G&quot;, &quot;F&quot;, &quot;C&quot;) ) # Plot again ggplot(data, aes(x=time, y=value, fill=group)) + geom_area() # Note: you can also sort levels alphabetically: myLevels &lt;- levels(data$group) data$group &lt;- factor(data$group , levels=sort(myLevels) ) # Note: sort followinig values at time = 5 myLevels &lt;- data %&gt;% filter(time==6) %&gt;% arrange(value) data$group &lt;- factor(data$group , levels=myLevels$group ) 6.1.5 Proportional Stacked Area Chart In a proportional stacked area graph, the sum of each year is always equal to hundred and value of each group is represented through percentages. To make it, you have to calculate these percentages first. This can be done using dplyr of with base R. # Compute percentages with dplyr library(dplyr) data &lt;- data %&gt;% group_by(time, group) %&gt;% summarise(n = sum(value)) %&gt;% mutate(percentage = n / sum(n)) # Plot ggplot(data, aes(x=time, y=percentage, fill=group)) + geom_area(alpha=0.6 , size=1, colour=&quot;black&quot;) # Note: compute percentages without dplyr: my_fun &lt;- function(vec){ as.numeric(vec[2]) / sum(data$value[data$time==vec[1]]) *100 } data$percentage &lt;- apply(data , 1 , my_fun) 6.1.6 Color &amp; Style Let’s improve the chart general appearance: Usage of the viridis color scale. theme_ipsum of the hrbrthemes package. Add title with ggtitle. # Library library(viridis) library(hrbrthemes) # Plot ggplot(data, aes(x=time, y=value, fill=group)) + geom_area(alpha=0.6 , size=.5, colour=&quot;white&quot;) + scale_fill_viridis(discrete = T) + theme_ipsum() + ggtitle(&quot;The race between ...&quot;) 6.1.7 Stacking Area Charts 6.1.7.1 What is Stacking Stacking is a process where a chart is broken up across more than one categoric variables which make up the whole. Each item of the categoric variable is represented by a shaded area. These areas are stacked on top of one another. Here is an example with a stacked area chart. It shows the evolution of baby name occurence in the US between 1880 and 2015. Six first names are represented on top of one another. # Libraries library(tidyverse) library(babynames) library(streamgraph) library(viridis) library(hrbrthemes) library(plotly) # Load dataset from github data &lt;- babynames %&gt;% filter(name %in% c(&quot;Amanda&quot;, &quot;Jessica&quot;, &quot;Patricia&quot;, &quot;Deborah&quot;, &quot;Dorothy&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot p &lt;- data %&gt;% ggplot( aes(x=year, y=n, fill=name, text=name)) + geom_area( ) + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) ggplotly(p, tooltip=&quot;text&quot;) 6.1.7.2 Heaven or Hell? The efficiency of stacked area graph is discussed and it must be used with care. To put it in a nutshell: Stacked graphs are appropriate to study the evolution of the whole and the relative proportions of each group. Indeed, the top of the areas allows to visualize how the whole behaves, like for a classic area chart. In the previous graphic, it is easy to see that in 1920, Helen and Dorothy were common names but the 4 other names barely existed. However, they are not appropriate to study the evolution of each individual group. This is due to 2 main reasons. First, all except the since they do not have a flat baseline, it is very hard to read their values at each tile stamp. 6.1.8 Example: Mental Arithmetic In the previous graphic, try to find out how many times the name Dorothy was given in 1920. It is not trivial to find it out using the previous chart. You have to mentally do 75000 - 37000 which is hard. If you want to convey a message efficiently, you don’t want the audience to perform mental arithmetic. 6.1.8.1 Example: Optical Illusion. Important note: this section is inspired from this post by Dr. Drang. Dr Drang gives this nice example. Consider the graphic below, and try to visualize how the 3 categories evolved on the period: # create dummy data don &lt;- data.frame( x = rep(seq(2000,2005), 3), value = c( 75, 73, 68, 57, 36, 0, 15, 16, 17, 18, 19, 20, 10, 11, 15, 25, 45, 80), group = rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each=6) ) #plot don %&gt;% ggplot( aes(x=x, y=value, fill=group)) + geom_area( ) + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) It looks obvious that the yellow category increased, the purple decreased, and the green. is harder to read. At a first glance it looks like it is slightly decreasing I would say. Now let’s plot just the green group to find out: #plot don %&gt;% filter(group==&quot;B&quot;) %&gt;% ggplot( aes(x=x, y=value, fill=group)) + geom_area( fill=&quot;#22908C&quot;) + theme(legend.position=&quot;none&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) 6.1.8.2 Workaround If you have just a few categories, I would suggest to build a line chart. Here it is easy to follow a category and understand how it evolved accurately. data %&gt;% ggplot( aes(x=year, y=n, group=name, color=name)) + geom_line() + scale_color_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() However, this solution is not suitable if you have many categories. Indeed, it would result in a spaghetti chart that is very hard to read. You can read more about this here. Instead I would suggest to use `small multiple: here each category has its own section in the graphic. It makes easy to understand the pattern of each category. data %&gt;% ggplot( aes(x=year, y=n, group=name, fill=name)) + geom_area() + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), strip.text.x = element_text(size = 8) ) + facet_wrap(~name, scale=&quot;free_y&quot;) 6.1.8.3 Going Further Stacked Area Graphs Are Not Your Friend by Everyday analytics. Quantitative Displays for Combining Time-Series and Part-to-Whole Relationships by Stephen Few. I hate stacked area charts by Dr Drang. 6.1.9 Interactive Area Chart with R and plotly The plotly package allows to build interactive charts directly from R. Here is a application to area chart, using both the plot_ly() and ggplotly() functions. The ggplotly() function of the plotly library makes it a breeze to build an interactive version. Try to hover circles to get a tooltip, or select an area of interest for zooming. Double click to reinitialize. 6.1.10 Basic Line Chart with ggplot2 and geom_line() Base R also allows to build area charts thanks to the polygon() function. This functions requires 2 inputs: x and y. Note that extreme values of both are added at the beginning and at the end of each vectors to make sure the polygon is closed. This section describes how to build an area chart using base R and the polygon() function. See the area chart section for a ggplot2 implementation. # Create data data &lt;- data.frame( x=seq(1,10), y=sample(seq(1,15),10) ) # Add line on top plot( data$x , data$y , col=rgb(0.2,0.1,0.5,0.9) , type=&quot;o&quot; , lwd=3 , xlab=&quot;&quot; , ylab=&quot;size&quot; , pch=20) # Fill the area polygon( c(min(data$x), data$x , max(data$x)) , c( min(data$y) , data$y , min(data$y)) , col=rgb(0.2,0.1,0.5,0.2) , border=F ) 6.2 Line Chart This is the line chart section of the gallery. If you want to know more about this kind of chart, visit data-to-viz.com. If you’re looking for a simple way to implement it in R, pick an example below. 6.2.0.1 Note on Line Chart This section is tightly linked with other sections. A connected scatterplot is almost the same thing, but each observation is represented as a dot. An area chart fills the surface between the line and the X axis. More generally, the time series section can interest you. 6.2.0.2 Step by Step with ggplot2 ggplot2 allows to draw line charts thanks to the geom_line() function. It expects as input a data frame with 2 numeric variables, one displayed on each axis. Start your journey with the most basic line chart. 6.2.1 Line Chart with R and ggplot2 This section is a step by step introduction to line chart with R and ggplot2. It provides several reproducible examples with explanation and R code. 6.2.1.1 Basic Line Chart with ggplot2 and geom_line() A line chart or line graph displays the evolution of one or several numeric variables. Data points are usually connected by straight line segments. You read an extensive definition here. The input data frame requires at least 2 columns: An ordered numeric variable for the X axis. Another numeric variable for the Y axis. Once the data is read by ggplot2 and those 2 variables are specified in the x and y arguments of the aes(), just call the geom_line() function. # Libraries library(ggplot2) # create data xValue &lt;- 1:10 yValue &lt;- cumsum(rnorm(10)) data &lt;- data.frame(xValue,yValue) # Plot ggplot(data, aes(x=xValue, y=yValue)) + geom_line() 6.2.2 Customize the Line Chart Several options are available to customize the line chart appearance: Add a title with ggtitle(). Change line style with arguments like shape, size, color and more. Custom the general theme with the theme_ipsum() function of the hrbrthemes package. More generally, visit the ggplot2 section for more ggplot2 related stuff. # Libraries library(ggplot2) library(hrbrthemes) # create data xValue &lt;- 1:10 yValue &lt;- cumsum(rnorm(10)) data &lt;- data.frame(xValue,yValue) # Plot ggplot(data, aes(x=xValue, y=yValue)) + geom_line( color=&quot;#69b3a2&quot;, size=2, alpha=0.9, linetype=2) + theme_ipsum() + ggtitle(&quot;Evolution of something&quot;) 6.2.3 Connected scatterplot with R and ggplot2 This section explains how to build a basic connected scatterplot with R and ggplot2. It provides several reproducible examples with explanation and R code. 6.2.4 Most Basic Connected Scatterplot: geom_point() and geom_line() A connected scatterplot is basically a hybrid between a scatterplot and a line plot. Thus, you just have to add a geom_point() on top of the geom_line() to build it. # Libraries library(ggplot2) library(dplyr) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Plot data %&gt;% tail(10) %&gt;% ggplot( aes(x=date, y=value)) + geom_line() + geom_point() 6.2.5 Customize the Connected Scatterplot Custom the general theme with the theme_ipsum() function of the hrbrthemes package. Add a title with ggtitle(). Custom circle and line with arguments like shape, size, color and more. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Plot data %&gt;% tail(10) %&gt;% ggplot( aes(x=date, y=value)) + geom_line( color=&quot;grey&quot;) + geom_point(shape=21, color=&quot;black&quot;, fill=&quot;#69b3a2&quot;, size=6) + theme_ipsum() + ggtitle(&quot;Evolution of bitcoin price&quot;) 6.2.6 Connected Scatterplot to Show an Evolution The connected scatterplot can also be a powerfull technique to tell a story about the evolution of 2 variables. Let???s consider a dataset composed of 3 columns: Year Number of baby born called Amanda this year Number of baby born called Ashley The scatterplot beside allows to understand the evolution of these 2 names. Note that the code is pretty different in this case. geom_segment() is used of geom_line(). This is because geom_line() automatically sort data points depending on their X position to link them. It makes sense to add arrows and labels to guide the reader in the chart: # Libraries library(ggplot2) library(dplyr) library(babynames) library(ggrepel) library(tidyr) # data data &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Amanda&quot;)) %&gt;% filter(sex==&quot;F&quot;) %&gt;% filter(year&gt;1970) %&gt;% select(year, name, n) %&gt;% spread(key = name, value=n, -1) # plot data %&gt;% ggplot(aes(x=Amanda, y=Ashley, label=year)) + geom_point() + geom_segment(aes( xend=c(tail(Amanda, n=-1), NA), yend=c(tail(Ashley, n=-1), NA) ) ) 6.2.7 Line Plot with Log Scale This section explaines how to build a line chart with a log scale for its Y axis, using the scale_y_log10() function. It is sometimes useful to use a log scale for a numeric variable. Indeed, it allows to magnify the lower part of the curve. This is possible thanks to the scale_y_log10() function. Control the horizontal grid lines with breaks, and the axis limits with limits. (Note that 0 is not allowed, since log(0) is not defined.) # Library library(ggplot2) # Create dummy data data &lt;- data.frame( x=seq(10,100), y=seq(10,100)/2+rnorm(90) ) # Make the plot ggplot(data, aes(x=x, y=y)) + geom_line() + scale_y_log10( breaks=c(1,5,10,15,20,50,100), limits=c(1,100) ) 6.2.8 Without Log Transform This is the same chart without the log transform: # Library library(ggplot2) # Create dummy data data &lt;- data.frame( x=seq(10,100), y=seq(10,100)/2+rnorm(90) ) # Make the plot ggplot(data, aes(x=x, y=y)) + geom_line() 6.2.9 Multi Groups Line Chart with ggplot2 This section explains how to build a line chart that represents several groups with ggplot2. It provides several examples with explanation and reproducible code. 6.2.9.1 Basic Version If you’re not familiar with the geom_line() function, you should probably have a look to the most basic line chart first. Here, the input data frame is composed by 3 columns: An ordered numeric variable for the X axis Another numeric variable for the Y axis A categorical variable that specify the group of the observation The idea is to draw one line per group. This is doable by specifying a different color to each group with the color argument of ggplot2. # Libraries library(ggplot2) library(babynames) # provide the dataset: a dataframe called babynames library(dplyr) # Keep only 3 names don &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Patricia&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot don %&gt;% ggplot( aes(x=year, y=n, group=name, color=name)) + geom_line() 6.2.10 Customize the Grouped Line Chart Several options are available to customize the line chart appearance: Add a title with ggtitle(). Change line style with arguments like shape, size, color and more. Use the viridis package to get a nice color palette. Custom the general theme with the theme_ipsum() function of the hrbrthemes package. More generally, visit the ggplot2 section for more ggplot2 related stuff. # Libraries library(ggplot2) library(babynames) # provide the dataset: a dataframe called babynames library(dplyr) library(hrbrthemes) library(viridis) # Keep only 3 names don &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Patricia&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot don %&gt;% ggplot( aes(x=year, y=n, group=name, color=name)) + geom_line() + scale_color_viridis(discrete = TRUE) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + ylab(&quot;Number of babies born&quot;) 6.2.10.1 Notes Read more about line charts theory here. Be careful: a line chart with too many groups results in a spaghetti chart, which is a bad practice. Visit data-to-viz for line chart alternatives. 6.2.11 Linear Model and Confidence Interval in ggplot2 Display the result of a linear model and its confidence interval on top of a scatterplot. A ggplot2 implementation with reproducible code. 6.2.11.1 Linear Trend Adding a linear trend to a scatterplot helps the reader in seeing patterns. ggplot2 provides the geom_smooth() function that allows to add the linear trend and the confidence interval around it if needed (option se=TRUE). Note: the method argument allows to apply different smoothing method like glm, loess and more. See the doc for more. # Library library(ggplot2) library(hrbrthemes) # Create dummy data data &lt;- data.frame( cond = rep(c(&quot;condition_1&quot;, &quot;condition_2&quot;), each=10), my_x = 1:100 + rnorm(100,sd=9), my_y = 1:100 + rnorm(100,sd=16) ) # Basic scatter plot. p1 &lt;- ggplot(data, aes(x=my_x, y=my_y)) + geom_point( color=&quot;#69b3a2&quot;) + theme_ipsum() # with linear trend p2 &lt;- ggplot(data, aes(x=my_x, y=my_y)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, se=FALSE) + theme_ipsum() # linear trend + confidence interval p3 &lt;- ggplot(data, aes(x=my_x, y=my_y)) + geom_point() + geom_smooth(method=lm , color=&quot;red&quot;, fill=&quot;#69b3a2&quot;, se=TRUE) + theme_ipsum() p1 p2 p3 6.2.12 Line Chart Annotation with ggplot2 Annotation is a crucial part of a time series visual. This section shows how to highlight main parts of a line chart with text, circles, lines and more. The ggplot2 package recognizes the date format and automatically uses a specific type of X axis. If the time variable isn’t at the date format, this won’t work. Always check with str(data) how variables are understood by R. If not read as a date, use lubridate to convert it. Read more about this here. On the chart beside, dates are displayed using a neat format: month + year. Note: the gallery offers a section dedicated to line charts. # Libraries library(ggplot2) library(dplyr) library(plotly) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # plot data %&gt;% ggplot( aes(x=date, y=value)) + geom_line(color=&quot;#69b3a2&quot;) + ylim(0,22000) + annotate(geom=&quot;text&quot;, x=as.Date(&quot;2017-01-01&quot;), y=20089, label=&quot;Bitcoin price reached 20k $\\nat the end of 2017&quot;) + annotate(geom=&quot;point&quot;, x=as.Date(&quot;2017-12-17&quot;), y=20089, size=10, shape=21, fill=&quot;transparent&quot;) + geom_hline(yintercept=5000, color=&quot;orange&quot;, size=.5) + theme_ipsum() 6.2.13 Dual Y Axis with R and ggplot2 This section describes how to build a dual Y axis chart using R and ggplot2. It uses the sec.axis attribute to add the second Y axis. Note that this kind of chart has major drawbacks. Use it with care. 6.2.13.1 Visualizing 2 Series with R and ggplot2 Let’s consider a dataset with 3 columns: date first series to display: fake temperature. Range from 0 to 10. second series: fake price. Range from 0 to 100. One could easily build 2 line charts to study the evolution of those 2 series using the code below. But even if strongly unadvised, one sometimes wants to display both series on the same chart, thus needing a second Y axis. # Libraries library(ggplot2) library(dplyr) library(patchwork) # To display 2 charts together library(hrbrthemes) # Build dummy data data &lt;- data.frame( day = as.Date(&quot;2019-01-01&quot;) + 0:99, temperature = runif(100) + seq(1,100)^2.5 / 10000, price = runif(100) + seq(100,1)^1.5 / 10 ) # Most basic line chart p1 &lt;- ggplot(data, aes(x=day, y=temperature)) + geom_line(color=&quot;#69b3a2&quot;, size=2) + ggtitle(&quot;Temperature: range 1-10&quot;) + theme_ipsum() p2 &lt;- ggplot(data, aes(x=day, y=price)) + geom_line(color=&quot;grey&quot;,size=2) + ggtitle(&quot;Price: range 1-100&quot;) + theme_ipsum() # Display both charts side by side thanks to the patchwork package p1 + p2 6.2.14 Adding a Second Y Axis with sec.axis(): The Idea sec.axis() does not allow to build an entirely new Y axis. It just builds a second Y axis based on the first one, applying a mathematical transformation. In the example below, the second Y axis simply represents the first one multiplied by 10, thanks to the trans argument that provides the ~.*10 mathematical statement. Note that because of that you can’t easily control the second axis lower and upper boundaries. We’ll see a trick below in the tweaking section. # Start with a usual ggplot2 call: ggplot(data, aes(x=day, y=temperature)) + # Custom the Y scales: scale_y_continuous( # Features of the first axis name = &quot;First Axis&quot;, # Add a second axis and specify its features sec.axis = sec_axis( trans=~.*10, name=&quot;Second Axis&quot;) ) + theme_ipsum() 6.2.15 Show 2 Series on the Same Line Chart with sec.axis() We can use this sec.axis mathematical transformation to display 2 series that have a different range. Since the price has a maximum value that is 10 times biggeer than the maximum temperature: The second Y axis is like the first multiplied by 10 (trans=~.*10). The value be display in the second variable geom_line() call must be divided by 10 to mimic the range of the first variable. # Value used to transform the data coeff &lt;- 10 ggplot(data, aes(x=day)) + geom_line( aes(y=temperature)) + geom_line( aes(y=price / coeff)) + # Divide by 10 to get the same range than the temperature scale_y_continuous( # Features of the first axis name = &quot;First Axis&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*coeff, name=&quot;Second Axis&quot;) ) 6.2.16 Dual Y Axis Customization with ggplot2 A few usual tricks to make the chart looks better: ipsum theme to remove the black background and improve the general style. Add a title. Customize the Y axes to pair them with their related line. # Value used to transform the data coeff &lt;- 10 # A few constants temperatureColor &lt;- &quot;#69b3a2&quot; priceColor &lt;- rgb(0.2, 0.6, 0.9, 1) ggplot(data, aes(x=day)) + geom_line( aes(y=temperature), size=2, color=temperatureColor) + geom_line( aes(y=price / coeff), size=2, color=priceColor) + scale_y_continuous( # Features of the first axis name = &quot;Temperature (Celsius )&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*coeff, name=&quot;Price ($)&quot;) ) + theme_ipsum() + theme( axis.title.y = element_text(color = temperatureColor, size=13), axis.title.y.right = element_text(color = priceColor, size=13) ) + ggtitle(&quot;Temperature down, price up&quot;) 6.2.17 Barplot with Overlapping Line Chart It is totally possible to usee the same tricks with other geoms. Here is an example displaying a line chart on top of a barplot. # Value used to transform the data coeff &lt;- 10 # A few constants temperatureColor &lt;- &quot;#69b3a2&quot; priceColor &lt;- rgb(0.2, 0.6, 0.9, 1) ggplot(head(data, 80), aes(x=day)) + geom_bar( aes(y=temperature), stat=&quot;identity&quot;, size=.1, fill=temperatureColor, color=&quot;black&quot;, alpha=.4) + geom_line( aes(y=price / coeff), size=2, color=priceColor) + scale_y_continuous( # Features of the first axis name = &quot;Temperature (Celsius )&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*coeff, name=&quot;Price ($)&quot;) ) + theme_ipsum() + theme( axis.title.y = element_text(color = temperatureColor, size=13), axis.title.y.right = element_text(color = priceColor, size=13) ) + ggtitle(&quot;Temperature down, price up&quot;) 6.2.18 Line Chart with Error Envelop: ggplot2 and geom_ribbon() This section explains how to add an error envelop around a line chart using ggplot2 and the geom_ribbon() function. 6.2.18.1 Basic Line Chart with ggplot2 and geom_line() This graph has been made by Alastair Sanderson. You can have a look to his gallery here. It shows mean temperature profiles and their error envelopes, using the ggplot2 package and its geom_ribbon() function. Note that geom_ribbon() is used since upper and lower values of the envelop are available in the input data. As an alternative, the geom_smooth function automatically draw an error envelop using different statistical models. library(ggplot2) # Get the data from the web ! CC &lt;- read.table(&quot;http://www.sr.bham.ac.uk/~ajrs/papers/sanderson06/mean_Tprofile-CC.txt&quot; , header=TRUE) nCC &lt;- read.table(&quot;http://www.sr.bham.ac.uk/~ajrs/papers/sanderson06/mean_Tprofile-nCC.txt&quot; , header=TRUE) CC$type &lt;- &quot;Cool core&quot; nCC$type &lt;- &quot;Non-cool core&quot; A &lt;- rbind(CC, nCC) # Make the plot ggplot(data=A, aes(x=r.r500, y=sckT, ymin=sckT.lo, ymax=sckT.up, fill=type, linetype=type)) + geom_line() + geom_ribbon(alpha=0.5) + scale_x_log10() + scale_y_log10() + xlab(as.expression(expression( paste(&quot;Radius (&quot;, R[500], &quot;)&quot;) ))) + ylab(&quot;Scaled Temperature&quot;) 6.2.19 Spaghetti Plot A Spaghetti plot is a line plot with many lines displayed together. With more than a few (~5?) groups this kind of graphic gets really hard to read, and thus provides little insight about the data. Let’s make an example with the evolution of baby names in the US from 1880 to 2015. 6.2.19.1 Mind the Spaghetti (ggplot2) When too many groups are displayed on the same line chart it gets very hard to get insight from the figure. This is commonly called a spaghetti chart. Here are a few alternatives using ggplot2: annotation and small multiple. # Libraries library(tidyverse) library(hrbrthemes) library(kableExtra) options(knitr.table.format = &quot;html&quot;) library(babynames) library(streamgraph) library(viridis) library(DT) library(plotly) # Load dataset from github data &lt;- babynames %&gt;% filter(name %in% c(&quot;Mary&quot;,&quot;Emma&quot;, &quot;Ida&quot;, &quot;Ashley&quot;, &quot;Amanda&quot;, &quot;Jessica&quot;, &quot;Patricia&quot;, &quot;Linda&quot;, &quot;Deborah&quot;, &quot;Dorothy&quot;, &quot;Betty&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot data %&gt;% ggplot( aes(x=year, y=n, group=name, color=name)) + geom_line() + scale_color_viridis(discrete = TRUE) + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=14) ) + ggtitle(&quot;A spaghetti chart of baby names popularity&quot;) + theme_ipsum() It is very hard to follow a line to understand the evolution of a specific name’s popularity. Plus, even if you manage to follow a line, you then need to link it with the legend which is even harder. Let’s try to find a few workarounds to improve this graphic. 6.2.19.2 Target a Specific Group Let’s say you plot many groups, but the actual reason for that is to explain the feature of one particular group compared to the others. Then a good workaround is to highlight this group: make it appear different, and give it a proper annotation. Here, the evolution of Amanda’s popularity is obvious. Leaving the other lines is important since it allows you to compare Amanda to all other names. data %&gt;% mutate( highlight=ifelse(name==&quot;Amanda&quot;, &quot;Amanda&quot;, &quot;Other&quot;)) %&gt;% ggplot( aes(x=year, y=n, group=name, color=highlight, size=highlight)) + geom_line() + scale_color_manual(values = c(&quot;#69b3a2&quot;, &quot;lightgrey&quot;)) + scale_size_manual(values=c(1.5,0.2)) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + geom_label( x=1990, y=55000, label=&quot;Amanda reached 3550\\nbabies in 1970&quot;, size=4, color=&quot;#69b3a2&quot;) + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=14) ) 6.2.19.3 Use Small Multiples Area charts can be used to give a more general overview of the dataset, especially when used in combination with small multiples. In the following chart, it is easy to get a glimpse of the evolution of any name: data %&gt;% ggplot( aes(x=year, y=n, group=name, fill=name)) + geom_area() + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), strip.text.x = element_text(size = 8), plot.title = element_text(size=14) ) + facet_wrap(~name) For instance, Linda was a really popular name for a really short period of time. On another hand, Ida has never been very popular, but was used a little during several decades. 6.2.19.4 Combine Approaches Note that if you want to compare the evolution of each line compared to the others, you can combine both approaches: tmp &lt;- data %&gt;% mutate(name2=name) tmp %&gt;% ggplot( aes(x=year, y=n)) + geom_line( data=tmp %&gt;% dplyr::select(-name), aes(group=name2), color=&quot;grey&quot;, size=0.5, alpha=0.5) + geom_line( aes(color=name), color=&quot;#69b3a2&quot;, size=1.2 )+ scale_color_viridis(discrete = TRUE) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=14), panel.grid = element_blank() ) + ggtitle(&quot;A spaghetti chart of baby names popularity&quot;) + facet_wrap(~name) 6.2.19.5 Going Further Strategies for avoiding the spaghetti graph, by storytelling with data. Doing line plots in R and Python. 6.2.20 Change Line Chart Color according to Y Value This section explains how to build a line chart in base R, where the line color is set according to the Y axis value. Reproducible code is provided. The plotrix library allows to change the line color according to the value of the Y axis thanks to the clplot function. Here, the RColorBrewer package is used to set a palette of 8 colors. Note: Thanks to Carl Witthoft for sending this chart. # library library(plotrix) #create color palette library(RColorBrewer) my_colors = brewer.pal(8, &quot;Set2&quot;) # Create data x&lt;-seq(1,100) y&lt;-sin(x/5)+x/20 # Plot x and y par(mar=c(4,4,2,2)) clplot(x, y, main=&quot;&quot;, lwd=5, levels=c(1,2,3,4,5), col=my_colors, showcuts=T , bty=&quot;n&quot;) 6.2.21 Add a Legend to a Base R Chart This section explains how to add a legend to a chart made with base R, using the legend() function. It provides several reproducible examples with explanation and R code. This page aims to explain how to add a legend to a plot made in base R. It is done using the legend() function. The main arguments are: legend : names to display bty: type of box around the legend. See graph #73 horiz : legend in column or in row col : symbol color pch symbol type. See graph #6 pt.cex: symbol size cex: text size text.col: text color topright: legend position: bottomright, bottom, bottomleft, left, topleft, top, topright, right, center. `inset: % (from 0 to 1) to draw the legend away from x and y axis You can also give the X and Y coordinate of the legend: legend(3, 5, ...) Note that an equivalent page exist concerning legends with ggplot2. # Create data: a=c(1:5) b=c(5,3,4,5,5) c=c(4,5,4,3,1) # Make a basic graph plot( b~a , type=&quot;b&quot; , bty=&quot;l&quot; , xlab=&quot;value of a&quot; , ylab=&quot;value of b&quot; , col=rgb(0.2,0.4,0.1,0.7) , lwd=3 , pch=17 , ylim=c(1,5) ) lines(c ~a , col=rgb(0.8,0.4,0.1,0.7) , lwd=3 , pch=19 , type=&quot;b&quot; ) # Add a legend legend(&quot;bottomleft&quot;, legend = c(&quot;Group 1&quot;, &quot;Group 2&quot;), col = c(rgb(0.2,0.4,0.1,0.7), rgb(0.8,0.4,0.1,0.7)), pch = c(17,19), bty = &quot;n&quot;, pt.cex = 2, cex = 1.2, text.col = &quot;black&quot;, horiz = F , inset = c(0.1, 0.1)) 6.2.22 Reversed Y Axis in Base R This section explains how to reverse the Y axis on a chart with R. It uses a line chart as example and provides the reproducible code. It is a common need in dataviz to flip the Y axis upside down. In base R this is pretty easy to do: you just have to reverse the values of the ylim argument. This can be done using this statement: rev(range(y)) It is a common need in dataviz to flip the Y axis upside down. In base R this is pretty easy to do: you just have to reverse the values of the ylim argument. This can be done using this statement: rev(range(y)) Note: be careful, do not build a counter-intuitive chart # Create data x &lt;- seq(1,29)^2+runif(29,0.98) y &lt;- abs(seq(1,29)+4*runif(29,0.4)) # Make the plotwith ylim in reverse plot(y~x , ylim = rev(range(y)) , lwd=4 , type=&quot;l&quot; , bty=&quot;n&quot; , ylab=&quot;value of y (decreasing)&quot; , col=rgb(0.2,0.4,0.6,0.8) ) #Add the grey lines abline(v=seq(0,900,100) , col=&quot;grey&quot; , lwd=0.6) 6.2.23 Scatterplot with Polynomial Curve Fitting This example describes how to build a scatterplot with a polynomial curve drawn on top of it. First of all, a scatterplot is built using the native R plot() function. Then, a polynomial model is fit thanks to the lm() function. It is possible to have the estimated Y value for each step of the X axis using the predict() function, and plot it with line(). It is a good practice to add the equation of the model with text(). Note: You can also add a confidence interval around the model as described in chart #45. x &lt;- runif(300, min=-10, max=10) y &lt;- 0.1*x^3 - 0.5 * x^2 - x + 10 + rnorm(length(x),0,8) # plot of x and y : plot(x,y,col=rgb(0.4,0.4,0.8,0.6),pch=16 , cex=1.3) # Can we find a polynome that fit this function ? model &lt;- lm(y ~ x + I(x^2) + I(x^3)) # I can get the features of this model : #summary(model) #model$coefficients #summary(model)$adj.r.squared # For each value of x, I can get the value of y estimated by the model, and add it to the current plot ! myPredict &lt;- predict( model ) ix &lt;- sort(x,index.return=T)$ix lines(x[ix], myPredict[ix], col=2, lwd=2 ) # I add the features of the model to the plot coeff &lt;- round(model$coefficients , 2) text(3, -70 , paste(&quot;Model : &quot;,coeff[1] , &quot; + &quot; , coeff[2] , &quot;*x&quot; , &quot;+&quot; , coeff[3] , &quot;*x^2&quot; , &quot;+&quot; , coeff[4] , &quot;*x^3&quot; , &quot;\\n\\n&quot; , &quot;P-value adjusted = &quot;,round(summary(model)$adj.r.squared,2))) 6.2.24 Base R Graph Parameters: A Cheatsheet This section aims to remind the options offered to customize a graph in base R. Understand in a sec how to use lwd, pch, type, lty, cex, and more. Base R offers many option to customize the chart appearance. Basically everthing is doable with those few options: cex: shape size lwd: line width col: control colors lty: line type pch: marker shape type: link between dots Note: visit the cheatsheet section for more. # initialization par(mar=c(3,3,3,3)) num &lt;- 0 ; num1 &lt;- 0 plot(0,0 , xlim=c(0,21) , ylim=c(0.5,6.5), col=&quot;white&quot; , yaxt=&quot;n&quot; , ylab=&quot;&quot; , xlab=&quot;&quot;) #fill the graph for (i in seq(1,20)){ points(i,1 , pch=i , cex=3) points(i,2 , col=i , pch=16 , cex=3) points(i,3 , col=&quot;black&quot; , pch=16 , cex=i*0.25) #lty if(i %in% c(seq(1,18,3))){ num=num+1 points(c(i,i+2), c(4,4) , col=&quot;black&quot; , lty=num , type=&quot;l&quot; , lwd=2) text(i+1.1 , 4.15 , num) } #type and lwd if(i %in% c(seq(1,20,5))){ num1=num1+1 points(c(i,i+1,i+2,i+3), c(5,5,5,5) , col=&quot;black&quot; , type=c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;)[num1] , lwd=2) text(i+1.1 , 5.2 , c(&quot;p&quot;,&quot;l&quot;,&quot;b&quot;,&quot;o&quot;)[num1] ) points(c(i,i+1,i+2,i+3), c(6,6,6,6) , col=&quot;black&quot; , type=&quot;l&quot;, lwd=num1) text(i+1.1 , 6.2 , num1 ) } } #add axis axis(2, at = c(1,2,3,4,5,6), labels = c(&quot;pch&quot; , &quot;col&quot; , &quot;cex&quot; , &quot;lty&quot;, &quot;type&quot; , &quot;lwd&quot; ), tick = TRUE, col = &quot;black&quot;, las = 1, cex.axis = 0.8) 6.2.25 Dual Y Axis in R This section explains how to build a line chart with dual Y axis with R. It show the evolution of 2 series, each line having its own Y axis. Reproducible code provided. 6.2.25.1 Dual Y Axis with ggplot2 Warning: a dual Y axis line chart represents the evolution of 2 series, each plotted according to its own Y scale. This kind of chart must be avoided, since playing with Y axis limits can lead to completely different conclusions. Visit data-to-viz for more info. 6.2.25.2 Visualizing 2 Series with R and ggplot2 Let’s consider a dataset with 3 columns: date first serie to display: fake temperature. Range from 0 to 10. second series: fake price. Range from 0 to 100. One could easily build 2 line charts to study the evolution of those 2 series using the code below. But even if strongly unadvised, one sometimes wants to display both series on the same chart, thus needing a second Y axis. # Libraries library(ggplot2) library(dplyr) library(patchwork) # To display 2 charts together library(hrbrthemes) # Build dummy data data &lt;- data.frame( day = as.Date(&quot;2019-01-01&quot;) + 0:99, temperature = runif(100) + seq(1,100)^2.5 / 10000, price = runif(100) + seq(100,1)^1.5 / 10 ) # Most basic line chart p1 &lt;- ggplot(data, aes(x=day, y=temperature)) + geom_line(color=&quot;#69b3a2&quot;, size=2) + ggtitle(&quot;Temperature: range 1-10&quot;) + theme_ipsum() p2 &lt;- ggplot(data, aes(x=day, y=price)) + geom_line(color=&quot;grey&quot;,size=2) + ggtitle(&quot;Price: range 1-100&quot;) + theme_ipsum() # Display both charts side by side thanks to the patchwork package p1 + p2 6.2.26 Adding a Second Y axis with sec.axis(): The Idea sec.axis() does not allow to build an entirely new Y axis. It just builds a second Y axis based on the first one, applying a mathematical transformation. In the example below, the second Y axis simply represents the first one multiplied by 10, thanks to the trans argument that provides the ~.*10 mathematical statement. # Start with a usual ggplot2 call: ggplot(data, aes(x=day, y=temperature)) + # Custom the Y scales: scale_y_continuous( # Features of the first axis name = &quot;First Axis&quot;, # Add a second axis and specify its features sec.axis = sec_axis( trans=~.*10, name=&quot;Second Axis&quot;) ) + theme_ipsum() 6.2.27 Show 2 Series on the Same Line Chart with sec.axis() We can use this sec.axis mathematical transformation to display 2 series that have a different range. Since the price has a maximum value that is 10 times biggeer than the maximum temperature: The second Y axis is like the first multiplied by 10 (trans=~.*10). The value be display in the second variable geom_line() call must be divided by 10 to mimic the range of the first variable. # Value used to transform the data coeff &lt;- 10 ggplot(data, aes(x=day)) + geom_line( aes(y=temperature)) + geom_line( aes(y=price / coeff)) + # Divide by 10 to get the same range than the temperature scale_y_continuous( # Features of the first axis name = &quot;First Axis&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*coeff, name=&quot;Second Axis&quot;) ) 6.2.28 Dual Y Axis Customization with ggplot2 A few usual tricks to make the chart looks better: ipsum theme to remove the black background and improve the general style add a title customize the Y axes to pair them with their related line. # Value used to transform the data coeff &lt;- 10 # A few constants temperatureColor &lt;- &quot;#69b3a2&quot; priceColor &lt;- rgb(0.2, 0.6, 0.9, 1) ggplot(data, aes(x=day)) + geom_line( aes(y=temperature), size=2, color=temperatureColor) + geom_line( aes(y=price / coeff), size=2, color=priceColor) + scale_y_continuous( # Features of the first axis name = &quot;Temperature (Celsius )&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*coeff, name=&quot;Price ($)&quot;) ) + theme_ipsum() + theme( axis.title.y = element_text(color = temperatureColor, size=13), axis.title.y.right = element_text(color = priceColor, size=13) ) + ggtitle(&quot;Temperature down, price up&quot;) 6.2.29 Barplot with Overlapping Line Chart It is totally possible to use the same tricks with other geoms. Here is an example displaying a line chart on top of a barplot. # Value used to transform the data coeff &lt;- 10 # A few constants temperatureColor &lt;- &quot;#69b3a2&quot; priceColor &lt;- rgb(0.2, 0.6, 0.9, 1) ggplot(head(data, 80), aes(x=day)) + geom_bar( aes(y=temperature), stat=&quot;identity&quot;, size=.1, fill=temperatureColor, color=&quot;black&quot;, alpha=.4) + geom_line( aes(y=price / coeff), size=2, color=priceColor) + scale_y_continuous( # Features of the first axis name = &quot;Temperature (Celsius)&quot;, # Add a second axis and specify its features sec.axis = sec_axis(~.*coeff, name=&quot;Price ($)&quot;) ) + theme_ipsum() + theme( axis.title.y = element_text(color = temperatureColor, size=13), axis.title.y.right = element_text(color = priceColor, size=13) ) + ggtitle(&quot;Temperature down, price up&quot;) 6.2.30 Dual Y axis in R This section explains how to build a line chart with dual Y axis with R. It show the evolution of 2 series, each line having its own Y axis. Reproducible code provided 6.2.30.1 Usual Line Chart Let’s start with an usual line chart displaying the evolution of 2 numeric variables. This kind of chart can be built using the line() function. But here the xyplot from the latticeExtra package is used (we’ll need it later on.) One would argue that the exact evolution of the blue variable is hard to read. Another axis could be displayed to zoom on it. This is why the dual axis was born. #library library(latticeExtra) # create data set.seed(1) x &lt;- 1:100 var1 &lt;- cumsum(rnorm(100)) var2 &lt;- var1^2 data &lt;- data.frame(x,var1,var2) # usual line chart xyplot(var1 + var2 ~ x, data, type = &quot;l&quot;, col=c(&quot;steelblue&quot;, &quot;#69b3a2&quot;) , lwd=2) 6.2.31 Dual Y Axis Line Chart The doubleYScale() function of the latticeExtra package can take 2 outputs of the xyplot() function to build a dual Y axis line chart. This chart is truly misleading: it is easy to conclude that both variables follow the same pattern what is totally wrong. Always double check what axis trully are on dual axis chart. Conclusion: don’t do it! #library library(latticeExtra) # create data set.seed(1) x &lt;- 1:100 var1 &lt;- cumsum(rnorm(100)) var2 &lt;- var1^2 data &lt;- data.frame(x,var1,var2) # --&gt; construct separate plots for each series obj1 &lt;- xyplot(var1 ~ x, data, type = &quot;l&quot; , lwd=2, col=&quot;steelblue&quot;) obj2 &lt;- xyplot(var2 ~ x, data, type = &quot;l&quot;, lwd=2, col=&quot;#69b3a2&quot;) # --&gt; Make the plot with second y axis: doubleYScale(obj1, obj2, add.ylab2 = TRUE, use.style=FALSE ) 6.2.32 Add Legend If you stick to it, here is how to add a legend to the chart: #library library(latticeExtra) # create data set.seed(1) x &lt;- 1:100 var1 &lt;- cumsum(rnorm(100)) var2 &lt;- var1^2 data &lt;- data.frame(x,var1,var2) # --&gt; construct separate plots for each series obj1 &lt;- xyplot(var1 ~ x, data, type = &quot;l&quot; , lwd=2) obj2 &lt;- xyplot(var2 ~ x, data, type = &quot;l&quot;, lwd=2) # --&gt; Make the plot with second y axis AND legend: doubleYScale(obj1, obj2, text = c(&quot;obj1&quot;, &quot;obj2&quot;) , add.ylab2 = TRUE) 6.3 Streamgraph A streamgraph is a type of stacked area chart. It represents the evolution of a numeric variable for several groups. Areas are usually displayed around a central axis, and edges are rounded to give a flowing shape. 6.3.1 Most Basic Streamgraph This section describes how to build a basic streamgraph using R and the streamgraph package. It provides the reproducible code and explanation. This section describe the basic use of the streamgraph package. Your input needs 3 columns: Numeric variable for the X axis. Usually it provides time. Numeric variable for the Y axis: this is the variable we are studying. Categorical variable: each group will be plotted as a distinct shape. The streamgraph() function requires those 3 inputs to work. Note: The streamgraph package is a work by Bob Rudis. # Library library(streamgraph) # Create data: data &lt;- data.frame( year=rep(seq(1990,2016) , each=10), name=rep(letters[1:10] , 27), value=sample( seq(0,1,0.0001) , 270) ) # Basic stream graph: just give the 3 arguments pp &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, height=&quot;300px&quot;, width=&quot;1000px&quot;) pp # save the widget library(htmlwidgets) saveWidget(pp, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphBasic.html&quot;)) 6.3.2 Control Streamgraph Offset The streamgraph package offers several options concerning the chart offset. This feature has a massive impact on the general appearance. This section provides a description of the options. This section follows the previous basic streamgraph. It shows the effect of the offset option that can take 3 values: silhouette: shapes are displayed on both side of an horizontal axis. zero: displayed on top of the 0 line. expand: equivalent of a percent stacked area chart: the full height is used to visualize percentages. # Library library(streamgraph) # Create data: data &lt;- data.frame( year=rep(seq(1990,2016) , each=10), name=rep(letters[1:10] , 27), value=sample( seq(0,1,0.0001) , 270) ) # Type 1 (default) p1 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot; , offset=&quot;silhouette&quot;, width=&quot;100%&quot;, height=&quot;300px&quot; ) # Type 2 p2 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot; , offset=&quot;zero&quot;, width=&quot;100%&quot;, height=&quot;300px&quot; ) # Type 3. p3 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot; , offset=&quot;expand&quot;, width=&quot;100%&quot;, height=&quot;300px&quot; ) # save the widget # library(htmlwidgets) # saveWidget(p1, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphOffset1.html&quot;)) # saveWidget(p2, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphOffset2.html&quot;)) # saveWidget(p3, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphOffset3.html&quot;)) p1 p2 p3 6.3.3 Change Streamgraph Shape By definition a streamgraph has rounded angles, giving a nice feeling of flow. It is possible to change this shape using an option of the streamgraph package. # Library library(streamgraph) # Create data: data &lt;- data.frame( year=rep(seq(1990,2016) , each=10), name=rep(letters[1:10] , 27), value=sample( seq(0,1,0.0001) , 270) ) # Shape: classic p1 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, width=&quot;100%&quot;, height=&quot;300px&quot; ) # Shape: stacked area graph p2 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot; ,interpolate=&quot;linear&quot; , width=&quot;100%&quot;, height=&quot;300px&quot; ) # Shape: stacked barplot p3 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot; ,interpolate=&quot;step&quot; , width=&quot;100%&quot;, height=&quot;300px&quot; ) # save the widget # library(htmlwidgets) # saveWidget(p1, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphShape1.html&quot;)) # saveWidget(p2, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphShape2.html&quot;)) # saveWidget(p3, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphShape3.html&quot;)) p1 p2 p3 6.3.4 Change Streamgraph Color The streamgraph package offers several options to control the color palette in use. Both R Color Brewer and custom color palette are supported. The streamgraph package offers a few options to customize the chart color: scale_fill_brewer(): use one of the R ColorBrewer palette, both continuous and categorical. scale_fill_manual(): buid a custom color palette: just provide a vector containing the chosen colors. Note: you can save the chart as a html file using the saveWidget() function of the htmlwidgets package, as suggested in the commented code below. # Library library(streamgraph) # Create data: data &lt;- data.frame( year=rep(seq(1990,2016) , each=10), name=rep(letters[1:10] , 27), value=sample( seq(0,1,0.0001) , 270) ) # Graph 1: choose a RColorBrewer palette -&gt; continuous p1 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, width=&quot;100%&quot;, height=&quot;300px&quot; ) %&gt;% sg_fill_brewer(&quot;Blues&quot;) # Graph 2: choose a RColorBrewer palette -&gt; categorical p2 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, width=&quot;100%&quot;, height=&quot;300px&quot; ) %&gt;% sg_fill_brewer(&quot;Pastel1&quot;) # Graph 3: choose color manually with number, color name, rgb p3 &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot; , width=&quot;100%&quot;, height=&quot;300px&quot; ) %&gt;% sg_fill_manual(c(1:10)) # save the widget # library(htmlwidgets) # saveWidget(p1, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphColor1.html&quot;)) # saveWidget(p2, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphColor2.html&quot;)) # saveWidget(p3, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphColor3.html&quot;)) p1 p2 p3 6.3.5 Streamgraph with Dropdown Button The streamgraph package allows to add a dropdown button that controls which group to highlight. See how to use this option with explanation and reproducible code. It is pretty straightforward to add a dropdown button thanks to the sg_legend() function. Unlike other streamgraph() options, sg_legend() is used after the pipe command (%&gt;%). Note: you can save the chart as a html file using the saveWidget() function of the htmlwidgets package, as suggested in the commented code below. # Library library(streamgraph) # Create data: data &lt;- data.frame( year=rep(seq(1990,2016) , each=10), name=rep(letters[1:10] , 27), value=sample( seq(0,1,0.0001) , 270) ) # Stream graph with a legend pp &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, height=&quot;300px&quot;, width=&quot;300px&quot;) %&gt;% sg_legend(show=TRUE, label=&quot;names: &quot;) # save the widget library(htmlwidgets) saveWidget(pp, file=paste0( getwd(), &quot;/evolutionHtml/streamgraphDropdown.html&quot;)) pp 6.4 Time Series Time series aim to study the evolution of one or several variables through time. This section gives examples using R. A focus is made on the tidyverse: the lubridate package is indeed your best friend to deal with the date format, and ggplot2 allows to plot it efficiently. The dygraphs package is also considered to build stunning interactive charts. 6.4.0.1 Struggling with the Date Format? You will &lt;3 The lubridate Package Building time series requires the time variable to be at the date format. The first step of your analysis must be to double check that R read your data correctly, i.e. at the date format. This is possible thanks to the str() function: Getting this date format can be a pain, and the lubridate package is such a life saver. It offers several function which name are composed by 3 letters: year (y), month (m) and day (d). Example: 6.4.1 Time Series with Ggplot2 ggplot2 offers great features when it comes to visualize time series. The date format will be recognized automatically, resulting in neat X axis labels. The scale_x_data() makes it a breeze to customize those labels. Last but not least, plotly can turn the resulting chart interactive in one more line of code. 6.4.1.1 Basic Line Chart for Time Series with ggplot2 The ggplot2 package recognizes the date format and automatically uses a specific type of X axis. If the time variable isn’t at the date format, this won’t work. Always check with str(data) how variables are understood by R. If not read as a date, use lubridate to convert it. Read more about this here. On the chart beside, dates are displayed using a neat format: month + year. Note: The gallery offers a section dedicated to line charts. # Libraries library(ggplot2) library(dplyr) # Dummy data data &lt;- data.frame( day = as.Date(&quot;2017-06-14&quot;) - 0:364, value = runif(365) + seq(-140, 224)^2 / 10000 ) # Most basic bubble plot p &lt;- ggplot(data, aes(x=day, y=value)) + geom_line() + xlab(&quot;&quot;) p 6.4.2 Format used on the X Axis As soon as the time variable is recognized as a date, you can use the scale_x_date() function to choose the format displayed on the X axis. Below are 4 examples on how to call the function. See beside the list of available options. (source) p+scale_x_date(date_labels = &quot;%b&quot;) p+scale_x_date(date_labels = &quot;%Y %b %d&quot;) p+scale_x_date(date_labels = &quot;%W&quot;) p+scale_x_date(date_labels = &quot;%m-%Y&quot;) 6.4.3 Breaks and Minor Breaks It also possible to control the amount of break and minor breaks to display with date_breaks and date_minor_breaks. p + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%W&quot;) p + scale_x_date(date_minor_breaks = &quot;2 day&quot;) 6.4.4 Add Angle to X Axis Labels The ggplot2 package recognizes the date format and automatically uses a specific type of X axis. If the time variable isn’t at the date format, this won’t work. Always check with str(data) how variables are understood by R. If not read as a date, use lubridate to convert it. Read more about this here. On the chart beside, dates are displayed using a neat format: month + year. Note: the gallery offers a section dedicated to line charts. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Dummy data data &lt;- data.frame( day = as.Date(&quot;2017-06-14&quot;) - 0:364, value = runif(365) - seq(-140, 224)^2 / 10000 ) # Most basic bubble plot p &lt;- ggplot(data, aes(x=day, y=value)) + geom_line( color=&quot;#69b3a2&quot;) + xlab(&quot;&quot;) + theme_ipsum() + theme(axis.text.x=element_text(angle=60, hjust=1)) p 6.4.5 Select Time Frame Use the limit option of the scale_x_date() function to select a time frame in the data: # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Dummy data data &lt;- data.frame( day = as.Date(&quot;2017-06-14&quot;) - 0:364, value = runif(365) + seq(-140, 224)^2 / 10000 ) # Most basic bubble plot p &lt;- ggplot(data, aes(x=day, y=value)) + geom_line( color=&quot;steelblue&quot;) + geom_point() + xlab(&quot;&quot;) + theme_ipsum() + theme(axis.text.x=element_text(angle=60, hjust=1)) + scale_x_date(limit=c(as.Date(&quot;2017-01-01&quot;),as.Date(&quot;2017-02-11&quot;))) + ylim(0,1.5) p 6.4.6 Line Chart Annotation with ggplot2 Annotation is a crucial part of a time series visual. This section shows how to highlight main parts of a line chart with text, circles, lines and more. The ggplot2 package recognizes the date format and automatically uses a specific type of X axis. If the time variable isn’t at the date format, this won’t work. Always check with str(data) how variables are understood by R. If not read as a date, use lubridate to convert it. Read more about this here. On the chart beside, dates are displayed using a neat format: month + year. Note: the gallery offers a section dedicated to line charts. # Libraries library(ggplot2) library(dplyr) library(plotly) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # plot data %&gt;% ggplot( aes(x=date, y=value)) + geom_line(color=&quot;#69b3a2&quot;) + ylim(0,22000) + annotate(geom=&quot;text&quot;, x=as.Date(&quot;2017-01-01&quot;), y=20089, label=&quot;Bitcoin price reached 20k $\\nat the end of 2017&quot;) + annotate(geom=&quot;point&quot;, x=as.Date(&quot;2017-12-17&quot;), y=20089, size=10, shape=21, fill=&quot;transparent&quot;) + geom_hline(yintercept=5000, color=&quot;orange&quot;, size=.5) + theme_ipsum() 6.4.7 Dual Y Axis with R and ggplot2 This section describes how to build a dual Y axis chart using R and ggplot2. It uses the sec.axis attribute to add the second Y axis. Note that this kind of chart has major drawbacks. Use it with care Interactive area chart with R and plotly 6.4.8 Using the ggplotly() Function This section follows the previous basic area chart built with ggplot2. The idea is to turn the chart interactive: Zoom by selecting an area of interest Hover the line to get exact time and value Export to png Slide axis Double click to re-initialize. This is done thanks to the ggplotly() function of the plotly package that turn any ggplot2 chart object interactive. The plotly package allows to build interactive charts directly from R. Here is a application to area chart, using both the plot_ly() and ggplotly() functions. # Libraries library(ggplot2) library(dplyr) library(plotly) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Usual area chart p &lt;- data %&gt;% ggplot( aes(x=date, y=value)) + geom_area(fill=&quot;#69b3a2&quot;, alpha=0.5) + geom_line(color=&quot;#69b3a2&quot;) + ylab(&quot;bitcoin price ($)&quot;) + theme_ipsum() # Turn it interactive with ggplotly p &lt;- ggplotly(p) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/ggplotlyAreachart.html&quot;)) 6.4.9 Using plot_ly() The ggplotly() function above takes as input a ggplot2 chart and turn it interactive. But the plotly package also allows to build interactive charts using its own function: plot_ly(). library(plotly) # Create data var1 &lt;- seq(1,8) var2 &lt;- c(0,1,4,1,8,7,5,4) var3 &lt;- c(7,8,4,2,1,2,0,1) # Area chart with 2 groups p &lt;- plot_ly(x = var1, y = var2, type=&quot;scatter&quot;, mode=&quot;markers&quot;, fill = &quot;tozeroy&quot;) p &lt;- add_trace(p, x = var1, y = var3, type=&quot;scatter&quot;, mode=&quot;markers&quot;, fill = &quot;tonexty&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/plotlyAreachart.html&quot;)) 6.4.10 An Introduction to Interactive Time Series with R and Dygraphs This section is an introduction to the dygraphs package for interactive time series visualization with R. It shows how to deal with various input formats, and what are the main chart types offered. The dygraphs package allows to represent time series: a chart where the X axis represent time, and the Y axis the evolution of one or several variables. dygraphs allows to make interactive charts: you can zoom on a specific time period, hover a data point to have more info, and more. Two input format are possible for the time variable: numeric: like 1,2,3,4,5 date: like 2017/12/08 You can check at which your format your time variable is with str(data). 6.4.11 If Time is a numeric Variable That’s the simplest use case. Just make sure that time is displayed on the first column of the data frame. Here is a code example and the resulting chart: # Library library(dygraphs) # --- Format 1: time is represented by a simple number. (must be numeric and ordered) data &lt;- data.frame( time=c( seq(0,20,0.5), 40), value=runif(42) ) # Double check time is numeric str(data) # Use dygraph p &lt;- dygraph(data) p 6.4.12 If Time is a date Variable The process is slightly more complicated with the date format. First, check time is indeed recognized as a date by R with str(data). This gives the format of each column, so check that Date is written. Second, transform the data frame to the xts format (xts=eXtensible Time Series). This is requested by dygraphs. # Libraries library(dygraphs) library(xts) # To make the convertion data-frame / xts format # Format 2: time is represented by a date. data &lt;- data.frame( time=seq(from=Sys.Date()-40, to=Sys.Date(), by=1 ), value=runif(41) ) # Your time column MUST be a time format!, check it out with str() str(data) # Then you can create the xts format, and thus use dygraph don &lt;- xts(x = data$value, order.by = data$time) # Make the chart p &lt;- dygraph(don) p 6.4.13 Several Series The process to plot several variables is very close. When you do the transformation to the xts format, simply specify all the columns you want to keep on your chart. # Libraries library(dygraphs) library(xts) # To make the convertion data-frame / xts format # Format 3: Several variables for each date data &lt;- data.frame( time=seq(from=Sys.Date()-40, to=Sys.Date(), by=1 ), value1=runif(41), value2=runif(41)+0.7 ) # Then you can create the xts format: don=xts( x=data[,-1], order.by=data$time) # Chart p &lt;- dygraph(don) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/dygraphs316-3.html&quot;)) 6.4.14 Getting the Date Format The hardest part in time series visualization is to get your data at the date format! This can be a real struggle. Fortunately the lubridate package is here to make your life easier. Have a look to its documentation here. Most of the time data is available at text format (like from excel spreadsheet). When you load these data you get a character format. You want to transform it in a date, time or date-time format. A set of functions with relevant names exist for that. Here is an example of utilization on a real dataset: # libraries library(dygraphs) library(xts) # To make the convertion data-frame / xts format library(lubridate) # You will love it to work with dates library(tidyverse) # Load the data (hosted on the gallery website) data &lt;- read.table(&quot;https://python-graph-gallery.com/wp-content/uploads/bike.csv&quot;, header=T, sep=&quot;,&quot;) # Check the format, it is not a date yet ! str(data) # The wanna-be-date column looks like that: &quot;2011-02-19 02:00:00&quot;. This is Year, Month, Day, Hour, Minute, Second. Thus I can transform it with the function: ymd_hms data$datetime &lt;- ymd_hms(data$datetime) # Check if it worked properly! str(data) # It does! Let&#39;s go to the its format like seen above, and make the dygraph don &lt;- xts(x = data$count, order.by = data$datetime) # Chart p &lt;- dygraph(don) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs316-4.html&quot;)) As a memo, here is an overview of the function that exist: ymd() mdy() dmy() ymd_hms() 6.4.15 Time Series With Dygraph The dygraphs package is a html widget. It allows to make interactive time series chart: you can zoom and hover data points to get additional information. Start by reading the chart #316 for quick introduction and input description. Then, the graph #317 gives an overview of the different types of charts that are offered. To go further, check the graph #318 (interactive version below). 6.4.15.1 Time Series Visualization with the Dygraphs Package This section describes the options offered by the dygraphs package for interactive time series visualization with R. It shows the different chart types available and how to customize them. 6.4.15.2 Connected Scatterplot Most of the chart types described in this section are called using the dyOptions() function. For connected scatterplots, use drawPoints = TRUE. Note that the gallery offers a whole section on connected scatterplot. # Library library(dygraphs) library(xts) # To make the convertion data-frame / xts format # Create data data &lt;- data.frame( time=seq(from=Sys.Date()-40, to=Sys.Date(), by=1 ), value=runif(41) ) # Double check time is at the date format str(data$time) # Switch to XTS format data &lt;- xts(x = data$value, order.by = data$time) # Default = line plot --&gt; See chart #316 # Add points p &lt;- dygraph(data) %&gt;% dyOptions( drawPoints = TRUE, pointSize = 4 ) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs317-1.html&quot;)) 6.4.16 Area Chart Area chart are built thanks to the fillGraph = TRUE option. See the area chart section of the gallery. p &lt;- dygraph(data) %&gt;% dyOptions( fillGraph=TRUE ) p # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs317-2.html&quot;)) 6.4.17 Step Chart The step chart is made using the stepPlot option. Use it in conjunction with fillGraph to fill the area below the curve. p &lt;- dygraph(data) %&gt;% dyOptions( stepPlot=TRUE, fillGraph=TRUE) p # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs317-3.html&quot;)) 6.4.18 Lollipop Plot Called using the stemPlot option. See the lollipop plot section of the gallery for more. p &lt;- dygraph(data) %&gt;% dyOptions( stemPlot=TRUE) p # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs317-4.html&quot;)) 6.4.19 Candlestick Chart The candlestick chart represents 4 series and is widely used in finance. dygraphs offers the dyCandlestick() function that allows to build them in minutes. # Create data (needs 4 data points per date stamp) trend &lt;- sin(seq(1,41))+runif(41) data &lt;- data.frame( time=seq(from=Sys.Date()-40, to=Sys.Date(), by=1 ), value1=trend, value2=trend+rnorm(41), value3=trend+rnorm(41), value4=trend+rnorm(41) ) # switch to xts format data &lt;- xts(x = data[,-1], order.by = data$time) # Plot it p &lt;- dygraph(data) %&gt;% dyCandlestick() p # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs317-5.html&quot;)) 6.4.20 Line Chart with Interval This is very handy to represent confidence interval around your time series. Don with dySeries() that takes 3 columns as input: trend and upper and lower limits of the confidence interval. # Create data trend &lt;- sin(seq(1,41))+runif(41) data &lt;- data.frame( time=seq(from=Sys.Date()-40, to=Sys.Date(), by=1 ), trend=trend, max=trend+abs(rnorm(41)), min=trend-abs(rnorm(41, sd=1)) ) # switch to xts format data &lt;- xts(x = data[,-1], order.by = data$time) # Plot p &lt;- dygraph(data) %&gt;% dySeries(c(&quot;min&quot;, &quot;trend&quot;, &quot;max&quot;)) p # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs317-6.html&quot;)) 6.4.21 Custom Dygraphs Time Series Example This post shows what is possible to do for time series visualization with the dygraphs package, using a good amount of customization. Reproducible code is provided. The chart #316 and #317 gives an introduction to time series representation with the dygraphs library. This page gives a more custom example based on real data (number of bikes located per day). Here is the graph and the code that allows to make it! # Library library(dygraphs) library(xts) # To make the convertion data-frame / xts format library(tidyverse) library(lubridate) # Read the data (hosted on the gallery website) data &lt;- read.table(&quot;https://python-graph-gallery.com/wp-content/uploads/bike.csv&quot;, header=T, sep=&quot;,&quot;) %&gt;% head(300) # Check type of variable # str(data) # Since my time is currently a factor, I have to convert it to a date-time format! data$datetime &lt;- ymd_hms(data$datetime) # Then you can create the xts necessary to use dygraph don &lt;- xts(x = data$count, order.by = data$datetime) # Finally the plot p &lt;- dygraph(don) %&gt;% dyOptions(labelsUTC = TRUE, fillGraph=TRUE, fillAlpha=0.1, drawGrid = FALSE, colors=&quot;#D8AE5A&quot;) %&gt;% dyRangeSelector() %&gt;% dyCrosshair(direction = &quot;vertical&quot;) %&gt;% dyHighlight(highlightCircleSize = 5, highlightSeriesBackgroundAlpha = 0.2, hideOnMouseOut = FALSE) %&gt;% dyRoller(rollPeriod = 1) # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/dygraphs318.html&quot;)) 6.4.22 Heatmap for Time Series Heatmaps can be a very good alternative to visualize time series, especially when the time frame you study is repeating, like weeks. Here is a customized example, but visit the heatmap section for more. 6.4.22.1 The Hourly Heatmap A heatmap used to display time series with R and ggplot2. A submission by John MacKintosh with reproducible code. library(ggplot2) library(dplyr) # easier data wrangling library(viridis) # colour blind friendly palette, works in B&amp;W also library(Interpol.T) # will generate a large dataset on initial load library(lubridate) # for easy date manipulation library(ggExtra) library(tidyr) data &lt;- data(Trentino_hourly_T,package = &quot;Interpol.T&quot;) names(h_d_t)[1:5]&lt;- c(&quot;stationid&quot;,&quot;date&quot;,&quot;hour&quot;,&quot;temp&quot;,&quot;flag&quot;) df &lt;- tbl_df(h_d_t) %&gt;% filter(stationid ==&quot;T0001&quot;) df &lt;- df %&gt;% mutate(year = year(date), month = month(date, label=TRUE), day = day(date)) df$date&lt;-ymd(df$date) # not necessary for plot but useful if you want to do further work with the data #cleanup rm(list=c(&quot;h_d_t&quot;,&quot;mo_bias&quot;,&quot;Tn&quot;,&quot;Tx&quot;, &quot;Th_int_list&quot;,&quot;calibration_l&quot;, &quot;calibration_shape&quot;,&quot;Tm_list&quot;)) #create plotting df df &lt;-df %&gt;% select(stationid,day,hour,month,year,temp)%&gt;% fill(temp) #optional - see note below # Re: use of fill # This code is for demonstrating a visualisation technique # There are 5 missing hourly values in the dataframe. # see the original plot here (from my ggplot demo earlier this year) to see the white spaces where the missing values occcur: # https://github.com/johnmackintosh/ggplotdemo/blob/master/temp8.png # I used &#39;fill&#39; from tidyr to take the prior value for each missing value and replace the NA # This is a quick fix for the blog section only - _do not_ do this with your real world data # Should really use either use replace_NA or complete(with fill)in tidyr # OR # Look into more specialist way of replacing these missing values -e.g. imputation. statno &lt;-unique(df$stationid) ######## Plotting starts here##################### p &lt;-ggplot(df,aes(day,hour,fill=temp))+ geom_tile(color= &quot;white&quot;,size=0.1) + scale_fill_viridis(name=&quot;Hrly Temps C&quot;,option =&quot;C&quot;) p &lt;-p + facet_grid(year~month) p &lt;-p + scale_y_continuous(trans = &quot;reverse&quot;, breaks = unique(df$hour)) p &lt;-p + scale_x_continuous(breaks =c(1,10,20,31)) p &lt;-p + theme_minimal(base_size = 8) p &lt;-p + labs(title= paste(&quot;Hourly Temps - Station&quot;,statno), x=&quot;Day&quot;, y=&quot;Hour Commencing&quot;) p &lt;-p + theme(legend.position = &quot;bottom&quot;)+ theme(plot.title=element_text(size = 14))+ theme(axis.text.y=element_text(size=6)) + theme(strip.background = element_rect(colour=&quot;white&quot;))+ theme(plot.title=element_text(hjust=0))+ theme(axis.ticks=element_blank())+ theme(axis.text=element_text(size=7))+ theme(legend.title=element_text(size=8))+ theme(legend.text=element_text(size=6))+ removeGrid()#ggExtra # you will want to expand your plot screen before this bit! p #awesomeness 6.4.23 Dual Y Axis in R This section explains how to build a line chart with dual Y axis with R. It show the evolution of 2 series, each line having its own Y axis. Reproducible code provided. 6.4.23.1 Usual Line Chart Let’s start with an usual line chart displaying the evolution of 2 numeric variables. This kind of chart can be built using the line() function. But here the xyplot from the latticeExtra package is used (we’ll need it later on.) One would argue that the exact evolution of the blue variable is hard to read. Another axis could be displayed to zoom on it. This is why the dual axis was born. #library library(latticeExtra) # create data set.seed(1) x &lt;- 1:100 var1 &lt;- cumsum(rnorm(100)) var2 &lt;- var1^2 data &lt;- data.frame(x,var1,var2) # usual line chart xyplot(var1 + var2 ~ x, data, type = &quot;l&quot;, col=c(&quot;steelblue&quot;, &quot;#69b3a2&quot;) , lwd=2) 6.4.24 Dual Y Axis Line Chart The doubleYScale() function of the latticeExtra package can take 2 outputs of the xyplot() function to build a dual Y axis line chart. This chart is truly misleading: it is easy to conclude that both variables follow the same pattern what is totally wrong. Always double check what axis trully are on dual axis chart. Conclusion: don’t do it! #library library(latticeExtra) # create data set.seed(1) x &lt;- 1:100 var1 &lt;- cumsum(rnorm(100)) var2 &lt;- var1^2 data &lt;- data.frame(x,var1,var2) # --&gt; construct separate plots for each series obj1 &lt;- xyplot(var1 ~ x, data, type = &quot;l&quot; , lwd=2, col=&quot;steelb lue&quot;) obj2 &lt;- xyplot(var2 ~ x, data, type = &quot;l&quot;, lwd=2, col=&quot;#69b3a2&quot;) # --&gt; Make the plot with second y axis: doubleYScale(obj1, obj2, add.ylab2 = TRUE, use.style=FALSE ) 6.4.25 Add Legend If you stick to it, here is how to add a legend to the chart: #library library(latticeExtra) # create data set.seed(1) x &lt;- 1:100 var1 &lt;- cumsum(rnorm(100)) var2 &lt;- var1^2 data &lt;- data.frame(x,var1,var2) # --&gt; construct separate plots for each series obj1 &lt;- xyplot(var1 ~ x, data, type = &quot;l&quot; , lwd=2) obj2 &lt;- xyplot(var2 ~ x, data, type = &quot;l&quot;, lwd=2) # --&gt; Make the plot with second y axis AND legend: doubleYScale(obj1, obj2, text = c(&quot;obj1&quot;, &quot;obj2&quot;) , add.ylab2 = TRUE) "],
["map.html", "Chapter 7 Map 7.1 Basic Map 7.2 Cartogram 7.3 Choropleth Map 7.4 Connection Map 7.5 Interactive Choropleth Map 7.6 Hexbin Map", " Chapter 7 Map Figure 7.1: Connection Map 7.1 Basic Map This section is a very basic introduction to the leaflet R package. It shows how to display a background map using default parameters, with reproducible code provided. 7.1.1 Background map in R This is the background map section of the gallery. It explains how to build static and interactive maps based on different input data, but does not explain how to plot data on it. See other sections for that: Choropleth, bubble map, connection map or cartogram. 7.1.1.1 Input Format and Package Overview R is an great tool for geospatial data analysis. Heaps of dedicated packages exist. Building a map follows those 2 steps: Find data, load it in R: region boundaries can be stored in shapefiles or geoJSON files. Some R libraries also provide the data for the most common places. It is also possible to use google map style backgrounds. Manipulate and plot it: once geo data are loaded in R you get a geospatial object that has specific features. You can manipulate it and plot it with packages like sp or ggplot2 7.1.2 Most Basic Background Map with R and Leaflet This post is a very basic introduction to the leaflet R package. It shows how to display a background map using default parameters, with reproducible code provided. First initiate the map with the leaflet() function. Then add tiles with addTiles(). Note the use of the %&gt;% operator to “pipe” functions. Here you can see how to get the same result using or not this operator. By default, you get the map beside. See next charts to learn how to zoom on a zone, change background style. # Load the library library(leaflet) # Note: if you do not already installed it, install it with: # install.packages(&quot;leaflet&quot;) # Initialize the leaflet map with the leaflet() function m &lt;- leaflet() # Then we Add default OpenStreetMap map tiles m &lt;- addTiles(m) m # Same stuff but using the %&gt;% operator m &lt;- leaflet() %&gt;% addTiles() m # save the widget in a html file if needed. # library(htmlwidgets) # saveWidget(m, file=paste0( getwd(), &quot;/HtmlWidget/backgroundMapBasic.html&quot;)) 7.1.3 Change Background Tile with leaflet and R This section shows how to change the background tile used by the leaflet R package. It provides an overview of the most common options with their associated code. 7.1.3.1 Loading a tile This post follows the previous posts on leaflet: most basic map, and zooming on a specific area. Leaflet offers several tiles to customize the background used on a map. A tile can be loaded thanks to the addProviderTiles() function. # Load the library library(leaflet) # Note: if you do not already installed it, install it with: # install.packages(&quot;leaflet&quot;) # Background 1: NASA x &lt;- leaflet() %&gt;% addTiles() %&gt;% setView( lng = 2.34, lat = 48.85, zoom = 5 ) %&gt;% addProviderTiles(&quot;NASAGIBS.ViirsEarthAtNight2012&quot;) x # save the widget in a html file if needed. #library(htmlwidgets) #saveWidget(x, file=paste0( getwd(), &quot;/NASAGIBS.html&quot;)) 7.1.3.2 List of Tiles Many tiles are made available. A complete list can be found here. Most famous are probably: Nasa: NASAGIBS.ViirsEarthAtNight2012 Google map: Esri.WorldImagery Gray: Esri.WorldGrayCanvas Terrain: Esri.WorldTerrain Topo Map: Esri.WorldTopoMap # Background 2: World Imagery m &lt;- leaflet() %&gt;% addTiles() %&gt;% setView( lng = 2.34, lat = 48.85, zoom = 3 ) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) m # save the widget in a html file if needed. #library(htmlwidgets) #saveWidget(m, file=paste0( getwd(), &quot;/Esri.html&quot;)) 7.1.4 The ggmap Package for Static Maps with Background Titles The ggmap library makes it easy to retrieve raster map tiles from popular online mapping services like Google Maps, OpenStreetMap or Stamen Maps, and plot them using the ggplot2 framework. It produces static maps like these. Click on an image to get the related code snippet. The ggmap package produces static maps. This section describes its basic utilisation, just building background maps. Other section are available for adding data on it, like bubble maps or chloropleth maps. The section is split in 2 parts: tiles coming from google and others coming from Stamen. 7.1.4.1 Building a Google Background The get_googlemap() function allows to get google map tiles. Unfortunately, google now requires to sign up for an API keys for this code to work. # Library library(ggmap) # For google map, you have to give the center of the window you are looking at. # Possibility for the map type argument: terrain / satellite / roadmap / hybrid # get the map info map &lt;- get_googlemap(&quot;Montpellier, France&quot;, zoom = 8, maptype = &quot;terrain&quot;) # Plot it ggmap(map) + theme_void() + ggtitle(&quot;terrain&quot;) + theme( plot.title = element_text(colour = &quot;orange&quot;), panel.border = element_rect(colour = &quot;grey&quot;, fill=NA, size=2) ) 7.1.5 Calling Stamen Background Using the same kind of code you can call stamen background. Just switch to the get_stamenmap() function. The most famous background is probably the watercolor one. # Library library(ggmap) library(gridExtra) # For stamen map, you have to give the extremity of the window you are looking at. here is an example with the watercolor background (Around brisbane) map &lt;- get_stamenmap( bbox = c(left = 110, bottom = -40, right = 160, top = -10), zoom = 4, maptype = &quot;watercolor&quot;) ggmap(map) + theme_void() + theme( plot.title = element_text(colour = &quot;orange&quot;), panel.border = element_rect(colour = &quot;grey&quot;, fill=NA, size=2) ) Let’s have a look to all the possibilities offered by this Stamen option: # Library library(ggmap) library(gridExtra) # Let&#39;s check all the possibilities offered by stamen maptype &lt;- c(&quot;terrain-labels&quot;, &quot;terrain-lines&quot;, &quot;toner&quot;, &quot;toner-2011&quot;, &quot;toner-background&quot;, &quot;toner-hybrid&quot;, &quot;toner-lines&quot;, &quot;toner-lite&quot;, &quot;watercolor&quot;) mylist &lt;- vector(&quot;list&quot;, length(maptype)) # Loop through them: num &lt;- 0 for(i in maptype ){ num &lt;- num+1 map &lt;- get_stamenmap( bbox = c(left = 150, bottom = -30, right = 160, top = -25), zoom = 8, maptype = i) p &lt;- ggmap(map) + theme_void() + ggtitle(i) + theme( plot.title = element_text(colour = &quot;orange&quot;), panel.border = element_rect(colour = &quot;grey&quot;, fill=NA, size=2) ) mylist[[num]] &lt;- p } # Arrange all this map in the same image with gridExtra: n &lt;- length(mylist) nCol &lt;- floor(sqrt(n)) do.call(&quot;grid.arrange&quot;, c(mylist, ncol=nCol)) 7.1.6 The Maps, Mapdata and Oz Packages to get Most Common Boundaries A few libraries provide the most common spatial objects. It avoids the struggle to find the information somewhere on the web. Maps library: Canada, France, Italy, USA and its regions, world cities, NZ. Mapdata library (China, Japan, NZ, World in High resolution) and the oz library (Australia). The maps, mapdata and oz packages provide the boundaries of the most common world regions like the US, Europe, New Zealand and more. This section describes how to use them to avoid struggling finding input data. 7.1.6.1 maps Package The maps package is the best source of geospatial data in R. The whole list of offered data is available typing: help(package='maps'). It includes: World: world, world.cities, lakes US: states, county, state, usa France: france Italy: italy New Zealand: nz The code below shows how to use one of this geospatial object. # Load library library(maps) # Check all available geospatial objects: # help(package=&#39;maps&#39;) # Map of the world: map(&#39;world&#39;,col=&quot;grey&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05, mar=rep(0,4),border=0, ylim=c(-80,80) ) 7.1.7 mapdata Package The mapdata package extends the maps package with more geospatial datasets: china japan Other world versions like pacific Centric (world2Hires) See complete list with help(package='mapdata') # Load library library(mapdata) # Check all available geospatial objects: # help(package=&#39;mapdata&#39;) # Map of Japan: map(&#39;japan&#39;,col=&quot;black&quot;, lwd=1, mar=rep(0,4) ) 7.1.8 oz Package The oz package provides several geospatial object concerning Australia. Plot the general country using the oz() function, or states using nsw(), qld() and so on. Type help(package='oz') for documentation. # Load library library(oz) # Check all available geospatial objects: # help(package=&#39;oz&#39;) # Map of Australia par(mar=rep(0,4)) oz( states=TRUE, col=&quot;#69b3a2&quot;) 7.1.9 Rgdal and Geojsonio to Read Shapefiles and .geojson Files If you are not satisfied with the previous options, you can search the web to find the spatial object you need. This information will most likely be stored under on of those 2 formats: shape file: can be read with the rgdal package as described here. geojson file: can be read with geojsonio as explained here. 7.1.9.1 Open and Plot Shapefiles in R Shapefiles are a common way to store geospatial data. This section explains how to read it with R and the rgdal package, and how to plot it in base R or with ggplot2. If you did not find the geospatial data you need in existing R packages (see the map section), you need to find this information elsewhere on the web. Usually, you will find it as a shape file format. This format is composed by several files that you need to keep together in the same folder. Note: if you found a .geoJSON file, read this section instead. 7.1.10 Find and Download a Shapefile You need to dig the internet to find the shape file you are interested in. For instance, this URL will redirect you to a zipped shape file containing the world boundaries. You can download it and unzip it with R: # Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.) download.file(&quot;http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip&quot; , destfile=&quot;DATA/world_shape_file.zip&quot;) # You now have it in your current working directory, have a look! # Unzip this file. You can do it with R (as below), or clicking on the object you downloaded. system(&quot;unzip DATA/world_shape_file.zip&quot;) # -- &gt; You now have 4 files. One of these files is a .shp file! (TM_WORLD_BORDERS_SIMPL-0.3.shp) 7.1.11 Read it with rgdal The rgdal package offers the readOGR() function that allows to read shapefile using the following syntax. As a result you get a geospatial object (my_spdf here) that contains all the information we need for further mapping. Please try th following command to understand how this object works: summary(my_spdf): tells you the max and min coordinates, the kind of projection in use. length(my_spdf): how many regions you have. head(my_spdf@data): the firs few rows of the data slot associated with the regions. # Read this shape file with the rgdal library. library(rgdal) my_spdf &lt;- readOGR(dsn=path.expand(&quot;C:/Users/Downloads/Files/World-Shapefiles&quot;), layer=&quot;TM_WORLD_BORDERS_SIMPL-0.3&quot;) 7.1.12 Plot it with base R The basic plot() function knows how to plot a geospatial object. Thus you just need to pass it my_spdf and add a couple of options to customize the output. # Basic plot of this shape file: par(mar=c(0,0,0,0)) plot(my_spdf, col=&quot;#f2f2f2&quot;, bg=&quot;skyblue&quot;, lwd=0.25, border=0 ) 7.1.13 Plot it with ggplot2 It is totally possible (and advised imo) to build the map with ggplot2. However, ggplot2 takes as input data frames, not geospatial data. my_spdf thus needs to be transformed using the tidy() function of the broom package. The region argument of this function expect one of the column name if the (data?) slot. It will be the region name in the new dataframe. Once the data frame is created, it is plotted using the geom_polygon() function as described below. # &#39;fortify&#39; the data to get a dataframe format required by ggplot2 library(broom) spdf_fortified &lt;- tidy(my_spdf, region = &quot;NAME&quot;) # Plot it library(ggplot2) ggplot() + geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=&quot;#69b3a2&quot;, color=&quot;white&quot;) + theme_void() 7.1.14 Open and Plot Geojson files in R Geojson files are a common way to store geospatial data. This section explains how to read it with R and the geojsonio package, and how to plot it in base R or with ggplot2. If you did not find the geospatial data you need in existing R packages (see the map section), you need to find this information elsewhere on the web. It will often be stored as a .geomJSON format. This section explains how to read it. Note: if you found a shapefile, read this section instead. 7.1.15 Find and download a .geoJSON file You need to dig the internet to find the geoJSON file you are interested in. For instance, this URL provides a file containing french region boundaries. You can load it in R with: # Let&#39;s read the jeoJson file that is stored on the web with the geojsonio library: library(geojsonio) spdf &lt;- geojson_read(&quot;https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson&quot;, what = &quot;sp&quot;) That’s it! You now have a geospatial object called spdf. I strongly advise to read this section to learn how to manipulate it. Just in case, here is how to plot it in base R and with ggplot2. 7.1.16 Plot it with base R The basic plot() function knows how to plot a geospatial object. Thus you just need to pass it spdf and add a couple of options to customize the output. # Select only the region #6 spdf@data$mystate = substr( spdf@data$code, 1, 2) spdf_region_6 = spdf[ spdf@data$mystate == &quot;06&quot; , ] # plot the selected are with sp library(sp) par(mar=c(0,0,0,0)) plot(spdf_region_6, col=&quot;grey&quot;) 7.1.17 Plot it with ggplot2 It is totally possible (and advised imo) to build the map with ggplot2. However, ggplot2 takes as input data frames, not geospatial data. The geospatial object thus needs to be transformed using the tidy() function of the broom package. Once the data frame is created, it is plotted using the geom_polygon() function as described below. # &#39;fortify&#39; the data to get a dataframe format required by ggplot2 library(broom) spdf_fortified &lt;- tidy(spdf_region_6) # Plot it library(ggplot2) ggplot() + geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=&quot;#69b3a2&quot;, color=&quot;white&quot;) + theme_void() + coord_map() 7.1.18 Geospatial Data Manipulation Once you’ve got your geospatial data loaded into R, you are ready to manipulate it. Examples below show how to select a region, how to simplfy the boundaries to get a lighter object, how to compute the region centroids and more. 7.1.18.1 Select a Region You can filter the geospatial object to plot only a subset of the regions. The following code keeps only Africa and plot it. # Keep only data concerning Africa africa &lt;- my_spdf[my_spdf@data$REGION==2 , ] # Plot africa par(mar=c(0,0,0,0)) plot(africa , xlim=c(-20,60) , ylim=c(-40,35), col=&quot;steelblue&quot;, lwd=0.5 ) 7.1.19 Simplify Geospatial Object It’s a common task to simplify the geospatial object. Basically, it decreases the border precision which results in a lighter object that will be plotted faster. The rgeos package offers the gSimplify() function to makes the simplification. Play with the tol argument to control simplification rate. # Simplification with rgeos library(rgeos) africaSimple &lt;- gSimplify(africa, tol = 4, topologyPreserve = TRUE) # Plot it par(mar=c(0,0,0,0)) plot(africaSimple , xlim=c(-20,60) , ylim=c(-40,35), col=&quot;#59b2a3&quot;, lwd=0.5 ) 7.1.20 Compute Region Centroid Another common task is to compute the centroid of each region to add labels. This is accomplished using the gCentroid() function of the rgeos package. # Load the rgeos library library(rgeos) # The gCentroid function computes the centroid of each region: # gCentroid(africa, byid=TRUE) # select big countries only africaBig &lt;- africa[which(africa@data$AREA&gt;75000), ] # Small manipulation to put it in a dataframe: centers &lt;- cbind.data.frame(data.frame(gCentroid(africaBig, byid=TRUE), id=africaBig@data$FIPS)) # Show it on the map? par(mar=c(0,0,0,0)) plot(africa , xlim=c(-20,60) , ylim=c(-40,35), lwd=0.5 ) text(centers$x, centers$y, centers$id, cex=.9, col=&quot;#69b3a2&quot;) 7.2 Cartogram A cartogram is a map in which the geometry of regions is distorted in order to convey the information of an alternate variable. The region area will be inflated or deflated according to its numeric value. In R, the cartogram package is the best way to build it, as illustrated in the examples below. 7.2.0.1 The Cartogram Package: Step by Step The cartogram package allows to build cartograms in R. It requires a geospatial object as input, with a numeric variable in the data slot. This variable will be used to distort region shape. The following example will guide you through the process: 7.2.1 Basic Cartogram with R This section describes how to build a very simple cartogram with R and the cartogram package. It is a step a step approach leading to a choropleth map with distorted region size. 7.2.1.1 Very Basic Map A cartogram is a map in which the geometry of regions is distorted in order to convey the information of an alternate variable. In this section, we are going to draw a map of Africa where the size of each country is distorted proportionally to its population. First of all, you need to understand what a geospatial object is, and how to plot it with R. See the background map section of the gallery! Let’s use the maptools library which provides a geospatial object with the Africa’s boundaries. Note that you can get a similar object from a shapefile, or from a geojson file! We can plot the boundaries using the plot() function: # Get the shape file of Africa library(maptools) data(wrld_simpl) afr=wrld_simpl[wrld_simpl$REGION==2,] # We can visualize the region&#39;s boundaries with the plot function plot(afr) 7.2.2 Distort Country Size with cartogram The geospatial object has a data slot: an attached data frame that provides several information for each region. It notably gives the population of each country in 2005. We can thus use the cartogram library to distort the size of each country, proportionally to this column. The new geospatial object we get can be draw with the same plot function! See how Nigeria is now bigger? # We work with the cartogram library library(cartogram) # construct a cartogram using the population in 2005 afr_cartogram &lt;- cartogram(afr, &quot;POP2005&quot;, itermax=5) # This is a new geospatial object, we can visualise it! plot(afr_cartogram) 7.2.3 Cartogram and Choropleth Cartogram are very often used in combination with choropleth map. Since we have a spatial object and a numeric value associated with each region, it is possible to color each region according to its value. Let’s use ggplot2 to add some color, title, legend, background and so on. We now have a nice cartogram chloropleth map of Africa! # It is a new geospatial object: we can use all the usual techniques on it! Let&#39;s start with a basic ggplot2 chloropleth map: library(tidyverse) library(broom) spdf_fortified &lt;- tidy(afr_cartogram) spdf_fortified = spdf_fortified %&gt;% left_join(. , afr_cartogram@data, by=c(&quot;id&quot;=&quot;ISO3&quot;)) ggplot() + geom_polygon(data = spdf_fortified, aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9) + coord_map() + theme_void() 7.2.4 Make it Pretty Same thing with a tiny bit of customization. See more explanation in the choropleth an ggplot2 sections. # As seen before, we can do better with a bit of customization library(viridis) ggplot() + geom_polygon(data = spdf_fortified, aes(fill = POP2005/1000000, x = long, y = lat, group = group) , size=0, alpha=0.9) + theme_void() + scale_fill_viridis(name=&quot;Population (M)&quot;, breaks=c(1,50,100, 140), guide = guide_legend( keyheight = unit(3, units = &quot;mm&quot;), keywidth=unit(12, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1)) + labs( title = &quot;Africa 2005 Population&quot; ) + ylim(-35,35) + theme( text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), plot.title = element_text(size= 22, hjust=0.5, color = &quot;#4e4d47&quot;, margin = #margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), legend.position = c(0.2, 0.26) ) + coord_map() &lt; 7.2.5 Application on Hexbin Map A hexbin map is a map where each region is represented as an hexagon. It is possible to apply a cartogram algorithm to such a map, as suggested in the example below. Note that you probably want to explore the hexbin map section before making a cartogram with it. 7.2.6 Basic Cartogram with R This section describes how to apply the cartogram method to a hexbin map. Each region is represented as a hexagon which size is distorted according to a numeric variable. It uses the cartogram package. 7.2.6.1 Basic Hexbin Map The first step is to build a basic hexbin map of the US. Note that the gallery dedicates a whole section to this kind of map. Hexagones boundaries are provided here. You have to download it at the geojson format and load it in R thanks to the geojson_read() function. You get a geospatial object that you can plot using the plot() function. This is widely explained in the background map section of the gallery. # library library(tidyverse) library(geojsonio) library(RColorBrewer) library(rgdal) # Download the Hexagones boundaries at geojson format here: https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map. # Load this file. (Note: I stored in a folder called DATA) spdf &lt;- geojson_read(&quot;C:/Users/kwilliam/Downloads/us_states_hexgrid.geojson&quot;, what = &quot;sp&quot;) # Bit of reformating spdf@data = spdf@data %&gt;% mutate(google_name = gsub(&quot; \\\\(United States\\\\)&quot;, &quot;&quot;, google_name)) # Show it plot(spdf) 7.2.7 Distort Hexagone Size with cartogram The geospatial object has a data slot: an attached data frame that provides several information for each region. It is called spdf@data here. We need to add a new column to this data frame. This column will provide the population per state, available at .csvformat here. We can thus use the cartogram library to distort the size of each state (=hexagon), proportionally to this column. The new geospatial object we get can be drawn with the same plot function. # Library library(cartogram) # Load the population per states (source: https://www.census.gov/data/tables/2017/demo/popest/nation-total.html) pop &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/pop_US.csv&quot;, sep=&quot;,&quot;, header=T) pop$pop &lt;- pop$pop / 1000000 # merge both spdf@data &lt;- spdf@data %&gt;% left_join(., pop, by=c(&quot;google_name&quot;=&quot;state&quot;)) # Compute the cartogram, using this population information cartogram &lt;- cartogram(spdf, &#39;pop&#39;) # First look! plot(cartogram) 7.2.8 Cartogram and Choropleth To get a satisfying result, let’s: Color hexagones according to their population Add legend Add background color Add title Add state name. Label position is computed thanks to the gCentroid() function. # Library library(broom) # for the tidy function library(rgeos) # for the gcentroid function # tidy data to be drawn by ggplot2 (broom library of the tidyverse) carto_fortified &lt;- tidy(cartogram, region = &quot;google_name&quot;) carto_fortified &lt;- carto_fortified %&gt;% left_join(. , cartogram@data, by=c(&quot;id&quot;=&quot;google_name&quot;)) # Calculate the position of state labels centers &lt;- cbind.data.frame(data.frame(gCentroid(cartogram, byid=TRUE), id=cartogram@data$iso3166_2)) # plot ggplot() + geom_polygon(data = carto_fortified, aes(fill = pop, x = long, y = lat, group = group) , size=0.05, alpha=0.9, color=&quot;black&quot;) + scale_fill_gradientn( colours=brewer.pal(7,&quot;BuPu&quot;), name=&quot;population (in M)&quot;, guide=guide_legend( keyheight = unit(3, units = &quot;mm&quot;), keywidth=unit(12, units = &quot;mm&quot;), title.position = &#39;top&#39;, label.position = &quot;bottom&quot;) ) + geom_text(data=centers, aes(x=x, y=y, label=id), color=&quot;white&quot;, size=3, alpha=0.6) + theme_void() + ggtitle( &quot;Another look on the US population&quot; ) + theme( legend.position = c(0.5, 0.9), legend.direction = &quot;horizontal&quot;, text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f9&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f9&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f9&quot;, color = NA), plot.title = element_text(size= 22, hjust=0.5, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), ) + coord_map() 7.2.8.1 Animated Version The following example describes extensively how to make a smooth transition between a choropleth map and a cartogram. This is possible thanks to the tweenR and the gganimate libraries. See the explanations here. See the animation section for more examples of animation with R. 7.2.9 A Smooth Transition between Choropleth and Cartogram This section describes how to make a smooth transition GIF between a choropleth map and a cartogram. It starts by doing a basic map of Africa and then distorts country size using the cartogram library. ggplot2 is used to build a good looking choropleth map. Animation is made possible thanks to the tweenR and gganimate packages. 7.2.9.1 Goal and Packages At the end of this tutorial, you should get a gif file containing the following animation. Before we start, make sure you’ve got the following libraries: # Please Ignore, specific to a bug in the gallery library(pacman) pacman::p_unload(pacman::p_loaded(), character.only = TRUE) # Load libraries library(dplyr) # data wrangling library(cartogram) # for the cartogram library(ggplot2) # to realize the plots library(broom) # from geospatial format to data frame library(tweenr) # to create transition dataframe between 2 states library(gganimate) # To realize the animation library(maptools) # world boundaries coordinates library(viridis) # for a nice color palette 7.2.10 A Basic Map of Africa The maptools library provides all the information we need to draw a map of Africa. All the country boundaries are stored in the world_simpl object. Let’s load this object, keep only Africa, and draw a basic representation. This requires only 3 lines of code. 7.2.11 Compute Cartogram Boundaries The afr object is a spatial object. Thus it has a data slot that gives a few information concerning each region. You can visualise this info typing afr@data in our case. You will see a column called POP2005, providing the number of inhabitants per country in 2005. Using this information we can use the cartogram library to build. a cartogram! Basically, it will distort the shape of every country proportionally to its number of inhabitants. The output is a new geospatial object that we can map like we’ve done before. As you can see, Nigeria appears way bigger on this map, since it has a population of about 141M inhabitants. # construct a cartogram using the population in 2005 afr_cartogram &lt;- cartogram(afr, &quot;POP2005&quot;, itermax=7) # A basic representation plot(afr_cartogram) 7.2.12 A Nicer Representation using ggplot2 Let’s improve the appearance of the previous maps using the ggplot2 library. Note that ggplot2 uses data frame and not geospatial object. The transformation to a data frame is done using the tidy() function of the broom package. Since it does not transfer the data slot automatically, we merge it afterward. The geom_polygon() function is used to draw map data. See the graph #327 of the gallery for more explanation on choropleth maps with ggplot2. # Transform these 2 objects in dataframe, plotable with ggplot2 afr_cartogram_df &lt;- tidy(afr_cartogram) %&gt;% left_join(. , afr_cartogram@data, by=c(&quot;id&quot;=&quot;ISO3&quot;)) afr_df &lt;- tidy(afr) %&gt;% left_join(. , afr@data, by=c(&quot;id&quot;=&quot;ISO3&quot;)) # And using the advices of chart #331 we can custom it to get a better result: ggplot() + geom_polygon(data = afr_df, aes(fill = POP2005/1000000, x = long, y = lat, group = group) , size=0, alpha=0.9) + theme_void() + scale_fill_viridis(name=&quot;Population (M)&quot;, breaks=c(1,50,100, 140), guide = guide_legend( keyheight = unit(3, units = &quot;mm&quot;), keywidth=unit(12, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1)) + labs( title = &quot;Africa&quot;, subtitle=&quot;Population per country in 2005&quot; ) + ylim(-35,35) + theme( text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), plot.title = element_text(size= 22, hjust=0.5, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), plot.subtitle = element_text(size= 13, hjust=0.5, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), legend.position = c(0.2, 0.26) ) + coord_map() # You can do the same for afr_cartogram_df 7.2.13 Compute Several Intermediate Maps The goal being to make a smooth animation between the 2 maps, we need to create a multitude of intermediate maps using interpolation. This is possible thanks to the awesome tweenr library. (See a few examples in the animation section of the gallery). At the end we’ve got a big data frame which contains enough information to draw 30 maps. Three of these maps are presented above. # Give an id to every single point that compose the boundaries afr_cartogram_df$id &lt;- seq(1,nrow(afr_cartogram_df)) afr_df$id &lt;- seq(1,nrow(afr_df)) # Bind both map info in a data frame. 3 states: map --&gt; cartogram --&gt; map data &lt;- rbind(afr_df, afr_cartogram_df, afr_df) # Set transformation type + time data$ease &lt;- &quot;cubic-in-out&quot; data$time &lt;- rep(c(1:3), each=nrow(afr_df)) # Calculate the transition between these 2 objects? dt &lt;- tween_elements(data, time=&#39;time&#39;, group=&#39;id&#39;, ease=&#39;ease&#39;, nframes = 30) # check a few frame ggplot() + geom_polygon(data = dt %&gt;% filter(.frame==0) %&gt;% arrange(order), aes(fill = POP2005, x = long, y = lat, group = group), size=0, alpha=0.9 ) ggplot() + geom_polygon(data = dt %&gt;% filter(.frame==5) %&gt;% arrange(order), aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9 ) ggplot() + geom_polygon(data = dt %&gt;% filter(.frame==10) %&gt;% arrange(order), aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9 ) 7.2.14 Make the Animation with gganimate The last step consists at building the 30 maps and compile them in a .gif file. This is done using the gganimate library. This library uses another aesthetic: frame. A new plot is made for each frame, that allows us to build the gif afterwards. Note: This code uses the old version of gganimate. It needs to be updated. Please drop me a message if you can help me with that! # Plot p &lt;- ggplot() + geom_polygon(data = dt %&gt;% arrange(order) , aes(fill = POP2005/1000000, x = long, y = lat, group = group, frame=.frame) , size=0, alpha=0.9) + theme_void() + scale_fill_viridis( name=&quot;Population (M)&quot;, breaks=c(1,50,100, 140), guide = guide_legend( keyheight = unit(3, units = &quot;mm&quot;), keywidth=unit(12, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1) ) + labs( title = &quot;Africa&quot;, subtitle=&quot;Population per country in 2005&quot; ) + ylim(-35,35) + theme( text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f4&quot;, color = NA), plot.title = element_text(size= 22, hjust=0.5, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), plot.subtitle = element_text(size= 13, hjust=0.5, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), legend.position = c(0.2, 0.26) ) + coord_map() # Make the animation #animation::ani.options(interval = 1/9) gganimate(p, &quot;Animated_Africa.gif&quot;, title_frame = F) 7.2.14.1 Note: gganimate in this example deprecated. Check https://github.com/thomasp85/gganimate for current usage. 7.2.14.2 Conclusion This post uses several concepts that are extensively described in the R graph gallery: The choropleth map section gives several examples of choropleth maps, using different input types and several tools. The cartogram section gives further explanation about cartograms. The animation section explains more deeply how tweenR and gganimate work The map section is a good starting point if you are lost in the map related packages jungle. If you are interested in dataviz, feel free to visit the gallery, or to follow me on twitter! 7.3 Choropleth Map A choropleth map displays divided geographical areas or regions that are coloured in relation to a numeric variable. This section provides many examples build with R. It focuses on the leaflet package for interactive versions, and the ggplot2 for static ones. 7.3.1 Choropleth map with R and ggplot2 This section describes how to build a choropleth map with R and the ggplot2 package. It shows how to load geospatial data in R, merge region features and build the map. Reproducible code is provided. Two inputs are needed to build a choropleth map: A geospatial object providing region boundaries (city districts of the south of France in this example). Data are available at the geoJSON format here, and this section explains in detail how to read and represent geoJSON format with R. A numeric variable that we use to color each geographical unit. Here we will use the number of restaurant per city. The data has been found here. 7.3.1.1 Find and Download a .geoJSON File This step has been extensively describe in chart #325. The geojsonio library allows to read this type of format in R. To plot it with ggplot2, we first need to transform it to a data frame using the tidy function of the broom library. Then, the geom_polygon() function allows to represent this type of object! # Geospatial data available at the geojson format library(geojsonio) spdf &lt;- geojson_read(&quot;https://raw.githubusercontent.com/gregoiredavid/france-geojson/master/communes.geojson&quot;, what = &quot;sp&quot;) # Since it is a bit to much data, I select only a subset of it: spdf &lt;- spdf[ substr(spdf@data$code,1,2) %in% c(&quot;06&quot;, &quot;83&quot;, &quot;13&quot;, &quot;30&quot;, &quot;34&quot;, &quot;11&quot;, &quot;66&quot;) , ] 7.3.2 Basic Background Map We now have a geospatial object called spdf. This object could be plotted as is using the plot() function as explained here. However, an additional step is required to plot it with ggplot2 that expects a data frame as input. It is possible to make the conversion using the tidy function of the broom package as shown below. Finally, geom_polygon is used to plot the shape. # I need to fortify the data AND keep trace of the commune code! (Takes ~2 minutes) library(broom) spdf_fortified &lt;- tidy(spdf, region = &quot;code&quot;) # Now I can plot this shape easily as described before: library(ggplot2) ggplot() + geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=&quot;white&quot;, color=&quot;grey&quot;) + theme_void() + coord_map() 7.3.3 Read the Numeric Variable The number of restaurant per city district has been found on the internet and a clean version is stored on the gallery website. It is thus easy to read it with read.table. Before doing a choropleth map, it is a good practice to check the distribution of your variable. Here, we have a ‘long tail’ distribution: a few cities have a lot of restaurant. Thus we will probably need to apply a log scale to our color palette. It will avoid that all the variation is absorbed by these high values. # read data data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/data_on_french_states.csv&quot;, header=T, sep=&quot;;&quot;) head(data) # Distribution of the number of restaurant? library(dplyr) data %&gt;% ggplot( aes(x=nb_equip)) + geom_histogram(bins=20, fill=&#39;skyblue&#39;, color=&#39;#69b3a2&#39;) + scale_x_log10() 7.3.4 Merge Geospatial and Numeric Data This is a key step in choropleth map: your 2 inputs must have a id in common to make the link between them! # Make the merge spdf_fortified = spdf_fortified %&gt;% left_join(. , data, by=c(&quot;id&quot;=&quot;depcom&quot;)) # Note that if the number of restaurant is NA, it is in fact 0 spdf_fortified$nb_equip[ is.na(spdf_fortified$nb_equip)] = 0.001 7.3.5 Read the Numeric Variable We can make a first basic choropleth map. We just need to add fill = our value in the aesthetic of our polygons. ggplot() + geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group)) + theme_void() + coord_map() 7.3.6 Customized Choropleth Map with R and ggplot2 There is a bit of work to do to get a descent figure. We need to change the color palette, improve the legend, use a log scale transformation for the colorscale, change background and add titles and explanation. Here is the code to do that, and the final result! library(viridis) p &lt;- ggplot() + geom_polygon(data = spdf_fortified, aes(fill = nb_equip, x = long, y = lat, group = group) , size=0, alpha=0.9) + theme_void() + scale_fill_viridis(trans = &quot;log&quot;, breaks=c(1,5,10,20,50,100), name=&quot;Number of restaurant&quot;, guide = guide_legend( keyheight = unit(3, units = &quot;mm&quot;), keywidth=unit(12, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1) ) + labs( title = &quot;South of France Restaurant concentration&quot;, subtitle = &quot;Number of restaurant per city district&quot;, caption = &quot;Data: INSEE | Creation: Yan Holtz | r-graph-gallery.com&quot; ) + theme( text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), plot.title = element_text(size= 22, hjust=0.01, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), plot.subtitle = element_text(size= 17, hjust=0.01, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.43, l = 2, unit = &quot;cm&quot;)), plot.caption = element_text( size=12, color = &quot;#4e4d47&quot;, margin = margin(b = 0.3, r=-99, unit = &quot;cm&quot;) ), legend.position = c(0.7, 0.09) ) + coord_map() p 7.3.7 Choropleth Map with R This section explains how to build a choropleth map with R. It shows how to load geospatial data, bind it to a numeric value and draw the map. Two inputs are needed to build a choropleth map: A geospatial object providing region boundaries. A numeric variable that will be used to control region color. 7.3.8 Find and Download a Shape File Note: this step is described in detail here. Read it if you are not familiar with geospatial data management in R. The region boundaries required to make maps are usually stored in geospatial objects. Those objects can come from shapefiles, geojson files or provided in a R package. See the map section for possibilities. Let’s get a geospatial object from a shape file available here. # Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.) download.file(&quot;http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip&quot; , destfile=&quot;DATA/world_shape_file.zip&quot;) # You now have it in your current working directory, have a look! # Unzip this file. You can do it with R (as below), or clicking on the object you downloaded. system(&quot;unzip DATA/world_shape_file.zip&quot;) # -- &gt; You now have 4 files. One of these files is a .shp file! (TM_WORLD_BORDERS_SIMPL-0.3.shp) And let’s load it in R # Read this shape file with the rgdal library. library(rgdal) my_spdf &lt;- readOGR( dsn= paste0(getwd(),&quot;/DATA/world_shape_file/&quot;) , layer=&quot;TM_WORLD_BORDERS_SIMPL-0.3&quot;, verbose=FALSE ) # Select Africa only africa &lt;- my_spdf[my_spdf@data$REGION==2 , ] # -- &gt; Now you have a Spdf object (spatial polygon data frame). You can start doing maps! 7.3.9 Plot the Map The hardest part is to build the color palette that will be used on the map. The RColorBrewer package makes it a breeze to get a nice set of colors thanks to its brewer.pal() function. Once the palette is created, POP2005 is cut in several bins using the cut() function, and the appropriate color is attributed to each bin. Finally, build the map with plot() and give the color vector to the col argument to get the choropleth. # Plot plot(africa , xlim=c(-20,60) , ylim=c(-40,40)) 7.3.10 Visualize the Numeric Variable In a choropleth map, each region has a color that represents the value of a numeric variable. In this example, this variable is already available in the data slot of the geospatial object. You can have a look to it typing africa@data in the terminal. This object is a data frame. It is thus possible to visualize the distribution of POP2005 with a classic histogram made in ggplot2. # library library(dplyr) library(ggplot2) # Make sure the variable you are studying is numeric africa@data$POP2005 &lt;- as.numeric( africa@data$POP2005 ) # Distribution of the population per country? africa@data %&gt;% ggplot( aes(x=as.numeric(POP2005))) + geom_histogram(bins=20, fill=&#39;#69b3a2&#39;, color=&#39;white&#39;) 7.3.11 Build the Choropleth The hardest part is to build the color palette that will be used on the map. The RColorBrewer package makes it a breeze to get a nice set of colors thanks to its brewer.pal() function. Once the palette is created, POP2005 is cut in several bins using the cut() function, and the approriate color is attributed to each bin. Finally, build the map with plot() and give the color vector to the col argument to get the choropleth. # Palette of 30 colors library(RColorBrewer) my_colors &lt;- brewer.pal(9, &quot;Reds&quot;) my_colors &lt;- colorRampPalette(my_colors)(30) # Attribute the appropriate color to each country class_of_country &lt;- cut(africa@data$POP2005, 30) my_colors &lt;- my_colors[as.numeric(class_of_country)] # Make the plot plot(africa , xlim=c(-20,60) , ylim=c(-40,40), col=my_colors , bg = &quot;#A6CAE0&quot;) 7.4 Connection Map A connection map shows the connections between several positions on a map. The link between 2 locations is usually drawn using great circle: the shortest route between them. It results in a rounded line that gives a really pleasant look to the map. In R, this is made possible thanks to libraries like geosphere. 7.4.0.1 Step by Step The following example is a step by step approach to great circles in R. It will guides you through the use of the gcintermediate() function of the geosphere package. It notably tackles the issue that arises when 2 cities have their shortest distance passing behind the globe. Explore it here. 7.4.1 How to Draw Connecting Routes on Map with R This section explains how to draw connection lines between several locations on a map, using R. Method relies on the gcIntermediate function from the geosphere package. Instead of making straight lines, it draws the shortest routes, using great circles. 7.4.1.1 Draw an Empty Map Let’s start by drawing a world map backgroud. Fortunately, the world shape is provided by the maps library. It can easily be plotted using the map() function that accepts a few arguments for customization. Note: visit the background map section if you want to discover more options to build map in R. # World map is available in the maps package library(maps) # No margin par(mar=c(0,0,0,0)) # World map map(&#39;world&#39;, col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05, mar=rep(0,4),border=0, ylim=c(-80,80) ) 7.4.2 Add 3 Cities It’s relatively straightforward to add circles at specific positions using the points() function. The hardest part is probably to find out the longitute and latitude of the cities you are interested in. # Dplyr for data wrangling and pipe function library(dplyr) # Cities Buenos_aires &lt;- c(-58,-34) Paris &lt;- c(2,49) Melbourne &lt;- c(145,-38) # Data frame data &lt;- rbind(Buenos_aires, Paris, Melbourne) %&gt;% as.data.frame() colnames(data) &lt;- c(&quot;long&quot;,&quot;lat&quot;) # Show the cities on the map map(&#39;world&#39;, col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05, mar=rep(0,4),border=0, ylim=c(-80,80) ) points(x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=3, pch=20) 7.4.3 Show Connection between Cities Now we can connect cities drawing the shortest route between them. This is done using great circles, what gives a better visualization than using straight lines. The geosphere package provides the gcIntermediate() function that computes the path. This path can then be plotted using the lines() function. # Load geosphere library(geosphere) # Background map map(&#39;world&#39;, col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05, mar=rep(0,4),border=0, ylim=c(-80,80) ) # Dot for cities points(x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=3, pch=20) # Compute the connection between Buenos Aires and Paris inter &lt;- gcIntermediate(Paris, Buenos_aires, n=50, addStartEnd=TRUE, breakAtDateLine=F) # Show this connection lines(inter, col=&quot;slateblue&quot;, lwd=2) # Between Paris and Melbourne inter &lt;- gcIntermediate(Melbourne, Paris, n=50, addStartEnd=TRUE, breakAtDateLine=F) lines(inter, col=&quot;slateblue&quot;, lwd=2) 7.4.4 Correcting gcIntermediate Using the exact same method between Melbourne and Buenos Aires gives a pretty disapointing result as shown here. Indeed, there is a long horizontal line that appears, when we expect the connection to be done on the other side of the globe (and thus invisible) What happens is that gcintermediate follows the shortest path, which means it will go east from Australia until the date line, break the line and come back heading East from the pacific to South America. Because we do not want to see the horizontal line, we need to plot this connection in 2 steps. To do so we can use the following function, which breaks the line in 2 sections when the distance between 2 points is longer than 180 degrees: # A function to plot connections plot_my_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, ...){ inter &lt;- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F) inter=data.frame(inter) diff_of_lon=abs(dep_lon) + abs(arr_lon) if(diff_of_lon &gt; 180){ lines(subset(inter, lon&gt;=0), ...) lines(subset(inter, lon&lt;0), ...) }else{ lines(inter, ...) } } Let’s apply this function to plot the link between Melbourne and Buenos Aires. Better, isn’t it? # Background map map(&#39;world&#39;,col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) ) # Circles for cities points(x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=3, pch=20) # Connections plot_my_connection(Paris[1], Paris[2], Melbourne[1], Melbourne[2], col=&quot;slateblue&quot;, lwd=2) plot_my_connection(Buenos_aires[1], Buenos_aires[2], Melbourne[1], Melbourne[2], col=&quot;slateblue&quot;, lwd=2) plot_my_connection(Buenos_aires[1], Buenos_aires[2], Paris[1], Paris[2], col=&quot;slateblue&quot;, lwd=2) 7.4.5 Apply it to Several Pairs of Cities If we want to plot many connections, it is totally doable to build a for loop that draws them one by one. Moreover, note the use of the text function to add city names. # Create dataset data &lt;- rbind( Buenos_aires=c(-58,-34), Paris=c(2,49), Melbourne=c(145,-38), Saint.Petersburg=c(30.32, 59.93), Abidjan=c(-4.03, 5.33), Montreal=c(-73.57, 45.52), Nairobi=c(36.82, -1.29), Salvador=c(-38.5, -12.97) ) %&gt;% as.data.frame() colnames(data)=c(&quot;long&quot;,&quot;lat&quot;) # Generate all pairs of coordinates all_pairs &lt;- cbind(t(combn(data$long, 2)), t(combn(data$lat, 2))) %&gt;% as.data.frame() colnames(all_pairs) &lt;- c(&quot;long1&quot;,&quot;long2&quot;,&quot;lat1&quot;,&quot;lat2&quot;) # background map par(mar=c(0,0,0,0)) map(&#39;world&#39;,col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) ) # add every connections: for(i in 1:nrow(all_pairs)){ plot_my_connection(all_pairs$long1[i], all_pairs$lat1[i], all_pairs$long2[i], all_pairs$lat2[i], col=&quot;skyblue&quot;, lwd=1) } # add points and names of cities points(x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=2, pch=20) text(rownames(data), x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=1, pos=4) 7.4.6 An Alternative using the greatCircle Function This is the method suggested by the Simply Statistics Blog to draw a twitter connection map. The idea is to calculate the whole great circle, and keep only the part that stays in front of the map, never going behind it. # A function that keeps the good part of the great circle, by Jeff Leek: getGreatCircle &lt;- function(userLL,relationLL){ tmpCircle = greatCircle(userLL,relationLL, n=200) start = which.min(abs(tmpCircle[,1] - data.frame(userLL)[1,1])) end = which.min(abs(tmpCircle[,1] - relationLL[1])) greatC = tmpCircle[start:end,] return(greatC) } # background map map(&#39;world&#39;,col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) ) # map 3 connections: great &lt;- getGreatCircle(Paris, Melbourne) lines(great, col=&quot;skyblue&quot;, lwd=2) great &lt;- getGreatCircle(Buenos_aires, Melbourne) lines(great, col=&quot;skyblue&quot;, lwd=2) great &lt;- getGreatCircle(Paris, Buenos_aires) lines(great, col=&quot;skyblue&quot;, lwd=2) # City names and dots points(x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=3, pch=20) text(rownames(data), x=data$long, y=data$lat, col=&quot;slateblue&quot;, cex=1, pos=4) 7.4.6.1 Conclusion Note that the R graph gallery offers heaps of other map examples made with R. It also offers a whole section dedicated to connection maps. You can follow the gallery on Twitter to be aware or recent updates. 7.4.7 Visualizing Geographic Connections This document provides a few suggestions for the visualization of geographical connections. The dataset considered here is available on github. It is based on about 13,000 tweets containing the #surf hashtag. These tweets have been recovered on a 10 months period, and those with both current geo location and correct city of origin have been kept. You can learn more on this project in this dedicated github repository. The dataset provides longitude and latitude for both the home location of tweeters, and their instant geolocation as well. Basically it looks like that: # Libraries library(tidyverse) library(hrbrthemes) library(viridis) library(DT) library(kableExtra) options(knitr.table.format = &quot;html&quot;) library(jpeg) library(maps) library(geosphere) library(grid) # Load dataset from github (Surfer project) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/19_MapConnection.csv&quot;) # Show long format tmp &lt;- data %&gt;% tail(5) %&gt;% mutate(homename = gsub( &quot;, Western Australia&quot;, &quot;&quot;, homename)) %&gt;% mutate(homename = gsub( &quot;, France&quot;, &quot;&quot;, homename)) %&gt;% mutate(homename = gsub( &quot; - Bali - Indonesia&quot;, &quot;&quot;, homename)) %&gt;% mutate(homelat=round(homelat,1), homelon=round(homelon,1), travellat=round(travellat,1), travellon=round(travellon,1)) %&gt;% dplyr::select(homename, homelat, homelon, travelcountry, travellat, travellon) tmp %&gt;% kbl() %&gt;% kable_classic(full_width = T, html_font = &quot;Cambria&quot;) homename homelat homelon travelcountry travellat travellon Bridgetown -34.0 116.1 Australia -34.2 115.0 Lille 50.6 3.1 France 45.0 -1.2 MX 23.6 -102.6 Mexico 21.0 -101.2 Kuta -8.7 115.2 Indonesia -8.7 115.2 Kuta -8.7 115.2 Indonesia -8.7 115.2 7.4.8 Showing Few Connections on a Map Before showing all the relationships provided in this dataset, it is important to understand how to visualize a unique connection on a map. It is a common practice to link 2 points using the shortest route between them instead of a straight line. It is called great circles. A special care is given for situations where cities are very far from each other and where the shortest connection thus passes behind the map. Here are the connection between 7 major cities on a world map: don=rbind( Paris=c(2,49), Melbourne=c(145,-38), Saint.Petersburg=c(30.32, 59.93), Abidjan=c(-4.03, 5.33), Montreal=c(-73.57, 45.52), Nairobi=c(36.82, -1.29), Salvador=c(-38.5, -12.97) ) %&gt;% as.data.frame() colnames(don)=c(&quot;long&quot;,&quot;lat&quot;) all_pairs=cbind(t(combn(don$long, 2)), t(combn(don$lat, 2))) %&gt;% as.data.frame() colnames(all_pairs)=c(&quot;long1&quot;,&quot;long2&quot;,&quot;lat1&quot;,&quot;lat2&quot;) plot_my_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, ...){ inter &lt;- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F) inter=data.frame(inter) diff_of_lon=abs(dep_lon) + abs(arr_lon) if(diff_of_lon &gt; 180){ lines(subset(inter, lon&gt;=0), ...) lines(subset(inter, lon&lt;0), ...) }else{ lines(inter, ...) } } # background map par(mar=c(0,0,0,0)) map(&#39;world&#39;,col=&quot;#f2f2f2&quot;, fill=TRUE, bg=&quot;white&quot;, lwd=0.05,mar=rep(0,4),border=0, ylim=c(-80,80) ) # add every connections: for(i in 1:nrow(all_pairs)){ plot_my_connection(all_pairs$long1[i], all_pairs$lat1[i], all_pairs$long2[i], all_pairs$lat2[i], col=&quot;#69b3a2&quot;, lwd=1) } # add points and names of cities points(x=don$long, y=don$lat, col=&quot;#69b3a2&quot;, cex=2, pch=20) text(rownames(don), x=don$long, y=don$lat, col=&quot;black&quot;, cex=1, pos=4) 7.4.9 Showing Many Connections on a Map It is then possible to use the same method for the whole dataset composed of about 10,000 connections. With such a sample size, it makes sense to group the connections that have exactly the same starting and ending points. Then it is important to represent the connections with high volume on top of the graphic, and those with small volume below it. Indeed this will allow to highlight the most important pattern and hide the noise of rare connections. Here I choosed to use a NASA night lights image as a background, inspired from this blog post. # Load dataset from github (Surfer project) data &lt;- read.csv(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/19_MapConnection.csv&quot;) # Download NASA night lights image download.file(&quot;https://www.nasa.gov/specials/blackmarble/2016/globalmaps/BlackMarble_2016_01deg.jpg&quot;, destfile = &quot;C:/Users/kwilliam/Downloads/BlackMarble_2016_01deg.jpg&quot;, mode = &quot;wb&quot;) # Load picture and render earth &lt;- readJPEG(&quot;C:/Users/kwilliam/Downloads/BlackMarble_2016_01deg.jpg&quot;, native = TRUE) earth &lt;- rasterGrob(earth, interpolate = TRUE) # Count how many times we have each unique connexion + order by importance summary=data %&gt;% dplyr::count(homelat,homelon,homecontinent, travellat,travellon,travelcontinent) %&gt;% arrange(n) # A function that makes a dateframe per connection (we will use these connections to plot each lines) data_for_connection=function( dep_lon, dep_lat, arr_lon, arr_lat, group){ inter &lt;- gcIntermediate(c(dep_lon, dep_lat), c(arr_lon, arr_lat), n=50, addStartEnd=TRUE, breakAtDateLine=F) inter=data.frame(inter) inter$group=NA diff_of_lon=abs(dep_lon) + abs(arr_lon) if(diff_of_lon &gt; 180){ inter$group[ which(inter$lon&gt;=0)]=paste(group, &quot;A&quot;,sep=&quot;&quot;) inter$group[ which(inter$lon&lt;0)]=paste(group, &quot;B&quot;,sep=&quot;&quot;) }else{ inter$group=group } return(inter) } # Creation d&#39;un dataframe complet avec les points de toutes les lignes faire. data_ready_plot=data.frame() for(i in c(1:nrow(summary))){ tmp=data_for_connection(summary$homelon[i], summary$homelat[i], summary$travellon[i], summary$travellat[i] , i) tmp$homecontinent=summary$homecontinent[i] tmp$n=summary$n[i] data_ready_plot=rbind(data_ready_plot, tmp) } data_ready_plot$homecontinent=factor(data_ready_plot$homecontinent, levels=c(&quot;Asia&quot;,&quot;Europe&quot;,&quot;Australia&quot;,&quot;Africa&quot;,&quot;North America&quot;,&quot;South America&quot;,&quot;Antarctica&quot;)) # Plot p &lt;- ggplot() + annotation_custom(earth, xmin = -180, xmax = 180, ymin = -90, ymax = 90) + geom_line(data=data_ready_plot, aes(x=lon, y=lat, group=group, colour=homecontinent, alpha=n), size=0.6) + scale_color_brewer(palette=&quot;Set3&quot;) + theme_void() + theme( legend.position=&quot;none&quot;, panel.background = element_rect(fill = &quot;black&quot;, colour = &quot;black&quot;), panel.spacing=unit(c(0,0,0,0), &quot;null&quot;), plot.margin=grid::unit(c(0,0,0,0), &quot;cm&quot;), ) + ggplot2::annotate(&quot;text&quot;, x = -150, y = -45, hjust = 0, size = 11, label = paste(&quot;Where surfers travel.&quot;), color = &quot;white&quot;) + ggplot2::annotate(&quot;text&quot;, x = -150, y = -51, hjust = 0, size = 8, label = paste(&quot;data-to-viz.com | NASA.gov | 10,000 #surf tweets recovered&quot;), color = &quot;white&quot;, alpha = 0.5) + #ggplot2::annotate(&quot;text&quot;, x = 160, y = -51, hjust = 1, size = 7, label = paste(&quot;Cacededi Air-Guimzu 2018&quot;), color = &quot;white&quot;, alpha = 0.5) + xlim(-180,180) + ylim(-60,80) + scale_x_continuous(expand = c(0.006, 0.006)) + coord_equal() p # Save at PNG #ggsave(&quot;IMG/Surfer_travel.png&quot;, width = 36, height = 15.22, units = &quot;in&quot;, dpi = 90) 7.4.10 Bubble Map This section is dedicated to map with markers displayed on top of it. These markers can be circles with size proportional to a numeric value, resulting in a bubble map. Before exploring this section, learn how to build the background map with R. 7.4.10.1 Interactive Bubble Maps with leaflet The leaflet R package is a wrapper of the Javascript leaflet.js library. It allows to build stunning interactive maps in minutes with R. Maps can be exported and standalong html files, or be embeded in a R markdown file or a shiny application. Check the 3 examples below to get the basics of interactive bubble maps with R. The leaflet R package is a wrapper of the Javascript leaflet.js library. It allows to build stunning interactive maps in minutes with R. Maps can be exported and standalong html files, or be embeded in a R markdown file or a shiny application. Check the 3 examples below to get the basics of interactive bubble maps with R. 7.4.11 Use leaflet control widget This section explains how to build a bubble map with R and the leaflet package. It shows a set of earthquakes and their intensity in the Pacific Ocean. leaflet is a R package allowing to build interactive maps. This section follows the leaflet introduction and explain how to build a bubble map. The input required to build such a map is a list of GPS coordinates, with a numeric value attributed to each location to control the bubble size and color. Markers are added using the addCircleMarkers() function, and bubble color is mapped to a color scale build with binning. # Load libraries library(leaflet) # Make data with several positions data_red &lt;- data.frame(LONG=42+rnorm(10), LAT=23+rnorm(10), PLACE=paste(&quot;Red_place_&quot;,seq(1,10))) data_blue &lt;- data.frame(LONG=42+rnorm(10), LAT=23+rnorm(10), PLACE=paste(&quot;Blue_place_&quot;,seq(1,10))) # Initialize the leaflet map: m &lt;- leaflet() %&gt;% setView(lng=42, lat=23, zoom=6 ) %&gt;% # Add two tiles addProviderTiles(&quot;Esri.WorldImagery&quot;, group=&quot;background 1&quot;) %&gt;% addTiles(options = providerTileOptions(noWrap = TRUE), group=&quot;background 2&quot;) %&gt;% # Add 2 marker groups addCircleMarkers(data=data_red, lng=~LONG , lat=~LAT, radius=8 , color=&quot;black&quot;, fillColor=&quot;red&quot;, stroke = TRUE, fillOpacity = 0.8, group=&quot;Red&quot;) %&gt;% addCircleMarkers(data=data_blue, lng=~LONG , lat=~LAT, radius=8 , color=&quot;black&quot;, fillColor=&quot;blue&quot;, stroke = TRUE, fillOpacity = 0.8, group=&quot;Blue&quot;) %&gt;% # Add the control widget addLayersControl(overlayGroups = c(&quot;Red&quot;,&quot;Blue&quot;) , baseGroups = c(&quot;background 1&quot;,&quot;background 2&quot;), options = layersControlOptions(collapsed = FALSE)) m # save the widget in a html file if needed. library(htmlwidgets) saveWidget(m, file=paste0( getwd(), &quot;/HtmlWidget/bubblemapControl.html&quot;)) 7.4.12 Interactive Earthquake Bubble Map with R and leaflet This post explains how to build a bubble map with R and the leaflet package. It shows a set of earthquakes and their intensity in the Pacific Ocean. leaflet is a R package allowing to build interactive maps. This post follows the leaflet introduction and explain how to build a bubble map. The input required to build such a map is a list of GPS coordinates, with a numeric value attributed to each location to control the bubble size and color. Markers are added using the addCircleMarkers() function, and bubble color is mapped to a color scale build with binning. # Library library(leaflet) # load example data (Fiji Earthquakes) + keep only 100 first lines data(quakes) quakes &lt;- head(quakes, 100) # Create a color palette with handmade bins. mybins &lt;- seq(4, 6.5, by=0.5) mypalette &lt;- colorBin( palette=&quot;YlOrBr&quot;, domain=quakes$mag, na.color=&quot;transparent&quot;, bins=mybins) # Prepare the text for the tooltip: mytext &lt;- paste( &quot;Depth: &quot;, quakes$depth, &quot;&lt;br/&gt;&quot;, &quot;Stations: &quot;, quakes$stations, &quot;&lt;br/&gt;&quot;, &quot;Magnitude: &quot;, quakes$mag, sep=&quot;&quot;) %&gt;% lapply(htmltools::HTML) # Final Map m &lt;- leaflet(quakes) %&gt;% addTiles() %&gt;% setView( lat=-27, lng=170 , zoom=4) %&gt;% addProviderTiles(&quot;Esri.WorldImagery&quot;) %&gt;% addCircleMarkers(~long, ~lat, fillColor = ~mypalette(mag), fillOpacity = 0.7, color=&quot;white&quot;, radius=8, stroke=FALSE, label = mytext, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;13px&quot;, direction = &quot;auto&quot;) ) %&gt;% addLegend( pal=mypalette, values=~mag, opacity=0.9, title = &quot;Magnitude&quot;, position = &quot;bottomright&quot; ) m # save the widget in a html file if needed. library(htmlwidgets) saveWidget(m, file=paste0( getwd(), &quot;/HtmlWidget/bubblemapQuakes.html&quot;)) 7.4.13 Bubble map with ggplot2 This section explains how to build a bubble map with ggplot2. It takes a list of GPS coordinates and plot them on top of a map, with size and color mapped to data. This section explains how to make a bubble map with ggplot2. A bubble map is like a bubble chart, but with a map in the background. As input you need: A list of GPS coordinates (longitude and latitude of the places you want to represent). A numeric variable used for bubble color and size. This section provides a step-by-step approach to build the map beside, showing the 1000 biggest cities of the UK. 7.4.13.1 Load Data The first step is to get the boundaries of the zone that interests you. Several option are available in R, as extensively described in the background map section of the gallery. Briefly, you can find this information somewhere under the shapefile format or under the geoJSON format. You can also load google like backgrounds with the ggmap library. This section uses the last approach: it loads the maps package that provides the boundaries of every world country. # Libraries library(ggplot2) library(dplyr) # Get the world polygon and extract UK library(maps) UK &lt;- map_data(&quot;world&quot;) %&gt;% filter(region==&quot;UK&quot;) The second step is to load a data frame with the info of the bubble you want to draw. The maps library provides a list of the biggest cities in the world. Let’s use it to get information on the UK. # Get a data frame with longitude, latitude, and size of bubbles (a bubble = a city) data &lt;- world.cities %&gt;% filter(country.etc==&quot;UK&quot;) 7.4.14 Basic Scatterplot Map ggplot2 makes it a breeze to map both information on the same graph. Use geom_polygon for the shape of UK first, and add your scatterplot on it with geom_point(). On the right figure, note the use of the ggrepel library to avoid overlapping between city names. # Left chart ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point( data=data, aes(x=long, y=lat)) + theme_void() + ylim(50,59) + coord_map() # Second graphic with names of the 10 biggest cities library(ggrepel) ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point( data=data, aes(x=long, y=lat, alpha=pop)) + geom_text_repel( data=data %&gt;% arrange(pop) %&gt;% tail(10), aes(x=long, y=lat, label=name), size=5) + geom_point( data=data %&gt;% arrange(pop) %&gt;% tail(10), aes(x=long, y=lat), color=&quot;red&quot;, size=3) + theme_void() + ylim(50,59) + coord_map() + theme(legend.position=&quot;none&quot;) 7.4.15 Basic Bubble Map Now we want to add another information. The number of inhabitant per city will be mapped to the colour and the size of the bubbles. Note that the order of city matters! It is advised to show the most important information on top (center). This can been done sorting your dataset before making the plot. # virids package for the color palette library(viridis) # Left: use size and color ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point( data=data, aes(x=long, y=lat, size=pop, color=pop)) + scale_size_continuous(range=c(1,12)) + scale_color_viridis(trans=&quot;log&quot;) + theme_void() + ylim(50,59) + coord_map() # Center: reorder your dataset first! Big cities appear later = on top data %&gt;% arrange(pop) %&gt;% mutate( name=factor(name, unique(name))) %&gt;% ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point( aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) + scale_size_continuous(range=c(1,12)) + scale_color_viridis(trans=&quot;log&quot;) + theme_void() + ylim(50,59) + coord_map() + theme(legend.position=&quot;none&quot;) # Right: just use arrange(desc(pop)) instead data %&gt;% arrange(desc(pop)) %&gt;% mutate( name=factor(name, unique(name))) %&gt;% ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point( aes(x=long, y=lat, size=pop, color=pop), alpha=0.9) + scale_size_continuous(range=c(1,12)) + scale_color_viridis(trans=&quot;log&quot;) + theme_void() + ylim(50,59) + coord_map() + theme(legend.position=&quot;none&quot;) 7.4.16 Customized Bubble Map We can custom a little bit this figure for a better looking result (first image of this section). Note that here the legend shows both the size, the color and the transparency on the same circles. This is possible only if these 3 informations are redondante, with the same name, transformation and breaks. # Create breaks for the color scale mybreaks &lt;- c(0.02, 0.04, 0.08, 1, 7) # Reorder data to show biggest cities on top data &lt;- data %&gt;% arrange(pop) %&gt;% mutate( name=factor(name, unique(name))) %&gt;% mutate(pop=pop/1000000) # Build the map map %&gt;% ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point( aes(x=long, y=lat, size=pop, color=pop, alpha=pop), shape=20, stroke=FALSE) + scale_size_continuous(name=&quot;Population (in M)&quot;, trans=&quot;log&quot;, range=c(1,12), breaks=mybreaks) + scale_alpha_continuous(name=&quot;Population (in M)&quot;, trans=&quot;log&quot;, range=c(0.1, .9), breaks=mybreaks) + scale_color_viridis(option=&quot;magma&quot;, trans=&quot;log&quot;, breaks=mybreaks, name=&quot;Population (in M)&quot; ) + theme_void() + ylim(50,59) + coord_map() + guides( colour = guide_legend()) + ggtitle(&quot;The 1000 biggest cities in the UK&quot;) + theme( legend.position = c(0.85, 0.8), text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), plot.title = element_text(size= 16, hjust=0.1, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), ) 7.4.17 Interactive Bubble Map with Plotly Last but not least, plotly allows to quickly get an interactive version. This is really handy since it allows to zoom on the map and hover a city to know its name and population! # Load the plotly package library(plotly) # Rorder data + Add a new column with tooltip text data &lt;- data %&gt;% arrange(pop) %&gt;% mutate( name=factor(name, unique(name))) %&gt;% mutate( mytext=paste( &quot;City: &quot;, name, &quot;\\n&quot;, &quot;Population: &quot;, pop, sep=&quot;&quot;) ) # Make the map (static) p &lt;- data %&gt;% ggplot() + geom_polygon(data = UK, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_point(aes(x=long, y=lat, size=pop, color=pop, text=mytext, alpha=pop) ) + scale_size_continuous(range=c(1,15)) + scale_color_viridis(option=&quot;inferno&quot;, trans=&quot;log&quot; ) + scale_alpha_continuous(trans=&quot;log&quot;) + theme_void() + ylim(50,59) + coord_map() + theme(legend.position = &quot;none&quot;) p &lt;- ggplotly(p, tooltip=&quot;text&quot;) p # save the widget in a html file if needed. # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/bubblemapUK.html&quot;)) 7.4.18 Proportional Symbol Map with the Cartography Package The cartography package is a great alternative to make maps with R. This section explains how to build a bubble map using it, with explanation and reproducible code. The cartography package is a very good alternative to the other tools presented in the gallery for building maps. It notably allows to: Display a legend with embedded circles Add data sources on the bottom of the chart Show north / south # Library library(cartography) library(sp) # Upload data attached with the package. data(nuts2006) # Now we have a geospatial object called nuts2.spdf containing the shape of european regions. We can plot it with the plot function. # summary(nuts2.spdf) # We also have a dataframe with information concerning every region. # head(nuts2.df) # Both object have a first column &quot;id&quot; that makes the link between them. # Plot Europe plot(nuts0.spdf, border = NA, col = NA, bg = &quot;#A6CAE0&quot;) plot(world.spdf, col = &quot;#E3DEBF&quot;, border = NA, add = TRUE) plot(nuts0.spdf, col = &quot;#D1914D&quot;, border = &quot;grey80&quot;, add = TRUE) # Add circles proportional to the total population propSymbolsLayer(spdf = nuts0.spdf, df = nuts0.df, var = &quot;pop2008&quot;, symbols = &quot;circle&quot;, col = &quot;#920000&quot;, legend.pos = &quot;right&quot;, legend.title.txt = &quot;Total\\npopulation (2008)&quot;, legend.style = &quot;c&quot;) # Add titles, legend... layoutLayer(title = &quot;Countries Population in Europe&quot;, author = &quot;cartography&quot;, sources = &quot;Eurostat, 2008&quot;, scale = NULL, south = TRUE) 7.5 Interactive Choropleth Map This section explains how to build an interactive choropleth map with R and the leaflet package. A tooltip is available for each region on hover, and the map is zoomable. leaflet is a R package allowing to build interactive maps. If you’re not familiar to it, have a look to this leaflet introduction. This section is a step-by-step tutorial leading to the following choropleth map. 7.5.1 Find, Download and Load Geospatial Data Note: this step is described in detail here. Read it if you are not familiar with geospatial data management in R. The region boundaries required to make maps are usually stored in geospatial objects. Those objects can come from shapefiles, geojson files or provided in a R package. See the background map section for possibilities. This tutorial uses a geospatial object stored in a shape file available here. Start by downloading the file: # Download the shapefile. (note that I store it in a folder called DATA. You have to change that if needed.) download.file(&quot;http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip&quot; , destfile=&quot;DATA/world_shape_file.zip&quot;) # You now have it in your current working directory, have a look! # Unzip this file. You can do it with R (as below), or clicking on the object you downloaded. system(&quot;unzip DATA/world_shape_file.zip&quot;) # -- &gt; You now have 4 files. One of these files is a .shp file! (TM_WORLD_BORDERS_SIMPL-0.3.shp) And load it in R ## OGR data source with driver: ESRI Shapefile ## Source: &quot;C:\\Users\\kwilliam\\OneDrive - Wayne State University\\Documents\\R\\world_shape_file&quot;, layer: &quot;TM_WORLD_BORDERS_SIMPL-0.3&quot; ## with 246 features ## It has 11 fields ## Integer64 fields read as strings: POP2005 7.5.2 Default Choropleth It is now possible to draw a first choropleth map. Here are the main steps to follow: Create a color palette thanks to the colorNumeric() function. Make the background map with leaflet(), addTiles() and setView(). Use addPolygons() to add the shape of all country, with a color representing the number of people in the country. The resulting map is quite disappointing: China and India having very numerous population, all the variation between other countries gets hard to observe on the map. # Library library(leaflet) # Create a color palette for the map: mypalette &lt;- colorNumeric( palette=&quot;viridis&quot;, domain=world_spdf@data$POP2005, na.color=&quot;transparent&quot;) mypalette(c(45,43)) # Basic choropleth with leaflet? m &lt;- leaflet(world_spdf) %&gt;% addTiles() %&gt;% setView( lat=10, lng=0 , zoom=2) %&gt;% addPolygons( fillColor = ~mypalette(POP2005), stroke=FALSE ) m # save the widget in a html file if needed. # library(htmlwidgets) # saveWidget(m, file=paste0( getwd(), &quot;/choroplethLeaflet1.html&quot;)) 7.5.3 Visualize the Numeric Variable In a choropleth map, each region has a color that represents the value of a numeric variable (population here). It is a good practice to check the distribution of this variable to understand what kind of color scale should be used. Using a histogram is often a good option for that: # load ggplot2 library(ggplot2) # Distribution of the population per country? world_spdf@data %&gt;% ggplot( aes(x=as.numeric(POP2005))) + geom_histogram(bins=20, fill=&#39;#69b3a2&#39;, color=&#39;white&#39;) + xlab(&quot;Population (M)&quot;) + theme_bw() 7.5.4 Change Color Scale There are several ways to translate a numeric variable to a palette of color. Leaflet offers 3 options: Quantile with colorQuantile Numeric with colorNumeric Bin with colorBin Results can be very different and the best option usually depends on the distribution of your input data. # Color by quantile m &lt;- leaflet(world_spdf)%&gt;% addTiles() %&gt;% setView( lat=10, lng=0 , zoom=2) %&gt;% addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorQuantile(&quot;YlOrRd&quot;, POP2005)(POP2005) ) m library(htmlwidgets) saveWidget(m, file=paste0( getwd(), &quot;/quantileLeaflet2.html&quot;)) # Numeric palette m &lt;- leaflet(world_spdf)%&gt;% addTiles() %&gt;% setView( lat=10, lng=0 , zoom=2) %&gt;% addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorNumeric(&quot;YlOrRd&quot;, POP2005)(POP2005) ) m library(htmlwidgets) saveWidget(m, file=paste0( getwd(), &quot;/numericLeaflet2.html&quot;)) # Bin m &lt;- leaflet(world_spdf)%&gt;% addTiles() %&gt;% setView( lat=10, lng=0 , zoom=2) %&gt;% addPolygons( stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5, color = ~colorBin(&quot;YlOrRd&quot;, POP2005)(POP2005) ) m # save the widget in a html file if needed. library(htmlwidgets) saveWidget(m, file=paste0( getwd(), &quot;/choroplethbinLeaflet2.html&quot;)) 7.5.5 Customizied leaflet Choropleth Map In order to get a quality choropleth map, there are several improvements we need to apply: Add a legend with addLegend(). Change the color scale: binning is a good option here since it avoids to put too much weight on China and India. Add a tooltip with labelOptions. When you hover a specific region, a box appears with custom text. This is very handy to add additional information to your map. Here is the result and the code: # Create a color palette with handmade bins. library(RColorBrewer) mybins &lt;- c(0,10,20,50,100,500,Inf) mypalette &lt;- colorBin( palette=&quot;YlOrBr&quot;, domain=world_spdf@data$POP2005, na.color=&quot;transparent&quot;, bins=mybins) # Prepare the text for tooltips: mytext &lt;- paste( &quot;Country: &quot;, world_spdf@data$NAME,&quot;&lt;br/&gt;&quot;, &quot;Area: &quot;, world_spdf@data$AREA, &quot;&lt;br/&gt;&quot;, &quot;Population: &quot;, round(world_spdf@data$POP2005, 2), sep=&quot;&quot;) %&gt;% lapply(htmltools::HTML) # Final Map leaflet(world_spdf) %&gt;% addTiles() %&gt;% setView( lat=10, lng=0 , zoom=2) %&gt;% addPolygons( fillColor = ~mypalette(POP2005), stroke=TRUE, fillOpacity = 0.9, color=&quot;white&quot;, weight=0.3, label = mytext, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;13px&quot;, direction = &quot;auto&quot; ) ) %&gt;% addLegend( pal=mypalette, values=~POP2005, opacity=0.9, title = &quot;Population (M)&quot;, position = &quot;bottomleft&quot; ) m # save the widget in a html file if needed. # library(htmlwidgets) # saveWidget(m, file=paste0( getwd(), &quot;/choroplethLeaflet5.html&quot;)) 7.5.6 Basic Choropleth Map with the Cartography Package The cartography package is a great alternative to make maps with R. This section explains how to build a basic choropleth map using it, with explanation and reproducible code. 7.5.6.1 Data Provided in the Library The cartography package is a very good alternative to the other tools presented in the gallery for building maps. It notably allows to: Display a legend with embedded circles Add data sources on the bottom of the chart Show north / south 7.5.6.2 Use the cartography library to do the choropleth map library(cartography) # Load data data(nuts2006) # Build a choropleth choroLayer(spdf = nuts2.spdf, df = nuts2.df, var = &quot;pop2008&quot; , legend.pos = &quot;right&quot;) title(&quot;Population in 2008&quot;) 7.5.7 Data Provided in a Shape File The cartography package is a very good alternative to the other tools presented in the gallery for building maps. It notably allows to: Display a legend with embedded circles Add data sources on the bottom of the chart Show north / south # Download the shape file from the web and unzip it: #download.file(&quot;http://thematicmapping.org/downloads/TM_WORLD_BORDERS_SIMPL-0.3.zip&quot; , destfile=&quot;world_shape_file.zip&quot;) #system(&quot;unzip world_shape_file.zip&quot;) # Load it as a geospatial object in R library(rgdal) library(raster) my_spdf &lt;- shapefile(&quot;C:/Users/kwilliam/Downloads/world_shape_file/TM_WORLD_BORDERS_SIMPL-0.3.shp&quot;) africa &lt;- my_spdf[my_spdf@data$REGION==2 , ] africa@data$POP2005 &lt;- as.numeric(africa@data$POP2005) # Use the cartography library to do the choropleth map library(cartography) choroLayer(spdf = africa, df = africa@data, var = &quot;POP2005&quot;) title(&quot;Number of people living in Africa in 2005&quot;) 7.5.8 Customized Choropleth Map with the Cartography Package The cartography package is a great alternative to make maps with R. This section explains how to build a customized choropleth map using it, with explanation and reproducible code. The cartography package is a very good alternative to the other tools presented in the gallery for building maps. It notably allows to: Display a legend with embedded circles Add data sources on the bottom of the chart Show north / south # Cartography Library library(cartography) library(sp) # Upload data attached with the package. data(nuts2006) # Now we have a spdf file (shape file) called nuts2.spdf with shape of european regions. # We also have a dataframe with information concerning every region.Both object have a first column &quot;id&quot; that makes the link between them. head(nuts2.df) ## id emp2008 act2008 unemp2008 birth_2008 death_2008 gdppps1999 gdppps2008 ## 383 AT11 137.0 142.1 5.1 2215 3067 4139 5695 ## 384 AT12 792.3 820.3 28.0 14085 15616 28799 40998 ## 385 AT13 784.6 841.4 56.7 17375 15702 51431 68722 ## 789 AT21 263.4 272.8 9.4 4718 5385 10886 14632 ## 1192 AT22 586.5 607.0 20.5 10255 11725 23436 32457 ## 368 AT31 714.1 733.4 19.2 13540 11966 30468 43300 ## pop1999 pop2008 ## 383 276732 281185 ## 384 1530745 1596538 ## 385 1542252 1674909 ## 789 560938 560322 ## 1192 1183374 1204947 ## 368 1366578 1406664 # Annual growth per region nuts2.df$cagr &lt;- 100 * (((nuts2.df$pop2008/nuts2.df$pop1999)^(1/9)) - 1) # Build a color palette cols &lt;- carto.pal(pal1 = &quot;green.pal&quot;, n1 = 2, pal2 = &quot;red.pal&quot;, n2 = 4) # plot backgroud shapes (sea and world) plot(nuts0.spdf, border = NA, col = NA, bg = &quot;#A6CAE0&quot;) plot(world.spdf, col = &quot;#E3DEBF&quot;, border = NA, add = TRUE) # Add annual growth choroLayer(spdf = nuts2.spdf, df = nuts2.df, var = &quot;cagr&quot;, breaks = c(-2.43, -1, 0, 0.5, 1, 2, 3.1), col = cols, border = &quot;grey40&quot;, lwd = 0.5, legend.pos = &quot;right&quot;, legend.title.txt = &quot;taux de croissance\\nannuel moyen&quot;, legend.values.rnd = 2, add = TRUE) # Add borders plot(nuts0.spdf, border = &quot;grey20&quot;, lwd = 0.75, add = TRUE) # Add titles, legend ... layoutLayer(title = &quot;Growth rate in Europe&quot;, author = &quot;cartography&quot;, sources = &quot;Eurostat, 2008&quot;, frame = TRUE, col = NA, scale = NULL, coltitle = &quot;black&quot;, south = TRUE) 7.6 Hexbin Map A hexbin map refers to two different concepts. It can be based on a geospatial object where all regions of the map are represented as hexagons. Or it can refer to a 2d density technique described in this section. This section of the gallery provides several examples with step by step explanations. 7.6.0.1 Hexbin Map from Geospatial Object In this case, the technique is very close from a choropleth map. It’s actually exactly the same, except that the geoJson input gives hexagon boundaries instead of region boundaries. Thus, you probably want to visit the choropleth section for more examples. 7.6.1 Hexbin Map in R: Example with US states This section describes how to build a hexbin map. It is based on a geojson file providing the boundaries of us states as hexagons. 7.6.1.1 Basic Hexbin Map The first step is to build a basic hexbin map of the US. Note that the gallery dedicates a whole section to this kind of map. Hexagones boundaries are provided here. You have to download it at the geojson format and load it in R thanks to the geojson_read() function. You get a geospatial object that you can plot using the plot() function. This is widely explained in the background map section of the gallery. # library library(tidyverse) library(geojsonio) library(RColorBrewer) library(rgdal) # Download the Hexagones boundaries at geojson format here: https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map. # Load this file. (Note: I stored in a folder called DATA) spdf &lt;- geojson_read(&quot;C:/Users/kwilliam/Downloads/us_states_hexgrid.geojson&quot;, what = &quot;sp&quot;) # Bit of reformating spdf@data = spdf@data %&gt;% mutate(google_name = gsub(&quot; \\\\(United States\\\\)&quot;, &quot;&quot;, google_name)) # Show it plot(spdf) 7.6.2 ggplot2 and State Name It is totally doable to plot this geospatial object using ggplot2 and its geom_polygon() function, but we first need to fortify it using the broom package. Moreover, the rgeos package is used here to compute the centroid of each region thanks to the gCentroid function. # I need to &#39;fortify&#39; the data to be able to show it with ggplot2 (we need a data frame format) library(broom) spdf@data = spdf@data %&gt;% mutate(google_name = gsub(&quot; \\\\(United States\\\\)&quot;, &quot;&quot;, google_name)) spdf_fortified &lt;- tidy(spdf, region = &quot;google_name&quot;) # Calculate the centroid of each hexagon to add the label: library(rgeos) centers &lt;- cbind.data.frame(data.frame(gCentroid(spdf, byid=TRUE), id=spdf@data$iso3166_2)) # Now I can plot this shape easily as described before: ggplot() + geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill=&quot;skyblue&quot;, color=&quot;white&quot;) + geom_text(data=centers, aes(x=x, y=y, label=id)) + theme_void() + coord_map() 7.6.3 Basic Choropleth Now you probably want to adjust the color of each hexagon, according to the value of a specific variable (we call it a choropleth map). In this section a suggestion to represent the number of wedding per thousand people. The data have been found here, and stored on a clean format here. Let’s start by loading this information and represent its distribution: # Load mariage data data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/R-graph-gallery/master/DATA/State_mariage_rate.csv&quot;, header=T, sep=&quot;,&quot;, na.strings=&quot;---&quot;) # Distribution of the marriage rate? data %&gt;% ggplot( aes(x=y_2015)) + geom_histogram(bins=20, fill=&#39;#69b3a2&#39;, color=&#39;white&#39;) + scale_x_continuous(breaks = seq(1,30)) Most of the state have between 5 and 10 weddings per 1000 inhabitants, but there are 2 outliers with high values (16 and 32). Let’s represent this information on a map. We have a column with the state id in both the geospatial and the numerical datasets. So we can merge both information and plot it. Note the use of the trans = \"log\" option in the color scale to decrease the effect of the 2 outliers. # Merge geospatial and numerical information spdf_fortified &lt;- spdf_fortified %&gt;% left_join(. , data, by=c(&quot;id&quot;=&quot;state&quot;)) # Make a first chloropleth map ggplot() + geom_polygon(data = spdf_fortified, aes(fill = y_2015, x = long, y = lat, group = group)) + scale_fill_gradient(trans = &quot;log&quot;) + theme_void() + coord_map() 7.6.4 Customized Hexbin Choropleth Map Here is a final version after applying a few customization: Use handmade binning for the colorscale with scale_fill_manual. Use viridis for the color palette. Add custom legend and title. Change background color. # Prepare binning spdf_fortified$bin &lt;- cut( spdf_fortified$y_2015 , breaks=c(seq(5,10), Inf), labels=c(&quot;5-6&quot;, &quot;6-7&quot;, &quot;7-8&quot;, &quot;8-9&quot;, &quot;9-10&quot;, &quot;10+&quot; ), include.lowest = TRUE ) # Prepare a color scale coming from the viridis color palette library(viridis) my_palette &lt;- rev(magma(8))[c(-1,-8)] # plot ggplot() + geom_polygon(data = spdf_fortified, aes(fill = bin, x = long, y = lat, group = group) , size=0, alpha=0.9) + geom_text(data=centers, aes(x=x, y=y, label=id), color=&quot;white&quot;, size=3, alpha=0.6) + theme_void() + scale_fill_manual( values=my_palette, name=&quot;Wedding per 1000 people in 2015&quot;, guide = guide_legend( keyheight = unit(3, units = &quot;mm&quot;), keywidth=unit(12, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1) ) + ggtitle( &quot;A map of marriage rates, state by state&quot; ) + theme( legend.position = c(0.5, 0.9), text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), plot.title = element_text(size= 22, hjust=0.5, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), ) 7.6.5 Hexbin Map from List of Coordinates In this case, the required input is a list of coordinates. The map area is split in a multitude of hexagons with geom_hex() (or squares with geom_bin2d()), the number of data point per hexagon is counted and represented as a color. It is actually a density 2d technique plotted on top of a map. 7.6.6 Hexbin Map for 2D Density Visualization It is possible to apply 2d density visualization methods on map to study the geographical distribution of a variable. The two most famous techniques beeing Hexbin maps and 2d histogram maps. This section describes how to build it with R and ggplot2. 7.6.6.1 2D Histogram Maps For 2d histogram maps the globe is split in several squares, the number of tweet per square is counted, and a color is attributed to each square. ggplot2 offers the geom_bin2d() function that does all the calculation for us and plot the squares. The geom_polygon() function is used to show the world map in the background. ggplot2::annotate() is used to add a title. The guide option of scale_fill_viridis is used to create a nice legend. # Libraries library(tidyverse) library(viridis) library(hrbrthemes) library(mapdata) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv&quot;, sep=&quot;,&quot;, header=T) # Get the world polygon world &lt;- map_data(&quot;world&quot;) # plot ggplot(data, aes(x=homelon, y=homelat)) + geom_polygon(data = world, aes(x=long, y = lat, group = group), fill=&quot;grey&quot;, alpha=0.3) + geom_bin2d(bins=100) + ggplot2::annotate(&quot;text&quot;, x = 175, y = 80, label=&quot;Where people tweet about #Surf&quot;, colour = &quot;black&quot;, size=4, alpha=1, hjust=1) + ggplot2::annotate(&quot;segment&quot;, x = 100, xend = 175, y = 73, yend = 73, colour = &quot;black&quot;, size=0.2, alpha=1) + theme_void() + ylim(-70, 80) + scale_fill_viridis( trans = &quot;log&quot;, breaks = c(1,7,54,403,3000), name=&quot;Tweet # recorded in 8 months&quot;, guide = guide_legend( keyheight = unit(2.5, units = &quot;mm&quot;), keywidth=unit(10, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1) ) + ggtitle( &quot;&quot; ) + theme( legend.position = c(0.8, 0.09), legend.title=element_text(color=&quot;black&quot;, size=8), text = element_text(color = &quot;#22211d&quot;), plot.title = element_text(size= 13, hjust=0.1, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), ) 7.6.7 Hexbin Maps Hexbin maps are done using pretty much the same code. Here, geom_hex() is used to create the hexagones. Note the bins option allowing to control the bin size, and thus the hexagone size on the map. # Libraries library(tidyverse) library(viridis) library(hrbrthemes) library(mapdata) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/17_ListGPSCoordinates.csv&quot;, sep=&quot;,&quot;, header=T) # plot data %&gt;% filter(homecontinent==&#39;Europe&#39;) %&gt;% ggplot( aes(x=homelon, y=homelat)) + geom_hex(bins=59) + ggplot2::annotate(&quot;text&quot;, x = -27, y = 72, label=&quot;Where people tweet about #Surf&quot;, colour = &quot;black&quot;, size=5, alpha=1, hjust=0) + ggplot2::annotate(&quot;segment&quot;, x = -27, xend = 10, y = 70, yend = 70, colour = &quot;black&quot;, size=0.2, alpha=1) + theme_void() + xlim(-30, 70) + ylim(24, 72) + scale_fill_viridis( option=&quot;B&quot;, trans = &quot;log&quot;, breaks = c(1,7,54,403,3000), name=&quot;Tweet # recorded in 8 months&quot;, guide = guide_legend( keyheight = unit(2.5, units = &quot;mm&quot;), keywidth=unit(10, units = &quot;mm&quot;), label.position = &quot;bottom&quot;, title.position = &#39;top&#39;, nrow=1) ) + ggtitle( &quot;&quot; ) + theme( legend.position = c(0.8, 0.09), legend.title=element_text(color=&quot;black&quot;, size=8), text = element_text(color = &quot;#22211d&quot;), plot.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), panel.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), legend.background = element_rect(fill = &quot;#f5f5f2&quot;, color = NA), plot.title = element_text(size= 13, hjust=0.1, color = &quot;#4e4d47&quot;, margin = margin(b = -0.1, t = 0.4, l = 2, unit = &quot;cm&quot;)), ) "],
["flow.html", "Chapter 8 Flow 8.1 Arc Diagram 8.2 Chord Diagram 8.3 Edge Bundling 8.4 Network Graph 8.5 Sankey Diagram", " Chapter 8 Flow Figure 8.1: Network Graph Layout 8.1 Arc Diagram 8.1.0.1 Definition An arc diagram is a special kind of network graph. It is constituted by nodes that represent entities and by links that show relationships between entities. In arc diagrams, nodes are displayed along a single axis and links are represented with arcs. Here is a simple example. Five links between 6 nodes are represented using a 2d network diagram (left) and an arc diagram (right) # Libraries library(tidyverse) library(viridis) library(patchwork) library(hrbrthemes) library(igraph) library(ggraph) library(colormap) # A really simple edge list links=data.frame( source=c(&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;), target=c(&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;F&quot;,&quot;E&quot;) ) # Transform to a igraph object mygraph &lt;- graph_from_data_frame(links) # Make the usual network diagram p1 &lt;- ggraph(mygraph) + geom_edge_link(edge_colour=&quot;black&quot;, edge_alpha=0.3, edge_width=0.2) + geom_node_point( color=&quot;#69b3a2&quot;, size=5) + geom_node_text( aes(label=name), repel = TRUE, size=8, color=&quot;#69b3a2&quot;) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(rep(2,4), &quot;cm&quot;) ) # Make a cord diagram p2 &lt;- ggraph(mygraph, layout=&quot;linear&quot;) + geom_edge_arc(edge_colour=&quot;black&quot;, edge_alpha=0.3, edge_width=0.2) + geom_node_point( color=&quot;#69b3a2&quot;, size=5) + geom_node_text( aes(label=name), repel = FALSE, size=8, color=&quot;#69b3a2&quot;, nudge_y=-0.1) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(rep(2,4), &quot;cm&quot;) ) p1 + p2 8.1.1 Arc Diagrams Are not as good as 2d network charts to convey the overall node structure. It has 2 main advantages tough: It can highlight clusters and bridges quite well if the node order is optimized. It allows to display the label of each node, which is often impossible in 2d structure. Here is an example showing the co-authorship network of a researcher. Vincent Ranwez is author of several scientific publications and counts more than 100 co-authors, all represented by a node on the following chart. If two people have already been on the same paper, they are linked by an arc. # Load data dataUU &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyUndirectedUnweighted.csv&quot;, header=TRUE) # Transform the adjacency matrix in a long format connect &lt;- dataUU %&gt;% gather(key=&quot;to&quot;, value=&quot;value&quot;, -1) %&gt;% mutate(to = gsub(&quot;\\\\.&quot;, &quot; &quot;,to)) %&gt;% na.omit() # Number of connection per person c( as.character(connect$from), as.character(connect$to)) %&gt;% as.tibble() %&gt;% group_by(value) %&gt;% summarize(n=n()) -&gt; coauth colnames(coauth) &lt;- c(&quot;name&quot;, &quot;n&quot;) #dim(coauth) # Create a graph object with igraph mygraph &lt;- graph_from_data_frame( connect, vertices = coauth, directed = FALSE ) # Find community com &lt;- walktrap.community(mygraph) #max(com$membership) #Reorder dataset and make the graph coauth &lt;- coauth %&gt;% mutate( grp = com$membership) %&gt;% arrange(grp) %&gt;% mutate(name=factor(name, name)) # keep only 10 first communities coauth &lt;- coauth %&gt;% filter(grp&lt;16) # keep only this people in edges connect &lt;- connect %&gt;% filter(from %in% coauth$name) %&gt;% filter(to %in% coauth$name) # Create a graph object with igraph mygraph &lt;- graph_from_data_frame( connect, vertices = coauth, directed = FALSE ) # prepare a vector of n color in the viridis scale mycolor &lt;- colormap(colormap=colormaps$viridis, nshades=max(coauth$grp)) mycolor &lt;- sample(mycolor, length(mycolor)) # Make the graph ggraph(mygraph, layout=&quot;linear&quot;) + geom_edge_arc(edge_colour=&quot;black&quot;, edge_alpha=0.2, edge_width=0.3, fold=TRUE) + geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) + scale_size_continuous(range=c(0.5,8)) + scale_color_manual(values=mycolor) + geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(c(0,0,0.4,0), &quot;null&quot;), panel.spacing=unit(c(0,0,3.4,0), &quot;null&quot;) ) + expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) 8.1.2 Common Mistakes The order of nodes is the key for arc diagrams. See the following figure showing the same arc diagram than above, but with nodes displayed in a random order. Harder to find any insight isn’t it? #Reorder dataset randomly coauth &lt;- coauth %&gt;% slice( sample(c(1:nrow(coauth)), nrow(coauth))) # Create a graph object with igraph mygraph &lt;- graph_from_data_frame( connect, vertices = coauth, directed = FALSE ) # prepare a vector of n color in the viridis scale mycolor &lt;- colormap(colormap=colormaps$viridis, nshades=max(coauth$grp)) mycolor &lt;- sample(mycolor, length(mycolor)) # Make the graph ggraph(mygraph, layout=&quot;linear&quot;) + geom_edge_arc(edge_colour=&quot;black&quot;, edge_alpha=0.2, edge_width=0.3, fold=TRUE) + geom_node_point(aes(size=n, color=as.factor(grp), fill=grp), alpha=0.5) + scale_size_continuous(range=c(0.5,8)) + scale_color_manual(values=mycolor) + geom_node_text(aes(label=name), angle=65, hjust=1, nudge_y = -1.1, size=2.3) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(c(0,0,0.4,0), &quot;null&quot;), panel.spacing=unit(c(0,0,3.4,0), &quot;null&quot;) ) + expand_limits(x = c(-1.2, 1.2), y = c(-5.6, 1.2)) 8.2 Chord Diagram A Chord diagram allows to study flows between a set of entities. Entities (nodes) are displayed all around a circle and connected with arcs (links). In R, the circlize package is the best option to build it. The circlize package allows to build all kinds of circular chart. This first section introduces the way it works, step by step. Chord diagram are described in the following section, but a basic understanding of the library is necessary at first. 8.2.1 Introduction to the circlize Package This section is an introduction to the circlize package: the ultimate way to build circular charts with R. It shows how to initialize a circular section and fill it with a scatterplot. In R, circular plots are made using the circlize package. Circular plots are composed by several regions (8 here), each representing a level of a factor. Three steps are required to build a circular plot: Step 1: Initialize the chart with circos.initialize(). Provide the factor vector, and the numeric values to use for the X axis. The circle will be split in as many zone as the number of levels present in your factor. Each region will be as long as the coresponding x axis. Step 2: Build the regions with circos.trackPlotRegion(). You have to specify the factors once again, and tell what to use for the Y axis if needed. Step 3: Add a chart in each region. Here circos.trackPoints() is used to build a scatterplot. See chart #226 for other chart types. # Upload library library(circlize) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) # Step 2: Build the regions. circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) { circos.axis() }) # Step 3: Add points circos.trackPoints(data$factor, data$x, data$y, col = &quot;blue&quot;, pch = 16, cex = 0.5) 8.2.2 Circular Chart Customization for the Circlize R package This post follows the previous introduction to the circlize package. It shows how to apply basic customizations to a circular chart: how to change track width, background color, start angle and more. 8.2.3 Most Basic Circular Chart Let’s remind how to build a basic circular chart with the circlize package. This is extensively described in chart #224. # Upload library library(circlize) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) # Step 2: Build the regions. circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) { circos.axis() }) # Step 3: Add points circos.trackPoints(data$factor, data$x, data$y) 8.2.4 Customization Customization can happen at 3 different levels: Initialization: use the usual par() and the specific circos.par() functions for general stuff. In circos.axis() to customize axis. In circos.trackPoints() to customize the chart shapes. Note that most of the parameters are consistent with base R. Have a look to the scatterplot section of the gallery for more customization. # Upload library library(circlize) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # General Customization: par( mar = c(1, 1, 1, 1), # Margin around chart bg = rgb(0.4,0.1,0.7,0.05) # background color ) circos.par(&quot;track.height&quot; = 0.6) # track hight, 0.6 = 60% of total height # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) # Step2: Build regions. circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) { circos.axis( h=&quot;top&quot;, # x axis on the inner or outer part of the track? labels=TRUE, # show the labels of the axis? major.tick=TRUE, # show ticks? labels.cex=0.5, # labels size (higher=bigger) labels.font=1, # labels font (1, 2, 3 , 4) direction=&quot;outside&quot;, # ticks point to the outside or inside of the circle ? minor.ticks=4, # Number of minor (=small) ticks major.tick.percentage=0.1, # The size of the ticks in percentage of the track height lwd=2 # thickness of ticks and x axis. ) }) # Step 3: Add points circos.trackPoints(data$factor, data$x, data$y, col = &quot;#69b3a2&quot;, pch = 16, cex = 0.5) 8.2.5 Available Circular Chart Types with Circlize The circlize package allows to build circular charts with R. Several chart types are offered: bar, scatter, line, abline and more. This section shows how to build them. 8.2.5.1 Circular Scatterplot Circular scatterplot has already been extensively described in chart #224 and #225. # Upload library library(circlize) circos.par(&quot;track.height&quot; = 0.4) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) # Step 2: Build the regions. circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) { circos.axis() }) # Step 3: Add points circos.trackPoints(data$factor, data$x, data$y, col=&quot;#69b3a2&quot;) 8.2.6 Circular Line Chart It is possible to switch to line chart using the circos.trackLines() function. Visit the line chart section of the gallery to learn how to customize that kind of chart. # Upload library library(circlize) circos.par(&quot;track.height&quot; = 0.4) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) # Step 2: Build the regions. circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) { circos.axis() }) # Step 3: Add points circos.trackLines(data$factor, data$x[order(data$x)], data$y[order(data$x)], col = rgb(0.1,0.5,0.8,0.3), lwd=2) 8.2.7 Vertical Ablines The circos.trackLines() function can also be used to display vertical ablines. # Upload library library(circlize) circos.par(&quot;track.height&quot; = 0.4) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) # Step 2: Build the regions. circos.trackPlotRegion(factors = data$factor, y = data$y, panel.fun = function(x, y) { circos.axis() }) # Step 3: Add points circos.trackLines(data$factor, data$x[order(data$x)], data$y[order(data$x)], col = rgb(0.1,0.5,0.8,0.3), lwd=2, type=&quot;h&quot;) 8.2.8 Circular Histogram Note that each plot type must be coherent with what you specified in the circos.trackPlotRegion function. You have to specify an Y axis for a scatterplot as seen before. But not for a histogram that is built with circos.trackHist(). # Upload library library(circlize) circos.par(&quot;track.height&quot; = 0.4) # Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Step1: Initialise the chart giving factor and x-axis. circos.initialize( factors=data$factor, x=data$x ) circos.trackHist(data$factor, data$x, bg.col = &quot;white&quot;, col = &quot;#69b3a2&quot;) 8.2.9 Circular Chart with Several Tracks The circlize package allows to build circular charts with several tracks. This section describes how, providing explanation and reproducible code. If you read the graph #224, and #225 you know how to make circular plots and customize them. If you read the graph #224, and #225 you know how to make circular plots and customize them. It is possible to add several tracks on your circular plot: just repeat the step 2 (building regions with circos.trackPlotRegion) and 3 (adding dots with circos.trackPoints for instance). Note that you can custom the width of each track using track.height. #library library(circlize) circos.clear() #Create data data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) #Initialize the plot. par(mar = c(1, 1, 1, 1) ) circos.initialize(factors = data$factor, x = data$x ) # Build the regions of track #1 circos.trackPlotRegion(factors = data$factor, y=data$y, panel.fun = function(x, y) { circos.axis(labels.cex=0.5, labels.font=1, lwd=0.8) }) # --&gt; Add a scatterplot on it: circos.trackPoints(data$factor, data$x, data$y, col = rgb(0.1,0.5,0.8,0.3), pch=20) # Build the regions of track #2: circlize::circos.trackPlotRegion(factors = data$factor, y=data$y, panel.fun = function(x, y) { circos.axis(labels=FALSE, major.tick=FALSE) }) # --&gt; Add a scatterplot on it circos.trackPoints(data$factor, data$x, data$y, col = rgb(0.9,0.5,0.8,0.3), pch=20, cex=2) # Add track #3 --&gt; don&#39;t forget you can custom the height of tracks! circos.par(&quot;track.height&quot; = 0.4) circos.trackPlotRegion(factors = data$factor, y=data$y, panel.fun = function(x, y) { circos.axis(labels=FALSE, major.tick=FALSE) }) circos.trackLines(data$factor, data$x, data$y, col = rgb(0.9,0.5,0.1,0.3), pch=20, cex=2, type=&quot;h&quot;) # and continue as long as needed! 8.2.10 Display Several Chord Diagrams on same Figure Here is a trick to display several chord diagrams on the same figure, using R and the circlize package. To arrange several circular charts in the same layout, simply use the layout() function as shown below. This example comes from the circlize package vignette. # library library(circlize) # Arrange the layout layout(matrix(1:9, 3, 3)) # A loop to create 9 circular plots for(i in 1:9) { par(mar = c(0.5, 0.5, 0.5, 0.5), bg=rgb(1,1,1,0.1) ) factors = 1:8 circos.par(cell.padding = c(0, 0, 0, 0)) circos.initialize(factors, xlim = c(0, 1)) circos.trackPlotRegion(ylim = c(0, 1), track.height = 0.05, bg.col = rand_color(8), bg.border = NA ) # add links for(i in 1:20) { se = sample(1:8, 2) circos.link(se[1], runif(2), se[2], runif(2), col = rand_color(1, transparency = 0.4)) } circos.clear() } 8.2.11 Draw Part of the Circular Chart Only The circlize package allows to display only a section of the circular chart, using the circos.par() function. It is possible to draw only a part of a Circular plot. Use canvas.xlim and canvas.ylim to specify the zone you want to show, as in the script below. # library library(circlize) # Create data factors &lt;- letters[1:4] x1 &lt;- runif(100) y1 &lt;- runif(100) # general parameter of the plot. # With canvas.xlim and canvas.ylim we kind of &quot;zoom on a part of the plot: par(mar = c(1, 2, 0.1, 0.1) ) circos.par(&quot;track.height&quot; = 0.7, &quot;canvas.xlim&quot; = c(0, 1), &quot;canvas.ylim&quot; = c(0, 1), &quot;gap.degree&quot; = 0, &quot;clock.wise&quot; = FALSE) # Make the usual plot, but with no border circos.initialize(factors = factors, xlim = c(0, 1)) circos.trackPlotRegion(factors = factors, ylim = c(0, 1), bg.border = NA ) # Finally we plot only the firs sector, so let&#39;s change its border to &quot;black&quot; to see it circos.updatePlotRegion(sector.index = &quot;a&quot;, bg.border = &quot;grey&quot; , bg.lwd=0.2) # Now we can add a plot in this section! You can repeat these steps to add several regions circos.lines(x1, y1, pch = 16, cex = 0.5, type=&quot;h&quot; , col=&quot;#69b3a2&quot; , lwd=3) # Add axis circos.axis(h=&quot;bottom&quot; , labels.cex=0.4, direction = &quot;inside&quot; ) #clear circos.clear() Chart #224, and #225 introduced the circlize package and its ability to build circular charts. It is possible to add connections between tracks with circos.links(). See chart #122 for a customized version, and chart #123 for an automatized version. # library library(circlize) # Create data set.seed(123) data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Initialize the plot. par(mar = c(1, 1, 1, 1) ) circos.initialize(factors = data$factor, x = data$x ) # Build the regions of track #1 circos.trackPlotRegion(factors = data$factor, y=data$y , bg.col = rgb(0.1,0.1,seq(0,1,0.1),0.4) , bg.border = NA) # Add a link between a point and another circos.link(&quot;a&quot;, 0, &quot;b&quot;, 0, h = 0.4) # Add a link between a point and a zone circos.link(&quot;e&quot;, 0, &quot;g&quot;, c(-1,1), col = &quot;green&quot;, lwd = 2, lty = 2, border=&quot;black&quot; ) # Add a link between a zone and another circos.link(&quot;c&quot;, c(-0.5, 0.5), &quot;d&quot;, c(-0.5,0.5), col = &quot;red&quot;, border = &quot;blue&quot;, h = 0.2) 8.2.12 Advanced Chord Diagram with R and Circlize Chord diagram is an efficient way to display flows between entities. This section shows how to build it from an edge list or from an adjacency matrix, using the circlize package. 8.2.12.1 Chord Diagram from Adjacency Matrix The chordDiagram() function of the circlize package makes it a breeze to build chord diagrams from adjacency matrix in R. The adjacency matrix displays all origins in rows, and all destinations in columns. Each cell is filled with a numeric value specifying the flow strength. Note: Visit the chord section of the gallery or the circlize vignette for more chord examples. # Create an adjacency matrix: # a list of connections between 20 origin nodes, and 5 destination nodes: numbers &lt;- sample(c(1:1000), 100, replace = T) data &lt;- matrix( numbers, ncol=5) rownames(data) &lt;- paste0(&quot;orig-&quot;, seq(1,20)) colnames(data) &lt;- paste0(&quot;dest-&quot;, seq(1,5)) # Load the circlize library library(circlize) # Make the circular plot chordDiagram(data, transparency = 0.5) 8.2.13 Chord Diagram from Edge List Another common format to store flow information is the edge list. Basically, all connections are stored one by one in a 2 columns file, listing the origin and destination of each. Since the chordDiagram() function expects an adjacency matrix as input, it is required to use the table() function for reformating, as described below: # Create an edge list: a list of connections between 10 origin nodes, and 10 destination nodes: origin &lt;- paste0(&quot;orig &quot;, sample(c(1:10), 20, replace = T)) destination &lt;- paste0(&quot;dest &quot;, sample(c(1:10), 20, replace = T)) data &lt;- data.frame(origin, destination) # Transform input data in a adjacency matrix adjacencyData &lt;- with(data, table(origin, destination)) # Charge the circlize library library(circlize) # Make the circular plot chordDiagram(adjacencyData, transparency = 0.5) The circlize package developed by Zuguang Gu is the best way to build chord diagram in R. The chord diagram section of the gallery provides a step by step introduction to it. This example explains how to build a highly customized chord diagram, adding links manually thanks to the circos.link() function. Note that the library also offers a chordDiagram() functions that builds everything automatically, but offers less customization. (See it here.) Important: This example has been found on stackoverflow, made by Jazzuro. ### You need several libraries library(circlize) library(migest) library(dplyr) ### Make data m &lt;- data.frame(order = 1:6, country = c(&quot;Ausralia&quot;, &quot;India&quot;, &quot;China&quot;, &quot;Japan&quot;, &quot;Thailand&quot;, &quot;Malaysia&quot;), V3 = c(1, 150000, 90000, 180000, 15000, 10000), V4 = c(35000, 1, 10000, 12000, 25000, 8000), V5 = c(10000, 7000, 1, 40000, 5000, 4000), V6 = c(7000, 8000, 175000, 1, 11000, 18000), V7 = c(70000, 30000, 22000, 120000, 1, 40000), V8 = c(60000, 90000, 110000, 14000, 30000, 1), r = c(255,255,255,153,51,51), g = c(51, 153, 255, 255, 255, 255), b = c(51, 51, 51, 51, 51, 153), stringsAsFactors = FALSE) df1 &lt;- m[, c(1,2, 9:11)] m &lt;- m[,-(1:2)]/1e04 m &lt;- as.matrix(m[,c(1:6)]) dimnames(m) &lt;- list(orig = df1$country, dest = df1$country) #Sort order of data.frame and matrix for plotting in circos df1 &lt;- arrange(df1, order) df1$country &lt;- factor(df1$country, levels = df1$country) m &lt;- m[levels(df1$country),levels(df1$country)] ### Define ranges of circos sectors and their colors (both of the sectors and the links) df1$xmin &lt;- 0 df1$xmax &lt;- rowSums(m) + colSums(m) n &lt;- nrow(df1) df1$rcol&lt;-rgb(df1$r, df1$g, df1$b, max = 255) df1$lcol&lt;-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255) ### Plot sectors (outer part) par(mar=rep(0,4)) circos.clear() ### Basic circos graphic parameters circos.par(cell.padding=c(0,0,0,0), track.margin=c(0,0.15), start.degree = 90, gap.degree =4) ### Sector details circos.initialize(factors = df1$country, xlim = cbind(df1$xmin, df1$xmax)) ### Plot sectors circos.trackPlotRegion(ylim = c(0, 1), factors = df1$country, track.height=0.1, #panel.fun for each sector panel.fun = function(x, y) { #select details of current sector name = get.cell.meta.data(&quot;sector.index&quot;) i = get.cell.meta.data(&quot;sector.numeric.index&quot;) xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;) #text direction (dd) and adjusmtents (aa) theta = circlize(mean(xlim), 1.3)[1, 1] %% 360 dd &lt;- ifelse(theta &lt; 90 || theta &gt; 270, &quot;clockwise&quot;, &quot;reverse.clockwise&quot;) aa = c(1, 0.5) if(theta &lt; 90 || theta &gt; 270) aa = c(0, 0.5) #plot country labels circos.text(x=mean(xlim), y=1.7, labels=name, facing = dd, cex=0.6, adj = aa) #plot main sector circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2], ytop=ylim[2], col = df1$rcol[i], border=df1$rcol[i]) #blank in part of main sector circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2]-rowSums(m)[i], ytop=ylim[1]+0.3, col = &quot;white&quot;, border = &quot;white&quot;) #white line all the way around circos.rect(xleft=xlim[1], ybottom=0.3, xright=xlim[2], ytop=0.32, col = &quot;white&quot;, border = &quot;white&quot;) #plot axis circos.axis(labels.cex=0.6, direction = &quot;outside&quot;, major.at=seq(from=0,to=floor(df1$xmax)[i],by=5), minor.ticks=1, labels.away.percentage = 0.15) }) ### Plot links (inner part) ### Add sum values to df1, marking the x-position of the first links ### out (sum1) and in (sum2). Updated for further links in loop below. df1$sum1 &lt;- colSums(m) df1$sum2 &lt;- numeric(n) ### Create a data.frame of the flow matrix sorted by flow size, to allow largest flow plotted first df2 &lt;- cbind(as.data.frame(m),orig=rownames(m), stringsAsFactors=FALSE) df2 &lt;- reshape(df2, idvar=&quot;orig&quot;, varying=list(1:n), direction=&quot;long&quot;, timevar=&quot;dest&quot;, time=rownames(m), v.names = &quot;m&quot;) df2 &lt;- arrange(df2,desc(m)) ### Keep only the largest flows to avoid clutter df2 &lt;- subset(df2, m &gt; quantile(m,0.6)) ### Plot links for(k in 1:nrow(df2)){ #i,j reference of flow matrix i&lt;-match(df2$orig[k],df1$country) j&lt;-match(df2$dest[k],df1$country) #plot link circos.link(sector.index1=df1$country[i], point1=c(df1$sum1[i], df1$sum1[i] + abs(m[i, j])), sector.index2=df1$country[j], point2=c(df1$sum2[j], df1$sum2[j] + abs(m[i, j])), col = df1$lcol[i]) #update sum1 and sum2 for use when plotting the next link df1$sum1[i] = df1$sum1[i] + abs(m[i, j]) df1$sum2[j] = df1$sum2[j] + abs(m[i, j]) } 8.2.14 Chord Diagram A chord diagram represents flows or connections between several entities (called nodes). Each entity is represented by a fragment on the outer part of the circular layout. Then, arcs are drawn between each entities. The size of the arc is proportional to the importance of the flow. Here is an example displaying the number of people migrating from one country to another. Data used comes from this scientific publication from Gui J. Abel. # Libraries library(tidyverse) library(viridis) library(patchwork) library(hrbrthemes) library(circlize) library(chorddiag) #devtools::install_github(&quot;mattflor/chorddiag&quot;) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyDirectedWeighted.csv&quot;, header=TRUE) # short names colnames(data) &lt;- c(&quot;Africa&quot;, &quot;East Asia&quot;, &quot;Europe&quot;, &quot;Latin Ame.&quot;, &quot;North Ame.&quot;, &quot;Oceania&quot;, &quot;South Asia&quot;, &quot;South East Asia&quot;, &quot;Soviet Union&quot;, &quot;West.Asia&quot;) rownames(data) &lt;- colnames(data) # I need a long format data_long &lt;- data %&gt;% rownames_to_column %&gt;% gather(key = &#39;key&#39;, value = &#39;value&#39;, -rowname) # parameters circos.clear() circos.par(start.degree = 90, gap.degree = 4, track.margin = c(-0.1, 0.1), points.overflow.warning = FALSE) par(mar = rep(0, 4)) # color palette mycolor &lt;- viridis(10, alpha = 1, begin = 0, end = 1, option = &quot;D&quot;) mycolor &lt;- mycolor[sample(1:10)] # Base plot chordDiagram( x = data_long, grid.col = mycolor, transparency = 0.25, directional = 1, direction.type = c(&quot;arrows&quot;, &quot;diffHeight&quot;), diffHeight = -0.04, annotationTrack = &quot;grid&quot;, annotationTrackHeight = c(0.05, 0.1), link.arr.type = &quot;big.arrow&quot;, link.sort = TRUE, link.largest.ontop = TRUE) # Add text and axis circos.trackPlotRegion( track.index = 1, bg.border = NA, panel.fun = function(x, y) { xlim = get.cell.meta.data(&quot;xlim&quot;) sector.index = get.cell.meta.data(&quot;sector.index&quot;) # Add names to the sector. circos.text( x = mean(xlim), y = 3.2, labels = sector.index, facing = &quot;bending&quot;, cex = 0.8 ) # Add graduation on axis circos.axis( h = &quot;top&quot;, major.at = seq(from = 0, to = xlim[2], by = ifelse(test = xlim[2]&gt;10, yes = 2, no = 1)), minor.ticks = 1, major.tick.percentage = 0.5, labels.niceFacing = FALSE) } ) 8.2.15 Variations Interactivity is a real plus to make the chord diagram understandable. In the example below, you can hover a specific group to highlight all its connections. library(chorddiag) m &lt;- matrix(c(11975, 5871, 8916, 2868, 1951, 10048, 2060, 6171, 8010, 16145, 8090, 8045, 1013, 990, 940, 6907), byrow = TRUE, nrow = 4, ncol = 4) haircolors &lt;- c(&quot;black&quot;, &quot;blonde&quot;, &quot;brown&quot;, &quot;red&quot;) dimnames(m) &lt;- list(have = haircolors, prefer = haircolors) groupColors &lt;- c(&quot;#000000&quot;, &quot;#FFDD89&quot;, &quot;#957244&quot;, &quot;#F26223&quot;) chorddiag(m, groupColors = groupColors, groupnamePadding = 20) 8.2.16 Static Chord Diagram The circlize package also offers functions to build chord diagrams. Basically, it allows to add arcs between nodes to show flows. The examples below will guide you through their usage. The circos.links() function builds connection one by one, when chordDiagram() plot a whole dataset in one shot. 8.2.17 Introduction to Chord Diagram The circlize package allows to build chord diagrams, where arcs between sections are built to show flows. Chart #224, and #225 introduced the circlize package and its ability to build circular charts. It is possible to add connections between tracks with circos.links(). See chart #122 for a customized version, and chart #123 for an automatized version. # library library(circlize) # Create data set.seed(123) data = data.frame( factor = sample(letters[1:8], 1000, replace = TRUE), x = rnorm(1000), y = runif(1000) ) # Initialize the plot. par(mar = c(1, 1, 1, 1) ) circos.initialize(factors = data$factor, x = data$x ) # Build the regions of track #1 circos.trackPlotRegion(factors = data$factor, y=data$y , bg.col = rgb(0.1,0.1,seq(0,1,0.1),0.4) , bg.border = NA) # Add a link between a point and another circos.link(&quot;a&quot;, 0, &quot;b&quot;, 0, h = 0.4) # Add a link between a point and a zone circos.link(&quot;e&quot;, 0, &quot;g&quot;, c(-1,1), col = &quot;green&quot;, lwd = 2, lty = 2, border=&quot;black&quot; ) # Add a link between a zone and another circos.link(&quot;c&quot;, c(-0.5, 0.5), &quot;d&quot;, c(-0.5,0.5), col = &quot;red&quot;, border = &quot;blue&quot;, h = 0.2) 8.2.18 Chord Diagram from Adjacency Matrix The circlize package developped by Zuguang Gu is the best way to build chord diagram in R. The chord diagram section of the gallery provides a step by step introduction to it. This example explains how to build a highly customized chord diagram, adding links manually thanks to the circos.link() function. Note that the library also offers a chordDiagram() functions that builds everything automatically, but offers less customization. (See it here.) Important: This example has been found on stackoverflow, made by Jazzuro. ### You need several libraries library(circlize) library(migest) library(dplyr) ### Make data m &lt;- data.frame(order = 1:6, country = c(&quot;Ausralia&quot;, &quot;India&quot;, &quot;China&quot;, &quot;Japan&quot;, &quot;Thailand&quot;, &quot;Malaysia&quot;), V3 = c(1, 150000, 90000, 180000, 15000, 10000), V4 = c(35000, 1, 10000, 12000, 25000, 8000), V5 = c(10000, 7000, 1, 40000, 5000, 4000), V6 = c(7000, 8000, 175000, 1, 11000, 18000), V7 = c(70000, 30000, 22000, 120000, 1, 40000), V8 = c(60000, 90000, 110000, 14000, 30000, 1), r = c(255,255,255,153,51,51), g = c(51, 153, 255, 255, 255, 255), b = c(51, 51, 51, 51, 51, 153), stringsAsFactors = FALSE) df1 &lt;- m[, c(1,2, 9:11)] m &lt;- m[,-(1:2)]/1e04 m &lt;- as.matrix(m[,c(1:6)]) dimnames(m) &lt;- list(orig = df1$country, dest = df1$country) #Sort order of data.frame and matrix for plotting in circos df1 &lt;- arrange(df1, order) df1$country &lt;- factor(df1$country, levels = df1$country) m &lt;- m[levels(df1$country),levels(df1$country)] ### Define ranges of circos sectors and their colors (both of the sectors and the links) df1$xmin &lt;- 0 df1$xmax &lt;- rowSums(m) + colSums(m) n &lt;- nrow(df1) df1$rcol&lt;-rgb(df1$r, df1$g, df1$b, max = 255) df1$lcol&lt;-rgb(df1$r, df1$g, df1$b, alpha=200, max = 255) ### Plot sectors (outer part) par(mar=rep(0,4)) circos.clear() ### Basic circos graphic parameters circos.par(cell.padding=c(0,0,0,0), track.margin=c(0,0.15), start.degree = 90, gap.degree =4) ### Sector details circos.initialize(factors = df1$country, xlim = cbind(df1$xmin, df1$xmax)) ### Plot sectors circos.trackPlotRegion(ylim = c(0, 1), factors = df1$country, track.height=0.1, #panel.fun for each sector panel.fun = function(x, y) { #select details of current sector name = get.cell.meta.data(&quot;sector.index&quot;) i = get.cell.meta.data(&quot;sector.numeric.index&quot;) xlim = get.cell.meta.data(&quot;xlim&quot;) ylim = get.cell.meta.data(&quot;ylim&quot;) #text direction (dd) and adjusmtents (aa) theta = circlize(mean(xlim), 1.3)[1, 1] %% 360 dd &lt;- ifelse(theta &lt; 90 || theta &gt; 270, &quot;clockwise&quot;, &quot;reverse.clockwise&quot;) aa = c(1, 0.5) if(theta &lt; 90 || theta &gt; 270) aa = c(0, 0.5) #plot country labels circos.text(x=mean(xlim), y=1.7, labels=name, facing = dd, cex=0.6, adj = aa) #plot main sector circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2], ytop=ylim[2], col = df1$rcol[i], border=df1$rcol[i]) #blank in part of main sector circos.rect(xleft=xlim[1], ybottom=ylim[1], xright=xlim[2]-rowSums(m)[i], ytop=ylim[1]+0.3, col = &quot;white&quot;, border = &quot;white&quot;) #white line all the way around circos.rect(xleft=xlim[1], ybottom=0.3, xright=xlim[2], ytop=0.32, col = &quot;white&quot;, border = &quot;white&quot;) #plot axis circos.axis(labels.cex=0.6, direction = &quot;outside&quot;, major.at=seq(from=0,to=floor(df1$xmax)[i],by=5), minor.ticks=1, labels.away.percentage = 0.15) }) ### Plot links (inner part) ### Add sum values to df1, marking the x-position of the first links ### out (sum1) and in (sum2). Updated for further links in loop below. df1$sum1 &lt;- colSums(m) df1$sum2 &lt;- numeric(n) ### Create a data.frame of the flow matrix sorted by flow size, to allow largest flow plotted first df2 &lt;- cbind(as.data.frame(m),orig=rownames(m), stringsAsFactors=FALSE) df2 &lt;- reshape(df2, idvar=&quot;orig&quot;, varying=list(1:n), direction=&quot;long&quot;, timevar=&quot;dest&quot;, time=rownames(m), v.names = &quot;m&quot;) df2 &lt;- arrange(df2,desc(m)) ### Keep only the largest flows to avoid clutter df2 &lt;- subset(df2, m &gt; quantile(m,0.6)) ### Plot links for(k in 1:nrow(df2)){ #i,j reference of flow matrix i&lt;-match(df2$orig[k],df1$country) j&lt;-match(df2$dest[k],df1$country) #plot link circos.link(sector.index1=df1$country[i], point1=c(df1$sum1[i], df1$sum1[i] + abs(m[i, j])), sector.index2=df1$country[j], point2=c(df1$sum2[j], df1$sum2[j] + abs(m[i, j])), col = df1$lcol[i]) #update sum1 and sum2 for use when plotting the next link df1$sum1[i] = df1$sum1[i] + abs(m[i, j]) df1$sum2[j] = df1$sum2[j] + abs(m[i, j]) } 8.3 Edge Bundling 8.3.1 Hierarchical Edge Bundling Hierarchical edge bundling allows to visualize adjacency relations between entities organized in a hierarchy. The idea is to bundle the adjacency edges together to decrease the clutter usually observed in complex networks. The ggraph package is the best tool to build this kind of chart in R. 8.3.1.1 What is Hierarchical Edge Bundling? The following post will guide you through the basics of hierarchical edge bundling. It explains what this kind of chart really is, describing step by step how to build it in R with the graph package. 8.3.2 Introduction to Hierarchical Edge Bundling with R This section defines what hierarchical edge bundling is. It provides a basic implementation using R and the ggraph library. For an in depth explanation, visit data-to-viz.com. 8.3.2.1 Input Data Hierarchical Edge Bundling is a data visualisation method allowing to check connections between leaves of a hierarchical network. It requires two inputs: A hierarchical network structure, also called tree. An adjacency matrix that describes connections between some nodes of the tree. Hierarchical network data frame: Connections data frame: 8.3.2.2 Visualizing the Hierarchy Let’s start by creating the hierarchic structure with R. A hierarchic structure is basically a set of nodes, with edges linking nodes. We often accompany it with a second data frame that gives features for each node of the first data frame. Let’s build these 2 tables: # Libraries library(ggraph) library(igraph) # create a data frame giving the hierarchical structure of your individuals. # Origin on top, then groups, then subgroups d1 &lt;- data.frame(from=&quot;origin&quot;, to=paste(&quot;group&quot;, seq(1,10), sep=&quot;&quot;)) d2 &lt;- data.frame(from=rep(d1$to, each=10), to=paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;)) hierarchy &lt;- rbind(d1, d2) # create a vertices data.frame. One line per object of our hierarchy, giving features of nodes. vertices &lt;- data.frame(name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) ) A hierarchical structure is a network structure. Thus, we can visualise it with the igraph or the ggraph library quite easily, like described in the network section of the gallery. # Create a graph object with the igraph library mygraph &lt;- graph_from_data_frame( hierarchy, vertices=vertices ) # This is a network object, you visualize it as a network like shown in the network section! # With igraph: plot(mygraph, vertex.label=&quot;&quot;, edge.arrow.size=0, vertex.size=2) # With ggraph: ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = FALSE) + geom_edge_link() + theme_void() ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_edge_diagonal() + theme_void() 8.3.3 Add a Few Connections Now, let’s add a second input to our data: connections. Suppose that nodes 18, 20 and 30 are connected to nodes 19, 50 and 70 respectively. An obvious solution to represent this link could be to add a straight line (left). The hierarchical edge bundling method does almost that. But it curves the lines to make thelm follow the edges of our structure (right). This method offers a tension parameters which controls how much we want to curve the lines. # left: What happens if connections are represented with straight lines ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_edge_diagonal(alpha=0.1) + geom_conn_bundle(data = get_con(from = c(18,20,30), to = c(19, 50, 70)), alpha=1, width=1, colour=&quot;skyblue&quot;, tension = 0) + theme_void() # right: using the bundle method (tension = 1) ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_edge_diagonal(alpha=0.1) + geom_conn_bundle(data = get_con(from = c(18,20,30), to = c(19, 50, 70)), alpha=1, width=1, colour=&quot;skyblue&quot;, tension = 1) + theme_void() 8.3.4 Hierarchical Edge Bundling Usually connections are stored in another data frame, here called connect. We have to pass it to ggraph to automatically plot all the connections. You get a hierarchical edge bundling chart. Note: ggraph expect nodes to be called following their id. Thus, it is necessary to get them using the match() function. # create a dataframe with connection between leaves (individuals) all_leaves &lt;- paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;) connect &lt;- rbind( data.frame( from=sample(all_leaves, 100, replace=T) , to=sample(all_leaves, 100, replace=T)), data.frame( from=sample(head(all_leaves), 30, replace=T) , to=sample( tail(all_leaves), 30, replace=T)), data.frame( from=sample(all_leaves[25:30], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)), data.frame( from=sample(all_leaves[75:80], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)) ) # The connection object must refer to the ids of the leaves: from &lt;- match( connect$from, vertices$name) to &lt;- match( connect$to, vertices$name) # plot ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, tension = 0) + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) + theme_void() # plot ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, tension = 0.9) + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) + theme_void() 8.3.5 Customize Hierarchical Edge Bundling This section shows a few customization you can apply to a hierarchical edge bundling chart. It shows how to control the way connection are curved, how to manage connection colors and node features. 8.3.5.1 Basic Hierarchical Edge Bundling This page follows the previous introduction to hierarchical edge bundling. It considers you understood what inputs you need and how to build a basic version. It aims to describe how we can improve it, customizing tension, connection and node features. First, let’s remember the R code allowing to get this very basic hierarchical edge bundling: # Libraries library(ggraph) library(igraph) library(tidyverse) # create a data frame giving the hierarchical structure of your individuals set.seed(1234) d1 &lt;- data.frame(from=&quot;origin&quot;, to=paste(&quot;group&quot;, seq(1,10), sep=&quot;&quot;)) d2 &lt;- data.frame(from=rep(d1$to, each=10), to=paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;)) hierarchy &lt;- rbind(d1, d2) # create a dataframe with connection between leaves (individuals) all_leaves &lt;- paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;) connect &lt;- rbind( data.frame( from=sample(all_leaves, 100, replace=T) , to=sample(all_leaves, 100, replace=T)), data.frame( from=sample(head(all_leaves), 30, replace=T) , to=sample( tail(all_leaves), 30, replace=T)), data.frame( from=sample(all_leaves[25:30], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)), data.frame( from=sample(all_leaves[75:80], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)) ) connect$value &lt;- runif(nrow(connect)) # create a vertices data.frame. One line per object of our hierarchy vertices &lt;- data.frame( name = unique(c(as.character(hierarchy$from), as.character(hierarchy$to))) , value = runif(111) ) # Let&#39;s add a column with the group of each name. It will be useful later to color points vertices$group &lt;- hierarchy$from[ match( vertices$name, hierarchy$to ) ] # Create a graph object mygraph &lt;- graph_from_data_frame( hierarchy, vertices=vertices ) # The connection object must refer to the ids of the leaves: from &lt;- match( connect$from, vertices$name) to &lt;- match( connect$to, vertices$name) # Basic graph ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, tension = .5) + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) + theme_void() 8.3.6 Playing with tension The first thing we can play with is the tension of the connections. A tension of 0 means straight lines. A connection of 1 means maximal curvature: the connections follow the hierarchical structure of the network as much as they can. Let’s have a look to the effect of different values. p &lt;- ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) + theme_void() # 0.1 p + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, width=0.9, tension=0.1) # 0.7 p + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, width=0.9, tension=0.7) #1 p + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, width=0.9, tension=1) 8.3.7 Connection Features Then we can play with the colour and transparency of connections. We have seen how to pick up a unique color in the example above. We can also map a specific variable to it like we are used to do with ggplot2 (chart 1 and 2 below)! Another possibility is to make the color evolves along the trajectory: the ‘from’ and the ‘to’ have different color. This is useful if your connection is directed, and gives the nice effect figure 4. # Use the &#39;value&#39; column of the connection data frame for the color: p + geom_conn_bundle(data = get_con(from = from, to = to), aes(colour=value, alpha=value)) # In this case you can change the color palette p + geom_conn_bundle(data = get_con(from = from, to = to), aes(colour=value)) + scale_edge_color_continuous(low=&quot;white&quot;, high=&quot;red&quot;) p + geom_conn_bundle(data = get_con(from = from, to = to), aes(colour=value)) + scale_edge_colour_distiller(palette = &quot;BuPu&quot;) # Color depends of the index: the from and the to are different p + geom_conn_bundle(data = get_con(from = from, to = to), width=1, alpha=0.2, aes(colour=..index..)) + scale_edge_colour_distiller(palette = &quot;RdPu&quot;) + theme(legend.position = &quot;none&quot;) 8.3.8 Node Features Finally we can custom the points as well, like for a classic ggplot2 graphic. It is a good practice to make the color depends of the classification of the point, it allows to make the hierarchy more obvious. In the last example, I map a column to the size of the points. # Basic usual argument p=ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_conn_bundle(data = get_con(from = from, to = to), width=1, alpha=0.2, aes(colour=..index..)) + scale_edge_colour_distiller(palette = &quot;RdPu&quot;) + theme_void() + theme(legend.position = &quot;none&quot;) # just a blue uniform color. Note that the x*1.05 allows to make a space between the points and the connection ends p + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05), colour=&quot;skyblue&quot;, alpha=0.3, size=3) # It is good to color the points following their group appartenance library(RColorBrewer) p + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group), size=3) + scale_colour_manual(values= rep( brewer.pal(9,&quot;Paired&quot;) , 30)) # And you can adjust the size to whatever variable quite easily! p + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05, colour=group, size=value, alpha=0.2)) + scale_colour_manual(values= rep( brewer.pal(9,&quot;Paired&quot;) , 30)) + scale_size_continuous( range = c(0.1,10) ) 8.3.9 Without Labels Previous section of the hierarchical edge bundling section explained: How to build a very basic version. How to customize connection and node features. Let’s remind how to prepare the data for the ggraph library. # Libraries library(ggraph) library(igraph) library(tidyverse) library(RColorBrewer) # create a data frame giving the hierarchical structure of your individuals set.seed(1234) d1 &lt;- data.frame(from=&quot;origin&quot;, to=paste(&quot;group&quot;, seq(1,10), sep=&quot;&quot;)) d2 &lt;- data.frame(from=rep(d1$to, each=10), to=paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;)) edges &lt;- rbind(d1, d2) # create a dataframe with connection between leaves (individuals) all_leaves &lt;- paste(&quot;subgroup&quot;, seq(1,100), sep=&quot;_&quot;) connect &lt;- rbind( data.frame( from=sample(all_leaves, 100, replace=T) , to=sample(all_leaves, 100, replace=T)), data.frame( from=sample(head(all_leaves), 30, replace=T) , to=sample( tail(all_leaves), 30, replace=T)), data.frame( from=sample(all_leaves[25:30], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)), data.frame( from=sample(all_leaves[75:80], 30, replace=T) , to=sample( all_leaves[55:60], 30, replace=T)) ) connect$value &lt;- runif(nrow(connect)) # create a vertices data.frame. One line per object of our hierarchy vertices &lt;- data.frame( name = unique(c(as.character(edges$from), as.character(edges$to))) , value = runif(111) ) # Let&#39;s add a column with the group of each name. It will be useful later to color points vertices$group &lt;- edges$from[ match( vertices$name, edges$to ) ] 8.3.10 Create the Labels Next step: computing the label features that will be displayed all around the circle, next to the nodes: Angle: Vertical on top and button, horizontal on the side, and so on. Flip it: Labels on the left hand side must be flipped to be readable. Alignment: Ff labels are flipped, they must be right aligned. Those information are computed and added to the vertices data frame. #Let&#39;s add information concerning the label we are going to add: angle, horizontal adjustement and potential flip #calculate the ANGLE of the labels vertices$id &lt;- NA myleaves &lt;- which(is.na( match(vertices$name, edges$from) )) nleaves &lt;- length(myleaves) vertices$id[ myleaves ] &lt;- seq(1:nleaves) vertices$angle &lt;- 90 - 360 * vertices$id / nleaves # calculate the alignment of labels: right or left # If I am on the left part of the plot, my labels have currently an angle &lt; -90 vertices$hjust &lt;- ifelse( vertices$angle &lt; -90, 1, 0) # flip angle BY to make them readable vertices$angle &lt;- ifelse(vertices$angle &lt; -90, vertices$angle+180, vertices$angle) 8.3.11 Plot the Labels Now that label features have been computed, we just need to display it on the chart using the geom_node_text() function. # Create a graph object mygraph &lt;- igraph::graph_from_data_frame( edges, vertices=vertices ) # The connection object must refer to the ids of the leaves: from &lt;- match( connect$from, vertices$name) to &lt;- match( connect$to, vertices$name) # Basic usual argument ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_node_point(aes(filter = leaf, x = x*1.05, y=y*1.05)) + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, colour=&quot;skyblue&quot;, width=0.9) + geom_node_text(aes(x = x*1.1, y=y*1.1, filter = leaf, label=name, angle = angle, hjust=hjust), size=1.5, alpha=1) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(c(0,0,0,0),&quot;cm&quot;), ) + expand_limits(x = c(-1.2, 1.2), y = c(-1.2, 1.2)) 8.3.12 With Customization To get the final figure, it is necessary to add customization described in graph #310: Control node size, color and transparency Control connection color ggraph(mygraph, layout = &#39;dendrogram&#39;, circular = TRUE) + geom_conn_bundle(data = get_con(from = from, to = to), alpha=0.2, width=0.9, aes(colour=..index..)) + scale_edge_colour_distiller(palette = &quot;RdPu&quot;) + geom_node_text(aes(x = x*1.15, y=y*1.15, filter = leaf, label=name, angle = angle, hjust=hjust, colour=group), size=2, alpha=1) + geom_node_point(aes(filter = leaf, x = x*1.07, y=y*1.07, colour=group, size=value, alpha=0.2)) + scale_colour_manual(values= rep( brewer.pal(9,&quot;Paired&quot;) , 30)) + scale_size_continuous( range = c(0.1,10) ) + theme_void() + theme( legend.position=&quot;none&quot;, plot.margin=unit(c(0,0,0,0),&quot;cm&quot;), ) + expand_limits(x = c(-1.3, 1.3), y = c(-1.3, 1.3)) 8.4 Network Graph Network diagrams (or Graphs) show interconnections between a set of entities. Each entity is represented by a Node (or vertice). Connections between nodes are represented by links (or edges). Three packages are of interest in R: igraph for data preparation and plotting, ggraph for plotting using the grammar of graphic, and networkD3 for interactivity. Datacamp offers a good online course on the topic. 8.4.0.1 Input Format and Introduction to igraph Building a network diagram is always complicated since many different input formats are available: Adjacency matrix Incidence matrix Edge list Moreover, you need to know wheter the network you’re trying to build is directed or undirected, and weighted or unweighted. In any case, the igraph package is the best tool to read that kind of data and transform it into a graph object that is required to make a chart. 8.4.1 Network Chart with R and igraph from any Type of Input This section explains how to get started with the igraph package from any type of input. It shows how to build a network diagram from adjacency matrix, edge list, litteral list and more. 8.4.1.1 Adjacency Matrix An adjacency matrix is a square matrix where individuals in rows and columns are the same. It’s typically the kind of matrix you get when calculating the correlation between each pair of individual. In this example, we have 1 connection from E to C, and 2 connections from C to E. By default, we get an unweighted and oriented network. #library library(igraph) # Create data set.seed(10) data &lt;- matrix(sample(0:2, 25, replace=TRUE), nrow=5) colnames(data) = rownames(data) = LETTERS[1:5] # build the graph object network &lt;- graph_from_adjacency_matrix(data) # plot it plot(network) 8.4.2 Incidence Matrix An incidence matrix is not square and entities provided in rows and columns are not necessary the same. Note: by default, the graph object is directed from rows to columns. # lib library(igraph) # data set.seed(1) data &lt;- matrix(sample(0:2, 15, replace=TRUE), nrow=3) colnames(data) &lt;- letters[1:5] rownames(data) &lt;- LETTERS[1:3] # create the network object network &lt;- graph_from_incidence_matrix(data) # plot it plot(network) 8.4.3 Edge List An edge list has 2 columns. Each row represents a connection between an origin (first column) and a destination (left column). Note: this kind of input often goes with another dataframe providing features for each node. (See this post). It is also possible to add information concerning each link in the edge list. # create data: links &lt;- data.frame( source=c(&quot;A&quot;,&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;,&quot;F&quot;, &quot;B&quot;), target=c(&quot;B&quot;,&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;F&quot;,&quot;A&quot;,&quot;E&quot;) ) # create the network object network &lt;- graph_from_data_frame(d=links, directed=F) # plot it plot(network) 8.4.4 Literal List of Connections Last option that is less often used: a literal list of the connection. Can be understand by igraph thanks to the graph_from_literal() function. # create data: network &lt;- graph_from_literal( A-B-C-D, E-A-E-A, D-C-A, D-A-D-C ) # plot it plot(network) 8.4.5 Default Network Chart with igraph This section assumes you already know how to build a basic network chart with the igraph library. If you don’t have a look to the network section that provides an introduction. Basically, igraph allows to transform several types of input into a graph object that can be plotted using the plot() function as follow: # Library library(igraph) # Create data set.seed(1) data &lt;- matrix(sample(0:1, 100, replace=TRUE, prob=c(0.8,0.2)), nc=10) network &lt;- graph_from_adjacency_matrix(data , mode=&#39;undirected&#39;, diag=F ) # Default network par(mar=c(0,0,0,0)) plot(network) 8.4.6 Customize Node Features Node can be modified buy several arguments that all start with vertex. A vertex is a node inigraph` language. Main options are explained in the code below: plot(network, vertex.color = rgb(0.8,0.2,0.2,0.9), # Node color vertex.frame.color = &quot;Forestgreen&quot;, # Node border color vertex.shape=c(&quot;circle&quot;,&quot;square&quot;), # One of &#39;none&#39;, &#39;circle&#39;, &#39;square&#39;, &#39;csquare&#39;, &#39;rectangle&#39; &#39;crectangle&#39;, &#39;vrectangle&#39;, &#39;pie&#39;, &#39;raster&#39;, or &#39;sphere&#39; vertex.size=c(15:24), # Size of the node (default is 15) vertex.size2=NA, # The second size of the node (e.g. for a rectangle) ) 8.4.7 Customize Label Features Following the same principle, options starting with vertex.label. control the label features. Note that when several values are provided to an option, values are used subsequently and recycled. plot(network, vertex.label=LETTERS[1:10], # Character vector used to label the nodes vertex.label.color=c(&quot;red&quot;,&quot;blue&quot;), vertex.label.family=&quot;Times&quot;, # Font family of the label (e.g.&#39;Times&#39;, &#39;Helvetica&#39;) vertex.label.font=c(1,2,3,4), # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol vertex.label.cex=c(0.5,1,1.5), # Font size (multiplication factor, device-dependent) vertex.label.dist=0, # Distance between the label and the vertex vertex.label.degree=0 , # The position of the label in relation to the vertex (use pi) ) 8.4.8 Customize Link Features Last but not least, control edges with arguments starting with edge. plot(network, edge.color=rep(c(&quot;red&quot;,&quot;pink&quot;),5), # Edge color edge.width=seq(1,10), # Edge width, defaults to 1 edge.arrow.size=1, # Arrow size, defaults to 1 edge.arrow.width=1, # Arrow width, defaults to 1 edge.lty=c(&quot;solid&quot;) # Line type, could be 0 or &#39;blank&#39;, 1 or &#39;solid&#39;, 2 or &#39;dashed&#39;, 3 or &#39;dotted&#39;, 4 or &#39;dotdash&#39;, 5 or &#39;longdash&#39;, 6 or &#39;twodash&#39; #edge.curved=c(rep(0,5), rep(1,5)) # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5) ) 8.4.9 All Customization Of course, you can use all the options described above all together on the same chart, for a high level of customization. par(bg=&quot;black&quot;) plot(network, # === vertex vertex.color = rgb(0.8,0.4,0.3,0.8), # Node color vertex.frame.color = &quot;white&quot;, # Node border color vertex.shape=&quot;circle&quot;, # One of &#39;none&#39;, &#39;circle&#39;, &#39;square&#39;, &#39;csquare&#39;, &#39;rectangle&#39; &#39;crectangle&#39;, &#39;vrectangle&#39;, &#39;pie&#39;, &#39;raster&#39;, or &#39;sphere&#39; vertex.size=14, # Size of the node (default is 15) vertex.size2=NA, # The second size of the node (e.g. for a rectangle) # === vertex label vertex.label=LETTERS[1:10], # Character vector used to label the nodes vertex.label.color=&quot;white&quot;, vertex.label.family=&quot;Times&quot;, # Font family of the label (e.g.&#39;Times&#39;, &#39;Helvetica&#39;) vertex.label.font=2, # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol vertex.label.cex=1, # Font size (multiplication factor, device-dependent) vertex.label.dist=0, # Distance between the label and the vertex vertex.label.degree=0 , # The position of the label in relation to the vertex (use pi) # === Edge edge.color=&quot;white&quot;, # Edge color edge.width=4, # Edge width, defaults to 1 edge.arrow.size=1, # Arrow size, defaults to 1 edge.arrow.width=1, # Arrow width, defaults to 1 edge.lty=&quot;solid&quot;, # Line type, could be 0 or &#39;blank&#39;, 1 or &#39;solid&#39;, 2 or &#39;dashed&#39;, 3 or &#39;dotted&#39;, 4 or &#39;dotdash&#39;, 5 or &#39;longdash&#39;, 6 or &#39;twodash&#39; edge.curved=0.3 , # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5) ) 8.4.10 Network Layouts Network layouts are algorithms that return coordinates for each node in a network. The igraph library offers several built-in layouts, and a sample of them is presented here. Choose your layout using the layout argument. Type help(layout) to see all the possibilities. In practice, the fruchterman reingold algorithm is often used. Usually, algorithms try to minimize edge crossing and prevent overlap. Edges can have uniform length or not. # library library(igraph) # Create data data &lt;- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20) network &lt;- graph_from_adjacency_matrix(data , mode=&#39;undirected&#39;, diag=F ) # When ploting, we can use different layouts: par(mfrow=c(2,2), mar=c(1,1,1,1)) plot(network, layout=layout.sphere, main=&quot;sphere&quot;) plot(network, layout=layout.circle, main=&quot;circle&quot;) plot(network, layout=layout.random, main=&quot;random&quot;) plot(network, layout=layout.fruchterman.reingold, main=&quot;fruchterman.reingold&quot;) # See the complete list with # help(layout) 8.4.11 Map Variable to Node and Links Feature in R igraph Network The igraph package is the best way to build network diagram](https://www.r-graph-gallery.com/network.html) with R. This section shows how to map a variable to node or link features, allowing to add more insight to the chart. 8.4.11.1 Map Variable to Node Features Once you know how to make a basic network graph and how to customize its general features, you probably want to map the features according to another variable. Here we consider a network with 10 people. Each is either adult, old or young and we want one specific color for each category. The dataset is composed by 2 data frames. Links provides the links between people. Nodes gives features concerning people. What we need is to transform the carac column into a vector of 3 colors, and provide this vector to the plot. The 3 colors are picked up in an Rcolorbrewer palette as described in graph #39. # library library(igraph) # create data: links &lt;- data.frame( source=c(&quot;A&quot;,&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;,&quot;J&quot;, &quot;B&quot;, &quot;B&quot;, &quot;C&quot;, &quot;C&quot;, &quot;D&quot;,&quot;I&quot;), target=c(&quot;B&quot;,&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;J&quot;,&quot;A&quot;,&quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;,&quot;I&quot;), importance=(sample(1:4, 12, replace=T)) ) nodes &lt;- data.frame( name=LETTERS[1:10], carac=c( rep(&quot;young&quot;,3),rep(&quot;adult&quot;,2), rep(&quot;old&quot;,5)) ) # Turn it into igraph object network &lt;- graph_from_data_frame(d=links, vertices=nodes, directed=F) # Make a palette of 3 colors library(RColorBrewer) coul &lt;- brewer.pal(3, &quot;Set1&quot;) # Create a vector of color my_color &lt;- coul[as.numeric(as.factor(V(network)$carac))] # Make the plot plot(network, vertex.color=my_color) # Add a legend legend(&quot;bottomleft&quot;, legend=levels(as.factor(V(network)$carac)) , col = coul , bty = &quot;n&quot;, pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1)) 8.4.12 Map Variable to Link Features Following the same principle, it is possible to map other variables to other parameters. Here is an example where we map the importance of the nodes to the edge width. (There is an importance column in the links data frame) # Check #E(network)$importance # Plot plot(network, vertex.color=my_color, edge.width=E(network)$importance*2 ) legend(&quot;bottomleft&quot;, legend=levels(as.factor(V(network)$carac)) , col = coul , bty = &quot;n&quot;, pch=20 , pt.cex = 3, cex = 1.5, text.col=coul , horiz = FALSE, inset = c(0.1, 0.1)) 8.4.13 Clustering Result Visualization with Network Diagram This section explains how to compute a correlation matrix and display the result as a network chart using R and the igraph package. 8.4.13.1 Compute the Correlation Matrix Consider a dataset composed by entities (usually in rows) and features (usually in columns). It is possible to compute a correlation matrix from it. It is a square matrix showing the relationship between each pair of entity. It can be computed using correlation (cor()) or euclidean distance (dist()). Let’s apply it to the mtcars dataset that is natively provided by R. # library library(igraph) # data # head(mtcars) # Make a correlation matrix: mat &lt;- cor(t(mtcars[,c(1,3:6)])) 8.4.14 Basic Network Diagram A correlation matrix can be visualized as a network diagram. Each entity of the dataset will be a node. And 2 nodes will be connected if their correlation or distance reach a threshold (0.995 here). To make a graph object from the correlation matrix, use the graph_from_adjacency_matrix() function of the igraph package. If you’re not familiar with igraph, the network section is full of examples to get you started. # Keep only high correlations mat[mat&lt;0.995] &lt;- 0 # Make an Igraph object from this matrix: network &lt;- graph_from_adjacency_matrix( mat, weighted=T, mode=&quot;undirected&quot;, diag=F) # Basic chart plot(network) 8.4.15 Customization The hardest part of the job has been done. The chart just requires a bit of polishing for a better output: Customize node, link, label and background features as you like. Map the node feature to a variable (cyl here). It gives an additional layer of information, allowing to compare the network structure with a potential expected organization. # color palette library(RColorBrewer) coul &lt;- brewer.pal(nlevels(as.factor(mtcars$cyl)), &quot;Set2&quot;) # Map the color to cylinders my_color &lt;- coul[as.numeric(as.factor(mtcars$cyl))] # plot par(bg=&quot;grey13&quot;, mar=c(0,0,0,0)) set.seed(4) plot(network, vertex.size=12, vertex.color=my_color, vertex.label.cex=0.7, vertex.label.color=&quot;white&quot;, vertex.frame.color=&quot;transparent&quot; ) # title and legend text(0,0,&quot;mtcars network&quot;,col=&quot;white&quot;, cex=1.5) legend(x=-0.2, y=-0.12, legend=paste( levels(as.factor(mtcars$cyl)), &quot; cylinders&quot;, sep=&quot;&quot;), col = coul , bty = &quot;n&quot;, pch=20 , pt.cex = 2, cex = 1, text.col=&quot;white&quot; , horiz = F) 8.4.16 Customize Link Features Last but not least, control edges with arguments starting with edge. plot(network, edge.color=rep(c(&quot;red&quot;,&quot;pink&quot;),5), # Edge color edge.width=seq(1,10), # Edge width, defaults to 1 edge.arrow.size=1, # Arrow size, defaults to 1 edge.arrow.width=1, # Arrow width, defaults to 1 edge.lty=c(&quot;solid&quot;) # Line type, could be 0 or &#39;blank&#39;, 1 or &#39;solid&#39;, 2 or &#39;dashed&#39;, 3 or &#39;dotted&#39;, 4 or &#39;dotdash&#39;, 5 or &#39;longdash&#39;, 6 or &#39;twodash&#39; #edge.curved=c(rep(0,5), rep(1,5)) # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5) ) 8.4.17 All Customization Of course, you can use all the options described above all together on the same chart, for a high level of customization. par(bg=&quot;black&quot;) plot(network, # === vertex vertex.color = rgb(0.8,0.4,0.3,0.8), # Node color vertex.frame.color = &quot;white&quot;, # Node border color vertex.shape=&quot;circle&quot;, # One of &#39;none&#39;, &#39;circle&#39;, &#39;square&#39;, &#39;csquare&#39;, &#39;rectangle&#39; &#39;crectangle&#39;, &#39;vrectangle&#39;, &#39;pie&#39;, &#39;raster&#39;, or &#39;sphere&#39; vertex.size=14, # Size of the node (default is 15) vertex.size2=NA, # The second size of the node (e.g. for a rectangle) # === vertex label vertex.label=LETTERS[1:10], # Character vector used to label the nodes vertex.label.color=&quot;white&quot;, vertex.label.family=&quot;Times&quot;, # Font family of the label (e.g.&#39;Times&#39;, &#39;Helvetica&#39;) vertex.label.font=2, # Font: 1 plain, 2 bold, 3, italic, 4 bold italic, 5 symbol vertex.label.cex=1, # Font size (multiplication factor, device-dependent) vertex.label.dist=0, # Distance between the label and the vertex vertex.label.degree=0 , # The position of the label in relation to the vertex (use pi) # === Edge edge.color=&quot;white&quot;, # Edge color edge.width=4, # Edge width, defaults to 1 edge.arrow.size=1, # Arrow size, defaults to 1 edge.arrow.width=1, # Arrow width, defaults to 1 edge.lty=&quot;solid&quot;, # Line type, could be 0 or &#39;blank&#39;, 1 or &#39;solid&#39;, 2 or &#39;dashed&#39;, 3 or &#39;dotted&#39;, 4 or &#39;dotdash&#39;, 5 or &#39;longdash&#39;, 6 or &#39;twodash&#39; edge.curved=0.3 , # Edge curvature, range 0-1 (FALSE sets it to 0, TRUE to 0.5) ) 8.4.18 Network with Node Size Based on Edge Number This section explains how to build a network diagram where node size is proportionnal to its number of connection with other nodes. It uses R and the igraph package. 8.4.18.1 Basic Network Diagram It is a common task to make nodes bigger when they are heavily connected with other nodes. Indeed, it means they have an importance in the network and thus deserves to be highlighted. The degree() function of the igraph package allows to compute the number of connection per node. It is possible to pass its result to the vertex.size argument of the plot() function to get the targeted result. # library library(igraph) # create data: links=data.frame( source=c(&quot;A&quot;,&quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;,&quot;J&quot;, &quot;B&quot;, &quot;B&quot;, &quot;C&quot;, &quot;C&quot;, &quot;D&quot;,&quot;I&quot;), target=c(&quot;B&quot;,&quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;J&quot;,&quot;A&quot;,&quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;,&quot;I&quot;) ) # Turn it into igraph object network &lt;- graph_from_data_frame(d=links, directed=F) # Count the number of degree for each node: deg &lt;- degree(network, mode=&quot;all&quot;) # Plot plot(network, vertex.size=deg*6, vertex.color=rgb(0.1,0.7,0.8,0.5) ) 8.4.19 Most Basic Network Diagram Here is a very basic interactive network diagram built with the networkD3 package. Its creation follows those steps: Input has to be at edge list format: each row specify a link between 2 nodes. The simpleNetwork() function allows to plot the interactive chart directly. The saveWidget() function allows to save the chart in a standalone .html file if needed. # Libraries library(igraph) library(networkD3) # create a dataset: data &lt;- data_frame( from=c(&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;K&quot;, &quot;A&quot;, &quot;M&quot;), to=c(&quot;B&quot;, &quot;E&quot;, &quot;F&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;Z&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;K&quot;) ) # Plot p &lt;- simpleNetwork(data, height=&quot;400px&quot;, width=&quot;100%&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/flowHtml/networkInteractive1.html&quot;)) 8.4.20 Interactive Network Customization Many option are available to customize the interactive diagram. Some options allow to customize the node, links and label feature, like nodeColour or fontSize. They are easy to understand and you can get a list of them with help(simpleNetwork). Other options allow to control the layout, i.e. how nodes are distributed on the window. networkD3 uses a force algorithm: each nodes are gonna be attracted / repulsed depending on their connection degree? # Libraries library(igraph) library(networkD3) # create a dataset: data &lt;- data_frame( from=c(&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;K&quot;, &quot;A&quot;, &quot;M&quot;), to=c(&quot;B&quot;, &quot;E&quot;, &quot;F&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;Z&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;K&quot;) ) # Plot p &lt;- simpleNetwork(data, height=&quot;100px&quot;, width=&quot;100px&quot;, Source = 1, # column number of source Target = 2, # column number of target linkDistance = 10, # distance between node. Increase this value to have more space between nodes charge = -900, # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value) fontSize = 14, # size of the node names fontFamily = &quot;serif&quot;, # font og node names linkColour = &quot;#666&quot;, # colour of edges, MUST be a common colour for the whole graph nodeColour = &quot;#69b3a2&quot;, # colour of nodes, MUST be a common colour for the whole graph opacity = 0.9, # opacity of nodes. 0=transparent. 1=no transparency zoom = T # Can you zoom on the figure? ) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/networkInteractive2.html&quot;)) 8.5 Sankey Diagram A Sankey diagram allows to study flows. Entities (nodes) are represented by rectangles or text. Arrows or arcs are used to show flows between them. In R, the networkD3 package is the best way to build them 8.5.1 Most Basic Sankey Diagram Sankey Diagram can be built in R using the networkD3 package. This sections displays basic example, focusing on the different input formats that can be used. A Sankey diagram represents flows, i.e. weigthed connections going from one node to another. Input data can be stored in 2 different formats: Connection data frame (3 columns). Incidence matrix (square matrix). This section describes how to build a basic Sankey diagram from these 2 types of input. 8.5.1.1 From Connection Data Frame A connection data frame lists all the connections one by one in a data frame. Usually you have a source and a target column. You can add a third column that gives further information for each connection, like the value of the flow. This is the format you need to use the networkD3 library. Let’s build a connection data frame and represent it as a Sankey diagram: # Library library(networkD3) library(dplyr) # A connection data frame is a list of flows with intensity for each flow links &lt;- data.frame( source=c(&quot;group_A&quot;,&quot;group_A&quot;, &quot;group_B&quot;, &quot;group_C&quot;, &quot;group_C&quot;, &quot;group_E&quot;), target=c(&quot;group_C&quot;,&quot;group_D&quot;, &quot;group_E&quot;, &quot;group_F&quot;, &quot;group_G&quot;, &quot;group_H&quot;), value=c(2,3, 2, 3, 1, 3) ) # From these flows we need to create a node data frame: it lists every entities involved in the flow nodes &lt;- data.frame( name=c(as.character(links$source), as.character(links$target)) %&gt;% unique() ) # With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it. links$IDsource &lt;- match(links$source, nodes$name)-1 links$IDtarget &lt;- match(links$target, nodes$name)-1 # Make the Network p &lt;- sankeyNetwork(Links = links, Nodes = nodes, Source = &quot;IDsource&quot;, Target = &quot;IDtarget&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, sinksRight=FALSE) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/flowHtml//sankeyBasic1.html&quot;)) 8.5.2 From Incidence Matrix An incidence matrix is square or rectangle. Row and column names are node names. The item in row x and column y represents the flow between x and y. In the Sankey diagram we represent all flows that are over 0. Since the networkD3 library expects a connection data frame, we will fist convert the dataset, and then re-use the code from above. # Library library(networkD3) library(dplyr) # Create an incidence matrix. Usually the flow goes from the row names to the column names. # Remember that our connection are directed since we are working with a flow. set.seed(1) data &lt;- matrix(sample( seq(0,40), 49, replace=T ), 7, 7) data[data &lt; 35] &lt;- 0 colnames(data) = rownames(data) = c(&quot;group_A&quot;, &quot;group_B&quot;, &quot;group_C&quot;, &quot;group_D&quot;, &quot;group_E&quot;, &quot;group_F&quot;, &quot;group_G&quot;) # Transform it to connection data frame with tidyr from the tidyverse: links &lt;- data %&gt;% as.data.frame() %&gt;% rownames_to_column(var=&quot;source&quot;) %&gt;% gather(key=&quot;target&quot;, value=&quot;value&quot;, -1) %&gt;% filter(value != 0) # From these flows we need to create a node data frame: it lists every entities involved in the flow nodes &lt;- data.frame( name=c(as.character(links$source), as.character(links$target)) %&gt;% unique() ) # With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it. links$IDsource &lt;- match(links$source, nodes$name)-1 links$IDtarget &lt;- match(links$target, nodes$name)-1 # Make the Network p &lt;- sankeyNetwork(Links = links, Nodes = nodes, Source = &quot;IDsource&quot;, Target = &quot;IDtarget&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, sinksRight=FALSE) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/sankeyBasic2.html&quot;)) 8.5.3 Customize Colors in Sankey Diagram Sankey Diagram can be built in R using the networkD3 package. This section explains how to customioze the node colors used on the chart. This section follows the pgraph #321 that describes how to make an interactive Sankey diagram with the networkD3 library. Now that you know what kind of input allows to work with this library, you probably want to control the color of your nodes and connections. This is a bit tricky since you have to call it in Javascript, as described in the code below. 8.5.3.1 Custom Color of Individual Nodes The first step is to create a colour links Javascript object. For each node, attribute a color. Then call this object in the colourScale argument of networkD3. # Library library(networkD3) library(dplyr) # Make a connection data frame links &lt;- data.frame( source=c(&quot;group_A&quot;,&quot;group_A&quot;, &quot;group_B&quot;, &quot;group_C&quot;, &quot;group_C&quot;, &quot;group_E&quot;), target=c(&quot;group_C&quot;,&quot;group_D&quot;, &quot;group_E&quot;, &quot;group_F&quot;, &quot;group_G&quot;, &quot;group_H&quot;), value=c(2,3, 2, 3, 1, 3) ) # From these flows we need to create a node data frame: it lists every entities involved in the flow nodes &lt;- data.frame( name=c(as.character(links$source), as.character(links$target)) %&gt;% unique() ) # With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it. links$IDsource &lt;- match(links$source, nodes$name)-1 links$IDtarget &lt;- match(links$target, nodes$name)-1 # prepare color scale: I give one specific color for each node. my_color &lt;- &#39;d3.scaleOrdinal() .domain([&quot;group_A&quot;, &quot;group_B&quot;,&quot;group_C&quot;, &quot;group_D&quot;, &quot;group_E&quot;, &quot;group_F&quot;, &quot;group_G&quot;, &quot;group_H&quot;]) .range([&quot;blue&quot;, &quot;blue&quot; , &quot;blue&quot;, &quot;red&quot;, &quot;red&quot;, &quot;yellow&quot;, &quot;purple&quot;, &quot;purple&quot;])&#39; # Make the Network. I call my colour scale with the colourScale argument p &lt;- sankeyNetwork(Links = links, Nodes = nodes, Source = &quot;IDsource&quot;, Target = &quot;IDtarget&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, colourScale=my_color) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/flowHtml/sankeyColor1.html&quot;)) 8.5.4 Set Color for Groups of Nodes You can color nodes following their attribution to a group. Usually this information is stored in a column of the node data frame. You can use this information to create a JavaScript color attribution object and call it using the Nodegroup argument. # Add a &#39;group&#39; column to the nodes data frame: nodes$group &lt;- as.factor(c(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;)) # Give a color for each group: my_color &lt;- &#39;d3.scaleOrdinal() .domain([&quot;a&quot;, &quot;b&quot;]) .range([&quot;#69b3a2&quot;, &quot;steelblue&quot;])&#39; # Make the Network p &lt;- sankeyNetwork(Links = links, Nodes = nodes, Source = &quot;IDsource&quot;, Target = &quot;IDtarget&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, colourScale=my_color, NodeGroup=&quot;group&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/flowHtml/sankeyColor2.html&quot;)) 8.5.5 Set Color of Connections Following the same principle, you can control the color of each flows of your diagram: # Add a &#39;group&#39; column to each connection: links$group &lt;- as.factor(c(&quot;type_a&quot;,&quot;type_a&quot;,&quot;type_a&quot;,&quot;type_b&quot;,&quot;type_b&quot;,&quot;type_b&quot;)) # Add a &#39;group&#39; column to each node. Here I decide to put all of them in the same group to make them grey nodes$group &lt;- as.factor(c(&quot;my_unique_group&quot;)) # Give a color for each group: my_color &lt;- &#39;d3.scaleOrdinal() .domain([&quot;type_a&quot;, &quot;type_b&quot;, &quot;my_unique_group&quot;]) .range([&quot;#69b3a2&quot;, &quot;steelblue&quot;, &quot;grey&quot;])&#39; # Make the Network p &lt;- sankeyNetwork(Links = links, Nodes = nodes, Source = &quot;IDsource&quot;, Target = &quot;IDtarget&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, colourScale=my_color, LinkGroup=&quot;group&quot;, NodeGroup=&quot;group&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/HtmlWidget/sankeyColor3.html&quot;)) 8.5.6 Sankey Diagram Interactive 8.5.6.1 Definition A Sankey Diagram is a visualization technique that allows to display flows. Several entities (nodes) are represented by rectangles or text. Their links are represented with arrow or arcs that have a width proportional to the importance of the flow. Here is an example displaying the number of people migrating from one country (left) to another (right). Data used comes from this scientific publication. # Libraries library(tidyverse) library(viridis) library(patchwork) library(hrbrthemes) library(circlize) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyDirectedWeighted.csv&quot;, header=TRUE) # Package library(networkD3) # I need a long format data_long &lt;- data %&gt;% rownames_to_column %&gt;% gather(key = &#39;key&#39;, value = &#39;value&#39;, -rowname) %&gt;% filter(value &gt; 0) colnames(data_long) &lt;- c(&quot;source&quot;, &quot;target&quot;, &quot;value&quot;) data_long$target &lt;- paste(data_long$target, &quot; &quot;, sep=&quot;&quot;) # From these flows we need to create a node data frame: it lists every entities involved in the flow nodes &lt;- data.frame(name=c(as.character(data_long$source), as.character(data_long$target)) %&gt;% unique()) # With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it. data_long$IDsource=match(data_long$source, nodes$name)-1 data_long$IDtarget=match(data_long$target, nodes$name)-1 # prepare colour scale ColourScal =&#39;d3.scaleOrdinal() .range([&quot;#FDE725FF&quot;,&quot;#B4DE2CFF&quot;,&quot;#6DCD59FF&quot;,&quot;#35B779FF&quot;,&quot;#1F9E89FF&quot;,&quot;#26828EFF&quot;,&quot;#31688EFF&quot;,&quot;#3E4A89FF&quot;,&quot;#482878FF&quot;,&quot;#440154FF&quot;])&#39; # Make the Network sankeyNetwork(Links = data_long, Nodes = nodes, Source = &quot;IDsource&quot;, Target = &quot;IDtarget&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, sinksRight=FALSE, colourScale=ColourScal, nodeWidth=40, fontSize=13, nodePadding=20) 8.5.7 What For Sankey diagrams are used to show weighted networks, i.e. flows. It can happen with several data structure: Evolution: the nodes are duplicated in 2 or more groups that represent stages. Connections show the evolution between two states, like in the migration example above. This is more often visualized as a chord diagram. Source to end: consider a total amount, the diagram shows where it comes from and where it ends up, with possible intermediate steps. Each node is unique. (Example coming from the networkD3 package). # Load package library(networkD3) # Load energy projection data URL &lt;- &quot;https://cdn.rawgit.com/christophergandrud/networkD3/master/JSONdata/energy.json&quot; Energy &lt;- jsonlite::fromJSON(URL) # Now we have 2 data frames: a &#39;links&#39; data frame with 3 columns (from, to, value), and a &#39;nodes&#39; data frame that gives the name of each node. # Thus we can plot it sankeyNetwork(Links = Energy$links, Nodes = Energy$nodes, Source = &quot;source&quot;, Target = &quot;target&quot;, Value = &quot;value&quot;, NodeID = &quot;name&quot;, units = &quot;TWh&quot;, fontSize = 12, nodeWidth = 30) 8.5.8 Variation Sankey diagram are prone to many visual variations, even if the underlying idea remain the same. Here is an example showing metal recovery and recycling in Australia (source): "],
["general.html", "Chapter 9 General Knowledge 9.1 ggplot2 9.2 Data Art 9.3 Animation 9.4 3D Charts 9.5 Interactive Charts 9.6 Caveats", " Chapter 9 General Knowledge 9.1 ggplot2 ggplot2 is a R package dedicated to data visualization. It can greatly improve the quality and aesthetics of your graphics, and will make you much more efficient in creating them. ggplot2 allows to build almost any type of chart. The R graph gallery focuses on it so almost every section there starts with ggplot2 examples. This page is dedicated to general ggplot2 tips that you can apply to any chart, like customizing a title, adding annotation, or using faceting. If you’re new to ggplot2, a good starting point is probably this online course. 9.1.1 Add Text Labels with ggplot2 This document is dedicated to text annotation with ggplot2. It provides several examples with reproducible code showing how to use function like geom_label and geom_text. 9.1.1.1 Adding Text with geom_text() This example demonstrates how to use geom_text() to add text as markers. It works pretty much the same as geom_point(), but add text instead of circles. A few arguments must be provided: label: what text you want to display. nudge_x and nudge_y: shifts the text along X and Y axis. check_overlap tries to avoid text overlap. Note that a package called ggrepel extends this concept further. # library library(ggplot2) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # 1/ add text with geom_text, use nudge to nudge the text ggplot(data, aes(x=wt, y=mpg)) + geom_point() + # Show dots geom_text( label=rownames(data), nudge_x = 0.25, nudge_y = 0.25, check_overlap = T ) 9.1.2 Add Labels with geom_label() geom_label() works pretty much the same way as geom_text(). However, text is wrapped in a rectangle that you can customize (see next example). # library library(ggplot2) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # 1/ add text with geom_text, use nudge to nudge the text ggplot(data, aes(x=wt, y=mpg)) + geom_point() + # Show dots geom_label( label=rownames(data), nudge_x = 0.25, nudge_y = 0.25, check_overlap = T ) 9.1.3 Add One Text Label Only Of course, you don’t have to label all dots on the chart. You can also add a piece of text on a specific position. Since we’re here, note that you can custom the annotation of geom_label with label.padding, label.size, color and fill as described below: # library library(ggplot2) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # Add one annotation ggplot(data, aes(x=wt, y=mpg)) + geom_point() + # Show dots geom_label( label=&quot;Look at this!&quot;, x=4.1, y=20, label.padding = unit(0.55, &quot;lines&quot;), # Rectangle size around label label.size = 0.35, color = &quot;black&quot;, fill=&quot;#69b3a2&quot; ) 9.1.4 Add Labels for a Selection of Marker Last but not least, you can also select a group of marker and annotate them only. Here, only car with mpg &gt; 20 and wt &gt; 3 are annotated thanks to a data filtering in the geom_label() call. # library library(ggplot2) library(dplyr) library(tibble) # Keep 30 first rows in the mtcars natively available dataset data=head(mtcars, 30) # Change data rownames as a real column called &#39;carName&#39; data &lt;- data %&gt;% rownames_to_column(var=&quot;carName&quot;) # Plot ggplot(data, aes(x=wt, y=mpg)) + geom_point() + geom_label( data=data %&gt;% filter(mpg&gt;20 &amp; wt&gt;3), # Filter data first aes(label=carName) ) 9.1.5 How to Annotate a Plot in ggplot2 Once your chart is done, annotating it is a crucial step to make it more insightful. This section will guide you through the best practices using R and ggplot2. 9.1.6 Adding text with geom_text() or geom_label() Text is the most common kind of annotation. It allows to give more information on the most important part of the chart. Using ggplot2, 2 main functions are available for that kind of annotation: geom_text: to add a simple piece of text. geom_label: to add a label: framed text. Note that the annotate() function is a good alternative that can reduces the code length for simple cases. # library library(ggplot2) # basic graph p &lt;- ggplot(mtcars, aes(x = wt, y = mpg)) + geom_point() # a data frame with all the annotation info annotation &lt;- data.frame( x = c(2,4.5), y = c(20,25), label = c(&quot;label 1&quot;, &quot;label 2&quot;) ) # Add text p + geom_text(data=annotation, aes( x=x, y=y, label=label), color=&quot;orange&quot;, size=7 , angle=45, fontface=&quot;bold&quot; ) # Note: possible to shorten with annotate: # p + # annotate(&quot;text&quot;, x = c(2,4.5), y = c(20,25), # label = c(&quot;label 1&quot;, &quot;label 2&quot;) , color=&quot;orange&quot;, # size=7 , angle=45, fontface=&quot;bold&quot;) # Right chart: using labels p + geom_label(data=annotation, aes( x=x, y=y, label=label), color=&quot;orange&quot;, size=7 , angle=45, fontface=&quot;bold&quot; ) 9.1.7 Add Shapes with annotate() The annotate() function allows to add all kind of shape on a ggplot2 chart. The first argument will control what kind is used: rect or segment for rectangle, segment or arrow. # Add rectangles p + annotate(&quot;rect&quot;, xmin=c(2,4), xmax=c(3,5), ymin=c(20,10) , ymax=c(30,20), alpha=0.2, color=&quot;blue&quot;, fill=&quot;blue&quot;) # Add segments p + annotate(&quot;segment&quot;, x = 1, xend = 3, y = 25, yend = 15, colour = &quot;purple&quot;, size=3, alpha=0.6) # Add arrow p + annotate(&quot;segment&quot;, x = 2, xend = 4, y = 15, yend = 25, colour = &quot;pink&quot;, size=3, alpha=0.6, arrow=arrow()) 9.1.8 Add Ablines with geom_hline() and geom_vline() An abline is a segment that goes from one chart extremity to the other. ggplot2 offers the geom_hline() and geom_vline() functions that are dedicated to it. p + # horizontal geom_hline(yintercept=25, color=&quot;orange&quot;, size=1) + # vertical geom_vline(xintercept=3, color=&quot;orange&quot;, size=1) 9.1.9 Add a Point and a Range with pointrange() Last kind of annotation, add a dot and a segment directly with pointrange(). # Add point and range p + annotate(&quot;pointrange&quot;, x = 3.5, y = 20, ymin = 12, ymax = 28,colour = &quot;orange&quot;, size = 1.5, alpha=0.4) 9.1.10 Marginal Plot Marginal plots are not natively supported by ggplot2, but their realisation is straightforward thanks to theggExtra` library as illustrated in graph #277. 9.1.10.1 ggplot2 Scatterplot with Rug This section demonstrates how to build a scatterplot with rug with R and ggplot2. Adding rug gives insight about variable distribution and is especially helpful when markers overlap. 9.1.10.2 Adding Rug with geom_rug() A scatterplot displays the relationship between 2 numeric variables. You can easily add rug on X and Y axis thanks to the geom_rug() function to illustrate the distribution of dots. Note you can as well add marginal plots to show these distributions. # library library(ggplot2) # Iris dataset head(iris) # plot ggplot(data=iris, aes(x=Sepal.Length, Petal.Length)) + geom_point() + geom_rug(col=&quot;steelblue&quot;,alpha=0.1, size=1.5) 9.1.11 Marginal Distribution with ggplot2 and ggExtra This section explains how to add marginal distributions to the X and Y axis of a ggplot2 scatterplot. It can be done using histogram, boxplot or density plot using the ggExtra library. 9.1.11.1 Basic use of ggMarginal() Here are 3 examples of marginal distribution added on X and Y axis of a scatterplot. The ggExtra library makes it a breeze thanks to the ggMarginal() function. Three main types of distribution are available: histogram, density and boxplot. # library library(ggplot2) library(ggExtra) # The mtcars dataset is proposed in R head(mtcars) # classic plot : p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) + geom_point() + theme(legend.position=&quot;none&quot;) # with marginal histogram p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;) # marginal density p2 &lt;- ggMarginal(p, type=&quot;density&quot;) # marginal boxplot p3 &lt;- ggMarginal(p, type=&quot;boxplot&quot;) p1 p2 p3 9.1.12 More Customization Three additional examples to show possible customization: Change marginal plot size with size. Custom marginal plot appearance with all usual parameters. Show only one marginal plot with margins = 'x' or margins = 'y'. # library library(ggplot2) library(ggExtra) # The mtcars dataset is proposed in R head(mtcars) # classic plot : p &lt;- ggplot(mtcars, aes(x=wt, y=mpg, color=cyl, size=cyl)) + geom_point() + theme(legend.position=&quot;none&quot;) # Set relative size of marginal plots (main plot 10x bigger than marginals) p1 &lt;- ggMarginal(p, type=&quot;histogram&quot;, size=10) # Custom marginal plots: p2 &lt;- ggMarginal(p, type=&quot;histogram&quot;, fill = &quot;slateblue&quot;, xparams = list( bins=10)) # Show only marginal plot for x axis p3 &lt;- ggMarginal(p, margins = &#39;x&#39;, color=&quot;purple&quot;, size=4) p1 p2 p3 9.1.13 ggplot2 Chart Appearance The theme() function of ggplot2 allows to customize the chart appearance. It controls 3 main types of components: Axis: controls the title, label, line and ticks. Background: controls the background color and the major and minor grid lines. Legend: controls position, text, symbols and more. 9.1.13.1 Axis Manipulation with R and ggplot2 This section describes all the available options to customize chart axis with R and ggplot2. It shows how to control the axis itself, its label, title, position and more. 9.1.13.2 Default ggplot2 Axis Let’s start with a very basic ggplot2 scatterplot. The axis usually looks very good with default option as you can see here. Basically two main functions will allow to customize it: theme() to change the axis appearance. scale_x_ and scale_y_ to change the axis type. Let’s see how to use them # Load ggplot2 library(ggplot2) # Very basic chart basic &lt;- ggplot( mtcars , aes(x=mpg, y=wt)) + geom_point() basic 9.1.14 Set Axis Title and Limits with xlab() and xlim() Two basic options that are used in almost every charts are xlab() and xlim() to control the axis title and the axis limits respectively. Note: it’s possible to specify only the lower or upper bound of a limit. For instance, try xlim(0,NA) basic+ xlab(&quot;mpg value&quot;) + xlim(0,50) 9.1.15 Customize Axis Title Appearance: axis.title The theme() function allows to customize all parts of the ggplot2 chart. The axis.title. controls the axis title appearance. Since it is text, features are wrapped in a element_text() function. The code below shows how to change the most common features: basic + theme(axis.title = element_text( angle = 90, color=&quot;red&quot;, size=15, face=3)) # face = title location basic + theme(axis.title.x = element_text( angle = 90, color=&quot;red&quot;, size=15, face=3)) 9.1.16 Customize Axis Labels: axis.text Using pretty much the same process, the axis.text() function allows to control text label features. Once more, using axis.text.x() would modify the x axis only. basic + theme(axis.text = element_text( angle = 90, color=&quot;blue&quot;, size=15, face=3) ) 9.1.17 Customize Axis Ticks and Axis Line with axis.ticks() and axis.line() The axis.ticks() function controls the ticks appearance. axis.line() controles the axis line. Both of them are lines, so options are wrapped in a element_line() statement. linetype controls the type of line in use, see the ggplot2 section for more. # chart 1: ticks basic + theme( axis.ticks = element_line(size = 2, color=&quot;red&quot;) , axis.ticks.length = unit(.5, &quot;cm&quot;) ) # chart 2: axis lines basic + theme(axis.line = element_line(size = 3, colour = &quot;green&quot;, linetype=2)) # chart 3: combination ggplot( mtcars , aes(x=mpg, y=wt)) + geom_point() + theme( axis.title = element_text( color=&quot;red&quot;, size=15, face=2), axis.line = element_line(size = 3, colour = &quot;green&quot;, linetype=2), axis.text = element_text( angle = 90, color=&quot;blue&quot;, size=15, face=2) ) 9.1.18 Background Manipulation with R and ggplot2 This section describes all the available options to customize chart background with R and ggplot2. It shows how to control the background color and the minor and major gridlines. 9.1.18.1 Default ggplot2 Background Let’s start with a very basic ggplot2 scatterplot. By default, ggplot2 offers a grey background with white major and minor gridlines. It is possible to change that thanks to the theme() function. Keep reading to learn how! # Load ggplot2 library(ggplot2) # Very basic chart basic &lt;- ggplot( mtcars , aes(x=mpg, y=wt)) + geom_point() basic 9.1.19 Background Color: plot.background and panel.background Two options of the theme() functions are available to control the map background color. plot_background controls the color of the whole chart. panel.background controls the part between the axis. Both are rectangles, with features specified through an element_rect() function. basic + theme( plot.background = element_rect(fill = &quot;green&quot;), panel.background = element_rect(fill = &quot;red&quot;, colour=&quot;blue&quot;) ) 9.1.20 Customize the Grid: panel.grid.major and panel.grid.minor Two main types of grid exist with ggplot2: major and minor. They are controlled thanks to the panel.grid.major and panel.grid.minor options. Once more, you can add the options .y or .x at the end of the function name to control one orientation only. Features are wrapped in an element_line() function. Specifying element_blanck() will simply removing the grid. # Modify for both axis basic + theme( panel.grid.major = element_line(colour = &quot;red&quot;, linetype = &quot;dotted&quot;), panel.grid.minor = element_line(colour = &quot;blue&quot;, size = 2) ) # Modify y axis only (remove) basic + theme( panel.grid.major.y = element_blank(), panel.grid.minor.y = element_blank() ) 9.1.21 Building a Nice Legend with R and ggplot2 This section describes all the available options to customize the chart legend with R and ggplot2. It shows how to control the title, text, location, symbols and more. 9.1.21.1 Default Legend with ggplot2 By default, ggplot2 will automatically build a legend on your chart as soon as a shape feature is mapped to a variable in aes() part of the ggplot() call. So if you use color, shape or alpha, a legend will be available. Here is an example based on the mtcars dataset. This section is gonna show how to use the theme() function to apply all type of customization on this default legend. Note: this post is strongly inspired by the doc you get typing ggplot2::theme, give it a go! # Load ggplot2 library(ggplot2) # Very basic chart basic &lt;- ggplot(mtcars, aes(wt, mpg, colour = factor(cyl), shape = factor(vs) )) + geom_point() basic 9.1.22 Change Legend Title with labs() The labs() function allows to change the legend titles. You can specify one title per section of the legend, i.e. per aesthetics in use in the chart. basic+ labs( colour = &quot;name1&quot;, shape = &quot;name2&quot; ) 9.1.23 Get Rid of the Legend: guides() and theme() It is possible to remove a specific part or the whole legend thanks to the theme() and the guides() function. See code below: # Left -&gt; get rid of one part of the legend basic + guides(shape=FALSE) # Right -&gt; only the x axis is modified basic + theme(legend.position = &quot;none&quot;) 9.1.24 Control Legend Position with legend.position You can place the legend literally anywhere. To put it around the chart, use the legend.position option and specify top, right, bottom, or left. To put it inside the plot area, specify a vector of length 2, both values going between 0 and 1 and giving the x and y coordinates. Note: the command legend.justification sets the corner that the position refers to. # Left -&gt; legend around the plot basic + theme(legend.position = &quot;bottom&quot;) # Right -&gt; inside the plot area basic + theme( legend.position = c(.95, .95), legend.justification = c(&quot;right&quot;, &quot;top&quot;), legend.box.just = &quot;right&quot;, legend.margin = margin(6, 6, 6, 6) ) 9.1.25 Legend Appearance Here are 4 examples showing how to customize the legend main features: Box with legend.box.: it is a rectangle that frames the legend. Give features with element_rect(). Key with legend.key: the key is the part showing the symbols. Note that symbols will automatically be the ones used on the chart. Text with legend.text: here you can control the color, the size of the right part of the legend. Title with legend.title. # custom box around legend basic + theme( legend.box.background = element_rect(color=&quot;red&quot;, size=2), legend.box.margin = margin(116, 6, 6, 6) ) # custom the key basic + theme(legend.key = element_rect(fill = &quot;white&quot;, colour = &quot;black&quot;)) # custom the text basic + theme(legend.text = element_text(size = 8, colour = &quot;red&quot;)) # custom the title basic + theme(legend.title = element_text(face = &quot;bold&quot;)) 9.1.26 Reorder a Variable with ggplot2 This section describes how to reorder a variable in a ggplot2 chart. Several methods are suggested, always providing examples with reproducible code chunks. Reordering groups in a ggplot2 chart can be a struggle. This is due to the fact that ggplot2 takes into account the order of the factor levels, not the order you observe in your data frame. You can sort your input data frame with sort() or arrange(), it will never have any impact on your ggplot2 output. This post explains how to reorder the level of your factor through several examples. Examples are based on 2 dummy datasets: # Library library(ggplot2) library(dplyr) # Dataset 1: one value per group data &lt;- data.frame( name=c(&quot;north&quot;,&quot;south&quot;,&quot;south-east&quot;,&quot;north-west&quot;,&quot;south-west&quot;,&quot;north-east&quot;,&quot;west&quot;,&quot;east&quot;), val=sample(seq(1,10), 8 ) ) # Dataset 2: several values per group (natively provided in R) # mpg 9.1.27 Method 1: the Forecats library The Forecats library is a library from the tidyverse especially made to handle factors in R. It provides a suite of useful tools that solve common problems with factors. The fact_reorder() function allows to reorder the factor (data$name for example) following the value of another column (data$val here). # load the library library(forcats) # Reorder following the value of another column: data %&gt;% mutate(name = fct_reorder(name, val)) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#f68060&quot;, alpha=.6, width=.4) + coord_flip() + xlab(&quot;&quot;) + theme_bw() # Reverse side data %&gt;% mutate(name = fct_reorder(name, desc(val))) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;#f68060&quot;, alpha=.6, width=.4) + coord_flip() + xlab(&quot;&quot;) + theme_bw() If you have several values per level of your factor, you can specify which function to apply to determine the order. The default is to use the median, but you can use the number of data points per group to make the classification: # Using median mpg %&gt;% mutate(class = fct_reorder(class, hwy, .fun=&#39;median&#39;)) %&gt;% ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) + geom_boxplot() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) # Using number of observation per group mpg %&gt;% mutate(class = fct_reorder(class, hwy, .fun=&#39;length&#39; )) %&gt;% ggplot( aes(x=class, y=hwy, fill=class)) + geom_boxplot() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) + xlab(&quot;&quot;) The last common operation is to provide a specific order to your levels, you can do so using the fct_relevel() function as follow: # Reorder following a precise order p &lt;- data %&gt;% mutate(name = fct_relevel(name, &quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;)) %&gt;% ggplot( aes(x=name, y=val)) + geom_bar(stat=&quot;identity&quot;) + xlab(&quot;&quot;) #p 9.1.28 Method 2: Using dplyr Only The mutate() function of dplyr allows to create a new variable or modify an existing one. It is possible to use it to recreate a factor with a specific order. Here are 2 examples: The first use arrange() to sort your data frame, and reorder the factor following this desired order. The second specifies a custom order for the factor giving the levels one by one. data %&gt;% arrange(val) %&gt;% # First sort by val. This sort the dataframe but NOT the factor levels mutate(name=factor(name, levels=name)) %&gt;% # This trick update the factor levels ggplot( aes(x=name, y=val)) + geom_segment( aes(xend=name, yend=0)) + geom_point( size=4, color=&quot;orange&quot;) + coord_flip() + theme_bw() + xlab(&quot;&quot;) data %&gt;% arrange(val) %&gt;% mutate(name = factor(name, levels=c(&quot;north&quot;, &quot;north-east&quot;, &quot;east&quot;, &quot;south-east&quot;, &quot;south&quot;, &quot;south-west&quot;, &quot;west&quot;, &quot;north-west&quot;))) %&gt;% ggplot( aes(x=name, y=val)) + geom_segment( aes(xend=name, yend=0)) + geom_point( size=4, color=&quot;orange&quot;) + theme_bw() + xlab(&quot;&quot;) 9.1.29 Method 3: the reorder() function of Base R In case your an unconditional user of the good old R, here is how to control the order using the reorder() function inside a with() call: # reorder is close to order, but is made to change the order of the factor levels. mpg$class = with(mpg, reorder(class, hwy, median)) p &lt;- mpg %&gt;% ggplot( aes(x=class, y=hwy, fill=class)) + geom_violin() + xlab(&quot;class&quot;) + theme(legend.position=&quot;none&quot;) + xlab(&quot;&quot;) #p 9.1.30 ggplot2 Title The ggtitle() function allows to add a title to the chart. The following post will guide you through its usage, showing how to control title main features: position, font, color, text and more. 9.1.30.1 Title Manipulation with R and ggplot2 This section describes all the available options to customize the chart title with R and ggplot2. It shows how to control its color, its position, and more. 9.1.30.2 Default ggplot2 Title It is possible to add a title to a ggplot2 chart using the ggtitle() function. It works as follow: # library &amp; data library(ggplot2) data &lt;- data.frame(x=rnorm(100)) # Basic plot with title ggplot( data=data, aes(x=x)) + geom_histogram(fill=&quot;skyblue&quot;, alpha=0.5) + ggtitle(&quot;A blue Histogram&quot;) + theme_minimal() 9.1.31 Title on Several Lines It is a common need to set the title on several lines. To add a break and skip to a second line, just add a \\n in the text. # title on several lines ggplot( data=data, aes(x=x)) + geom_histogram(fill=&quot;skyblue&quot;, alpha=0.5) + ggtitle(&quot;A blue \\nHistogram&quot;) + theme_minimal() 9.1.32 Title Appearance and Position Here are 2 tricks to control text appearance and its position. Both features are controlled thanks to the plot.title argument of the theme() function. Appearance can be controlled with option such as family, size or color, when position is controlled with hjust and vjust. # Custom title appearance ggplot( data=data, aes(x=x)) + geom_histogram(fill=&quot;skyblue&quot;, alpha=0.5) + ggtitle(&quot;A blue Histogram&quot;) + theme_minimal() + theme( plot.title=element_text(family=&#39;&#39;, face=&#39;bold&#39;, colour=&#39;purple&#39;, size=26) ) # Adjust the position of title ggplot( data=data, aes(x=x)) + geom_histogram(fill=&quot;skyblue&quot;, alpha=0.8) + ggtitle(&quot;With title on the right&quot;) + theme_minimal() + theme( plot.title=element_text( hjust=1, vjust=0.5, face=&#39;bold&#39;) ) 9.1.33 Customize a Specific Word Only If you want to highlight a specific set of words in the title, it is double thanks to the expression() function. # Custom a few word of the title only: my_title &lt;- expression(paste(&quot;A &quot;, italic(bold(&quot;blue&quot;)), &quot; histogram&quot;)) ggplot( data=data, aes(x=x)) + geom_histogram(fill=&quot;skyblue&quot;, alpha=0.8) + ggtitle(my_title) + theme_minimal() 9.1.34 Small Multiples: facet_wrap() and facet_grid() Small multiples is a very powerful dataviz technique. It split the chart window in many small similar charts: each represents a specific group of a categorical variable. The following post describes the main use cases using facet_wrap() and facet_grid() and should get you started quickly. 9.1.35 Faceting with ggplot2 This section describes all the available options to use small multiples with R and ggplot2. it shows how to efficiently split the chart window by row, column or both to show every group of the dataset separately. 9.1.35.1 What is Small Multiple Faceting is the process that split the chart window in several small parts (a grid), and display a similar chart in each section. Each section usually shows the same graph for a specific group of the dataset. The result is usually called small multiple. It is a very powerful technique in data visualization, and a major advantage of using ggplot2 is that it offers functions allowing to build it in a single line of code. Here is an example showing the evolution of a few baby names in the US. (source) # Libraries library(tidyverse) library(hrbrthemes) library(babynames) library(viridis) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Load dataset from github don &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Amanda&quot;, &quot;Mary&quot;, &quot;Deborah&quot;, &quot;Dorothy&quot;, &quot;Betty&quot;, &quot;Helen&quot;, &quot;Jennifer&quot;, &quot;Shirley&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot don %&gt;% ggplot( aes(x=year, y=n, group=name, fill=name)) + geom_area() + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0, &quot;lines&quot;), strip.text.x = element_text(size = 8), plot.title = element_text(size=13) ) + facet_wrap(~name, scale=&quot;free_y&quot;) 9.1.36 Faceting with facet_wrap() facet_wrap() is the most common function for faceting with ggplot2. It builds a new chart for each level of a categorical variable. You can add the charts horizontally (graph1) or vertically (graph2, using dir=\"v\"). Note that if the number of group is big enough, ggplot2 will automatically display charts on several rows/columns. The grey bar showing the related level can be placed on top or on the bottom thanks to the strip.position option (graph3). Last but not least, you can choose whether every graph have the same scale or not with the scales option (graph4). # library &amp; datset library(ggplot2) head(mtcars) # Split by columns (default) ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl) )) + geom_point(size=3) + facet_wrap(~cyl) + theme(legend.position=&quot;none&quot;) # Split by row ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl) )) + geom_point(size=3) + facet_wrap(~cyl , dir=&quot;v&quot;) + theme(legend.position=&quot;none&quot;) # Add label at the bottom ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl) )) + geom_point(size=3) + facet_wrap(~cyl , strip.position=&quot;bottom&quot;) + theme(legend.position=&quot;none&quot;) # Use same scales for all ggplot( mtcars , aes(x=mpg, y=wt, color=as.factor(cyl) )) + geom_point(size=3) + facet_wrap(~cyl , scales=&quot;free&quot; ) + theme(legend.position=&quot;none&quot;) 9.1.37 facet_grid() facet_grid() is the second function allowing to build small multiples with ggplot2. It allows to build one chart for each combinations of 2 categorical variables. One variable will be used for rows, the other for columns. The two variables must be given around a ~, the first being displayed as row, the second as column. The facet-grid() function also accepts the scales argument described above. # Faceted ggplot2 using facet_grid(): ggplot( mtcars , aes(x=mpg, y=wt )) + geom_point() + facet_grid( cyl ~ gear) 9.1.38 Customize Small Multiple Appearance with ggplot2 ggplot2 makes it a breeze to build small multiples. This post shows how to customize the layout, notably using the strip options This section aims to provide useful R code to customize the strips of a ggplot2 plots when using faceting. For other ggplot2 customization, visit the dedicated page. Here we want to modify non-data components, which is often done trough the theme() command. This page is strongly inspired from the help page of ggplot2 (?theme). Also, do not hesitate to visit the very strong ggplot2 documentation for more information. Chart 1 is a really basic plot relying on the mtcars dataset. The 3 following charts show how to customize strip background, text, and how to modify the space between sections. library(ggplot2) # basic chart basic=ggplot(mtcars, aes(wt, mpg)) + geom_point() + facet_wrap(~ cyl) basic # Change background basic + theme(strip.background = element_rect(colour = &quot;red&quot;, fill = alpha(&quot;blue&quot;,0.2) )) # Change the text basic + theme(strip.text.x = element_text(colour = &quot;red&quot;, face = &quot;bold&quot;, size=10, angle=30)) # Change the space between parts: basic + theme(panel.spacing = unit(4, &quot;lines&quot;)) 9.1.39 Multiple ggplot2 Charts on a Single Page This section shows how to use the gridExtra library to combine several ggplot2 charts on the same figure. Several examples are provided, illustrating several ways to split the graphing window. Mixing multiple graphs on the same page is a common practice. It allows to summarize a lot of information on the same figure, and is for instance widely used for scientific publication. The gridExtra package makes it a breeze. It offers the grid.arrange() function that does exactly that. Its nrow argument allows to specify how to arrange the layout. For more complex layout, the arrangeGrob() functions allows to do some nesting. Here are 4 examples to illustrate how gridExtra works: # libraries library(ggplot2) library(gridExtra) # Make 3 simple graphics: g1 &lt;- ggplot(mtcars, aes(x=qsec)) + geom_density(fill=&quot;slateblue&quot;) g2 &lt;- ggplot(mtcars, aes(x=drat, y=qsec, color=cyl)) + geom_point(size=5) + theme(legend.position=&quot;none&quot;) g3 &lt;- ggplot(mtcars, aes(x=factor(cyl), y=qsec, fill=cyl)) + geom_boxplot() + theme(legend.position=&quot;none&quot;) g4 &lt;- ggplot(mtcars , aes(x=factor(cyl), fill=factor(cyl))) + geom_bar() # Plots grid.arrange(g2, arrangeGrob(g3, g4, ncol=2), nrow = 2) grid.arrange(g1, g2, g3, nrow = 3) grid.arrange(g2, arrangeGrob(g3, g4, ncol=2), nrow = 1) grid.arrange(g2, arrangeGrob(g3, g4, nrow=2), nrow = 1) 9.1.40 Plotly: Turn your ggplot Interactive Another awesome feature of ggplot2 is its link with the plotly library. If you know how to make a ggplot2 chart, you are 10 seconds away to rendering an interactive version. Just call the ggplotly() function, and you’re done. Visit the interactive graphic section of the gallery for more. library(ggplot2) library(plotly) library(gapminder) p &lt;- gapminder %&gt;% filter(year==1977) %&gt;% ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() + theme_bw() ggplotly(p) 9.1.41 An Overview of ggplot2 Possibilities Each section of the gallery provides several examples implemented with ggplot2. Here is an overview of my favorite examples: 9.1.41.1 Violin Plot with included Boxplot and Sample Size in ggplot2 It can be handy to include a boxplot in the violin plot to see both the distribution of the data and its summary statistics. Moreover, adding sample size of each group on the X axis is often a necessary step. Here is how to do it with R and ggplot2. Building a violin plot with ggplot2 is pretty straightforward thanks to the dedicated geom_violin() function. It is possible to use geom_boxplot() with a small width in addition to display a boxplot that provides summary statistics. Moreover, note a small trick that allows to provide sample size of each group on the X axis: a new column called myaxis is created and is then used for the X axis. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) library(viridis) # create a dataset data &lt;- data.frame( name=c( rep(&quot;A&quot;,500), rep(&quot;B&quot;,500), rep(&quot;B&quot;,500), rep(&quot;C&quot;,20), rep(&#39;D&#39;, 100) ), value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) ) # sample size sample_size = data %&gt;% group_by(name) %&gt;% summarize(num=n()) # Plot data %&gt;% left_join(sample_size) %&gt;% mutate(myaxis = paste0(name, &quot;\\n&quot;, &quot;n=&quot;, num)) %&gt;% ggplot( aes(x=myaxis, y=value, fill=name)) + geom_violin(width=1.4) + geom_boxplot(width=0.1, color=&quot;grey&quot;, alpha=0.2) + scale_fill_viridis(discrete = TRUE) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;A Violin wrapping a boxplot&quot;) + xlab(&quot;&quot;) 9.1.42 Boxplot with Individual Data Points A boxplot summarizes the distribution of a continuous variable. it is often criticized for hiding the underlying distribution of each group. Thus, showing individual observation using jitter on top of boxes is a good practice. This post explains how to do so using ggplot2. If you’re not convinced about that danger of using basic boxplot, please read this post that explains it in depth. Fortunately, ggplot2 makes it a breeze to add invdividual observation on top of boxes thanks to the geom_jitter() function. This function shifts all dots by a random value ranging from 0 to size, avoiding overlaps. Now, do you see the bimodal distribution hidden behind group B? # Libraries library(tidyverse) library(hrbrthemes) library(viridis) # create a dataset data &lt;- data.frame( name=c( rep(&quot;A&quot;,500), rep(&quot;B&quot;,500), rep(&quot;B&quot;,500), rep(&quot;C&quot;,20), rep(&#39;D&#39;, 100) ), value=c( rnorm(500, 10, 5), rnorm(500, 13, 1), rnorm(500, 18, 1), rnorm(20, 25, 4), rnorm(100, 12, 1) ) ) # Plot data %&gt;% ggplot( aes(x=name, y=value, fill=name)) + geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha=0.6) + geom_jitter(color=&quot;black&quot;, size=0.4, alpha=0.9) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;A boxplot with jitter&quot;) + xlab(&quot;&quot;) In case you’re not convinced, here is how the basic boxplot and the basic violin plot look like: # Boxplot basic data %&gt;% ggplot( aes(x=name, y=value, fill=name)) + geom_boxplot() + scale_fill_viridis(discrete = TRUE, alpha=0.6, option=&quot;A&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;Basic boxplot&quot;) + xlab(&quot;&quot;) # Violin basic data %&gt;% ggplot( aes(x=name, y=value, fill=name)) + geom_violin() + scale_fill_viridis(discrete = TRUE, alpha=0.6, option=&quot;A&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, plot.title = element_text(size=11) ) + ggtitle(&quot;Violin chart&quot;) + xlab(&quot;&quot;) 9.1.43 Map a Variable to Marker Feature in ggplot2 Scatterplot ggplot2 allows to easily map a variable to marker features of a scatterplot. This post explaines how it works through several examples, with explanation and code. 9.1.44 Basic Example Here is the magick of ggplot2: the ability to map a variable to marker features. Here, the marker color depends on its value in the field called Species in the input data frame. Note that the legend is built automatically. # load ggplot2 library(ggplot2) library(hrbrthemes) # mtcars dataset is natively available in R # head(mtcars) # A basic scatterplot with color depending on Species ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, color=Species)) + geom_point(size=6) + theme_ipsum() 9.1.45 Works with any Aesthetics You can map variables to any marker features. For instance, specie is represent below using transparency (left), shape (middle) and size (right). # load ggplot2 library(ggplot2) library(hrbrthemes) # Transparency ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, alpha=Species)) + geom_point(size=6, color=&quot;#69b3a2&quot;) + theme_ipsum() # Shape ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + geom_point(size=6) + theme_ipsum() # Size ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species)) + geom_point(size=6) + theme_ipsum() 9.1.46 Mapping to Several Features Last but not least, note that you can map one or several variables to one or several features. Here, shape, transparency, size and color all depends on the marker Species value. # load ggplot2 library(ggplot2) library(hrbrthemes) # A basic scatterplot with color depending on Species ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, shape=Species, alpha=Species, size=Species, color=Species)) + geom_point() + theme_ipsum() 9.1.47 Bubble Plot with ggplot2 This section explains how to build a bubble chart with R and ggplot2. It provides several reproducible examples with explanation and R code. 9.1.47.1 Most Basic Bubble Chart with geom_point() A bubble plot is a scatterplot where a third dimension is added: the value of an additional numeric variable is represented through the size of the dots. (source: data-to-viz). With ggplot2, bubble chart are built thanks to the geom_point() function. At least three variable must be provided to aes(): x, y and size. The legend will automatically be built by ggplot2. Here, the relationship between life expectancy (y) and gdp per capita (x) of world countries is represented. The population of each country is represented through circle size. # Libraries library(ggplot2) library(dplyr) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot ggplot(data, aes(x=gdpPercap, y=lifeExp, size = pop)) + geom_point(alpha=0.7) 9.1.48 Control Circle Size with scale_size() The first thing we need to improve on the previous chart is the bubble size. scale_size() allows to set the size of the smallest and the biggest circles using the range argument. Note that you can customize the legend name with name. Note: Circles often overlap. To avoid having big circles on top of the chart you have to reorder your dataset first, as in the code below. ToDo: Give more details about how to map a numeric variable to circle size. Use of scale_radius, scale_size and scale_size_area. See this post. # Libraries library(ggplot2) library(dplyr) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot data %&gt;% arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% ggplot(aes(x=gdpPercap, y=lifeExp, size = pop)) + geom_point(alpha=0.5) + scale_size(range = c(.1, 24), name=&quot;Population (M)&quot;) 9.1.49 Add a Fourth Dimension: Color If you have one more variable in your dataset, why not showing it using circle color? Here, the continent of each country is used to control circle color: # Libraries library(ggplot2) library(dplyr) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot data %&gt;% arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, color=continent)) + geom_point(alpha=0.5) + scale_size(range = c(.1, 24), name=&quot;Population (M)&quot;) 9.1.50 Make it Pretty A few classic improvement: Use of the viridis package for nice color palette. Use of theme_ipsum() of the hrbrthemes package. Custom axis titles with xlab and ylab. Add stroke to circle: Change shape to 21 and specify color (stroke) and fill. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) library(viridis) # The dataset is provided in the gapminder library library(gapminder) data &lt;- gapminder %&gt;% filter(year==&quot;2007&quot;) %&gt;% dplyr::select(-year) # Most basic bubble plot data %&gt;% arrange(desc(pop)) %&gt;% mutate(country = factor(country, country)) %&gt;% ggplot(aes(x=gdpPercap, y=lifeExp, size=pop, fill=continent)) + geom_point(alpha=0.5, shape=21, color=&quot;black&quot;) + scale_size(range = c(.1, 24), name=&quot;Population (M)&quot;) + scale_fill_viridis(discrete=TRUE, guide=FALSE, option=&quot;A&quot;) + theme_ipsum() + theme(legend.position=&quot;bottom&quot;) + ylab(&quot;Life Expectancy&quot;) + xlab(&quot;Gdp per Capita&quot;) + theme(legend.position = &quot;none&quot;) 9.1.51 Connected Scatterplot with R and ggplot2 This section explains how to build a basic connected scatterplot with R and ggplot2. It provides several reproducible examples with explanation and R code. 9.1.51.1 Most Basic Connected Scatterplot: geom_point() and geom_line() A connected scatterplot is basically a hybrid between a scatterplot and a line plot. Thus, you just have to add a geom_point() on top of the geom_line() to build it. # Libraries library(ggplot2) library(dplyr) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Plot data %&gt;% tail(10) %&gt;% ggplot( aes(x=date, y=value)) + geom_line() + geom_point() 9.1.52 Customize the Connected Scatterplot Custom the general theme with the theme_ipsum() function of the hrbrthemes package. Add a title with ggtitle(). Custom circle and line with arguments like shape, size, color and more. # Libraries library(ggplot2) library(dplyr) library(hrbrthemes) # Load dataset from github data &lt;- read.table(&quot;https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered.csv&quot;, header=T) data$date &lt;- as.Date(data$date) # Plot data %&gt;% tail(10) %&gt;% ggplot( aes(x=date, y=value)) + geom_line( color=&quot;grey&quot;) + geom_point(shape=21, color=&quot;black&quot;, fill=&quot;#69b3a2&quot;, size=6) + theme_ipsum() + ggtitle(&quot;Evolution of bitcoin price&quot;) 9.1.53 Connected Scatterplot to Show an Evolution The connected scatterplot can also be a powerfull technique to tell a story about the evolution of 2 variables. Let’s consider a dataset composed of 3 columns: Year Number of baby born called Amanda this year Number of baby born called Ashley The scatterplot beside allows to understand the evolution of these 2 names. Note that the code is pretty different in this case. geom_segment() is used of geom_line(). This is because geom_line() automatically sort data points depending on their X position to link them. # Libraries library(ggplot2) library(dplyr) library(babynames) library(ggrepel) library(tidyr) # data data &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Amanda&quot;)) %&gt;% filter(sex==&quot;F&quot;) %&gt;% filter(year&gt;1970) %&gt;% select(year, name, n) %&gt;% spread(key = name, value=n, -1) # plot data %&gt;% ggplot(aes(x=Amanda, y=Ashley, label=year)) + geom_point() + geom_segment(aes( xend=c(tail(Amanda, n=-1), NA), yend=c(tail(Ashley, n=-1), NA) ) ) It makes sense to add arrows and labels to guide the reader in the chart: # Libraries library(ggplot2) library(dplyr) library(babynames) library(ggrepel) library(tidyr) # data data &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Amanda&quot;)) %&gt;% filter(sex==&quot;F&quot;) %&gt;% filter(year&gt;1970) %&gt;% select(year, name, n) %&gt;% spread(key = name, value=n, -1) # Select a few date to label the chart tmp_date &lt;- data %&gt;% sample_frac(0.3) # plot data %&gt;% ggplot(aes(x=Amanda, y=Ashley, label=year)) + geom_point(color=&quot;#69b3a2&quot;) + geom_text_repel(data=tmp_date) + geom_segment(color=&quot;#69b3a2&quot;, aes( xend=c(tail(Amanda, n=-1), NA), yend=c(tail(Ashley, n=-1), NA) ), arrow=arrow(length=unit(0.3,&quot;cm&quot;)) ) + theme_ipsum() 9.1.54 Parallel Coordinates Chart with ggally ggally is a ggplot2 extension. It allows to build parallel coordinates charts thanks to the ggparcoord() function. Check several reproducible examples in this post. 9.1.54.1 Most Basic This is the most basic parallel coordinates chart you can build with R, the ggally packages and its ggparcoord() function. The input dataset must be a data frame with several numeric variables, each being used as a vertical axis on the chart. Columns number of these variables are specified in the columns argument of the function. Note: here, a categoric variable is used to color lines, as specified in the groupColumn variable. # Libraries library(GGally) # Data set is provided by R natively data &lt;- iris # Plot ggparcoord(data, columns = 1:4, groupColumn = 5 ) 9.1.55 Custom Color, Theme, General Appearance This is pretty much the same chart as te previous one, except for the following customizations: Color palette is improved thanks to the viridis package. Title is added with title, and customized in theme. Dots are added with showPoints. A bit of transparency is applied to lines with alphaLines. theme_ipsum() is used for the general appearance. # Libraries library(hrbrthemes) library(GGally) library(viridis) # Data set is provided by R natively data &lt;- iris # Plot ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, showPoints = TRUE, title = &quot;Parallel Coordinate Plot for the Iris Data&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( plot.title = element_text(size=10) ) 9.1.56 Scaling Scaling transforms the raw data to a new scale that is common with other variables. It is a crucial step to compare variables that do not have the same unit, but can also help otherwise as shown in the example below. The ggally package offers a scale argument. Four possible options are applied on the same dataset below: globalminmax - No scaling. uniminmax - Standardize to Min = 0 and Max = 1. std - Normalize univariately (substract mean &amp; divide by sd). center - Standardize and center variables. ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;globalminmax&quot;, showPoints = TRUE, title = &quot;No scaling&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;uniminmax&quot;, showPoints = TRUE, title = &quot;Standardize to Min = 0 and Max = 1&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;std&quot;, showPoints = TRUE, title = &quot;Normalize univariately (substract mean &amp; divide by sd)&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) ggparcoord(data, columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, scale=&quot;center&quot;, showPoints = TRUE, title = &quot;Standardize and center variables&quot;, alphaLines = 0.3 ) + scale_color_viridis(discrete=TRUE) + theme_ipsum()+ theme( legend.position=&quot;none&quot;, plot.title = element_text(size=13) ) + xlab(&quot;&quot;) 9.1.57 Highlight a Group Data visualization aims to highlight a story in the data. If you are interested in a specific group, you can highlight it as follow: # Libraries library(GGally) library(dplyr) # Data set is provided by R natively data &lt;- iris # Plot data %&gt;% arrange(desc(Species)) %&gt;% ggparcoord( columns = 1:4, groupColumn = 5, order = &quot;anyClass&quot;, showPoints = TRUE, title = &quot;Original&quot;, alphaLines = 1 ) + scale_color_manual(values=c( &quot;#69b3a2&quot;, &quot;#E8E8E8&quot;, &quot;#E8E8E8&quot;) ) + theme_ipsum()+ theme( legend.position=&quot;Default&quot;, plot.title = element_text(size=10) ) + xlab(&quot;&quot;) 9.1.58 Lollipop Chart with Conditional Color If your lollipop plot goes on both side of an interesting threshold, you probably want to change the color of its components conditionally. Here is how using R and ggplot2. 9.1.59 Marker Here is the process to use conditional color on your ggplot2 chart: Add a new column to your dataframe specifying if you are over or under the threshold (use an ifelse statement). Give this column to the color aesthetic. # library library(ggplot2) library(dplyr) # Create data (this takes more sense with a numerical X axis) x &lt;- seq(0, 2*pi, length.out=100) data &lt;- data.frame( x=x, y=sin(x) + rnorm(100, sd=0.2) ) # Add a column with your condition for the color data &lt;- data %&gt;% mutate(mycolor = ifelse(y&gt;0, &quot;type1&quot;, &quot;type2&quot;)) # plot ggplot(data, aes(x=x, y=y)) + geom_segment( aes(x=x, xend=x, y=0, yend=y, color=mycolor), size=1.3, alpha=0.9) + theme_light() + theme( legend.position = &quot;none&quot;, panel.border = element_blank(), ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) 9.1.60 Lollipop Chart with 2 Groups A lollipop chart can be used to compare 2 categories, linking them with a segment to stress out their difference. This post explains how to do it with R and ggplot2. Lollipop plots can be very appropriate when it comes to compare 2 values for several entities. For each entity, one point is drawn for each variable, with a different color. Their difference is then highlighted using a segment. This type of visualisation is also called Cleveland dot plots. As usual, it is advised to order your individuals by mean, median, or group difference to give even more insight to the figure. # Library library(ggplot2) library(dplyr) library(hrbrthemes) # Create data value1 &lt;- abs(rnorm(26))*2 data &lt;- data.frame( x=LETTERS[1:26], value1=value1, value2=value1+1+rnorm(26, sd=1) ) # Reorder data using average? Learn more about reordering in chart #267 data &lt;- data %&gt;% rowwise() %&gt;% mutate( mymean = mean(c(value1,value2) )) %&gt;% arrange(mymean) %&gt;% mutate(x=factor(x, x)) # Plot ggplot(data) + geom_segment( aes(x=x, xend=x, y=value1, yend=value2), color=&quot;grey&quot;) + geom_point( aes(x=x, y=value1), color=rgb(0.2,0.7,0.1,0.5), size=3 ) + geom_point( aes(x=x, y=value2), color=rgb(0.7,0.2,0.1,0.5), size=3 ) + coord_flip()+ theme_ipsum() + theme( legend.position = &quot;none&quot;, ) + xlab(&quot;&quot;) + ylab(&quot;Value of Y&quot;) 9.1.61 Circular Barplot with Groups This section explains how to build a circular barchart with groups. A gap is added between groups to highlight them. Bars are labeled, group names are annotated 9.1.62 Add a Gap in the Circle A circular barplot is a barplot where bars are displayed along a circle instead of a line. This page aims to teach you how to make a circular barplot with groups. Since this kind of chart is a bit tricky, I strongly advise to understand graph #295 and #296 that will teach you the basics. The first step is to build a circular barplot with a break in the circle. Actually, I just added a few empty lines at the end of the initial data frame: # library library(tidyverse) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; empty_bar &lt;- 10 # Add lines to the initial dataset to_add &lt;- matrix(NA, empty_bar, ncol(data)) colnames(to_add) &lt;- colnames(data) data &lt;- rbind(data, to_add) data$id &lt;- seq(1, nrow(data)) # Get the name and the y position of each label label_data &lt;- data number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(stat=&quot;identity&quot;, fill=alpha(&quot;green&quot;, 0.3)) + ylim(-100,120) + theme_minimal() + theme( axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar(start = 0) + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 9.1.63 Space between Groups This concept can now be used to add space between each group of the dataset. I add n lines with only NA at the bottom of each group. This chart is far more insightful since it allows one to quickly compare the different groups, and to compare the value of items within each group. # library library(tidyverse) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar &lt;- 4 to_add &lt;- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) ) colnames(to_add) &lt;- colnames(data) to_add$group &lt;- rep(levels(data$group), each=empty_bar) data &lt;- rbind(data, to_add) data &lt;- data %&gt;% arrange(group) data$id &lt;- seq(1, nrow(data)) # Get the name and the y position of each label label_data &lt;- data number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(stat=&quot;identity&quot;, alpha=0.5) + ylim(-100,120) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 9.1.64 Order Bars Here observations are sorted by bar height within each group. It can be useful if your goal is to understand what are the highest / lowest observations within and across groups. The method used to order groups in ggplot2 is extensively described in this dedicated page. Basically, you just have to add the following piece of code right after the data frame creation: # Order data: data = data %&gt;% arrange(group, value) 9.1.65 Circular Barchart Customization Last but not least, it is highly advisable to add some customisation to your chart. Here we add group names (A, B, C and D), and we add a scale to help compare the sizes of the bars. Voila! The code is a bit long, but the result is quite worth it in my opinion! # library library(tidyverse) # Create dataset data &lt;- data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar &lt;- 3 to_add &lt;- data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) ) colnames(to_add) &lt;- colnames(data) to_add$group &lt;- rep(levels(data$group), each=empty_bar) data &lt;- rbind(data, to_add) data &lt;- data %&gt;% arrange(group) data$id &lt;- seq(1, nrow(data)) # Get the name and the y position of each label label_data &lt;- data number_of_bar &lt;- nrow(label_data) angle &lt;- 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust &lt;- ifelse( angle &lt; -90, 1, 0) label_data$angle &lt;- ifelse(angle &lt; -90, angle+180, angle) # prepare a data frame for base lines base_data &lt;- data %&gt;% group_by(group) %&gt;% summarize(start=min(id), end=max(id) - empty_bar) %&gt;% rowwise() %&gt;% mutate(title=mean(c(start, end))) # prepare a data frame for grid (scales) grid_data &lt;- base_data grid_data$end &lt;- grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1 grid_data$start &lt;- grid_data$start - 1 grid_data &lt;- grid_data[-1,] # Make the plot p &lt;- ggplot(data, aes(x=as.factor(id), y=value, fill=group)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=&quot;identity&quot;, alpha=0.5) + # Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it. geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + # Add text showing the value of each 100/75/50/25 lines annotate(&quot;text&quot;, x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c(&quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;) , color=&quot;grey&quot;, size=3 , angle=0, fontface=&quot;bold&quot;, hjust=1) + geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=&quot;identity&quot;, alpha=0.5) + ylim(-100,120) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) + # Add base line information geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = &quot;black&quot;, alpha=0.8, size=0.6 , inherit.aes = FALSE ) + geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = &quot;black&quot;, alpha=0.8, size=4, fontface=&quot;bold&quot;, inherit.aes = FALSE) p 9.1.66 What is Stacking Stacking is a process where a chart is broken up across more than one categoric variables which make up the whole. Each item of the categoric variable is represented by a shaded area. These areas are stacked on top of one another. Here is an example with a stacked area chart. It shows the evolution of baby name occurence in the US between 1880 and 2015. Six first names are represented on top of one another. # Libraries library(tidyverse) library(babynames) library(streamgraph) library(viridis) library(hrbrthemes) library(plotly) # Load dataset from github data &lt;- babynames %&gt;% filter(name %in% c(&quot;Amanda&quot;, &quot;Jessica&quot;, &quot;Patricia&quot;, &quot;Deborah&quot;, &quot;Dorothy&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot p &lt;- data %&gt;% ggplot( aes(x=year, y=n, fill=name, text=name)) + geom_area( ) + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) ggplotly(p, tooltip=&quot;text&quot;) 9.1.67 Example: Optical Illusion Important note: this section is inspired from this post by Dr. Drang. Dr Drang gives this nice example. Consider the graphic below, and try to visualize how the 3 categories evolved on the period: # create dummy data don &lt;- data.frame( x = rep(seq(2000,2005), 3), value = c( 75, 73, 68, 57, 36, 0, 15, 16, 17, 18, 19, 20, 10, 11, 15, 25, 45, 80), group = rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;), each=6) ) #plot don %&gt;% ggplot( aes(x=x, y=value, fill=group)) + geom_area( ) + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) It looks obvious that the yellow category increased, the purple decreased, and the green. is harder to read. At a first glance it looks like it is slightly decreasing I would say. Now let’s plot just the green group to find out: #plot don %&gt;% filter(group==&quot;B&quot;) %&gt;% ggplot( aes(x=x, y=value, fill=group)) + geom_area( fill=&quot;#22908C&quot;) + theme(legend.position=&quot;none&quot;) + theme_ipsum() + theme(legend.position=&quot;none&quot;) 9.1.68 Workaround If you have just a few categories, I would suggest to build a line chart. Here it is easy to follow a category and understand how it evolved accurately. data %&gt;% ggplot( aes(x=year, y=n, group=name, color=name)) + geom_line() + scale_color_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() However, this solution is not suitable if you have many categories. Indeed, it would result in a spaghetti chart that is very hard to read. You can read more about this here. Instead I would suggest to use `small multiple: here each category has its own section in the graphic. It makes easy to understand the pattern of each category. data %&gt;% ggplot( aes(x=year, y=n, group=name, fill=name)) + geom_area() + scale_fill_viridis(discrete = TRUE) + theme(legend.position=&quot;none&quot;) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + theme( legend.position=&quot;none&quot;, panel.spacing = unit(0.1, &quot;lines&quot;), strip.text.x = element_text(size = 8) ) + facet_wrap(~name, scale=&quot;free_y&quot;) 9.1.69 Basic Stacked area Chart with R This section provides the basics concerning stacked area chart with R and ggplot2. It takes into account several input format types and show how to customize the output. 9.1.70 Most Basic Stacked Area with ggplot2 The data frame used as input to build a stacked area chart requires 3 columns: x: numeric variable used for the X axis, often it is a time. y: numeric variable used for the Y axis. What are we looking at? group: one shape will be done per group. The chart is built using the geom_area() function. # Packages library(ggplot2) library(dplyr) # create data time &lt;- as.numeric(rep(seq(1,7),each=7)) # x Axis value &lt;- runif(49, 10, 100) # y Axis group &lt;- rep(LETTERS[1:7],times=7) # group, one shape per group data &lt;- data.frame(time, value, group) # stacked area chart ggplot(data, aes(x=time, y=value, fill=group)) + geom_area() 9.1.71 Control Stacking Order with ggplot2 The gallery offers a post dedicated to reordering with ggplot2. This step can be tricky but the code below shows how to: Give a specific order with the factor() function. Order alphabetically using sort(). Order following values at a specific data. # Give a specific order: data$group &lt;- factor(data$group , levels=c(&quot;B&quot;, &quot;A&quot;, &quot;D&quot;, &quot;E&quot;, &quot;G&quot;, &quot;F&quot;, &quot;C&quot;) ) # Plot again ggplot(data, aes(x=time, y=value, fill=group)) + geom_area() # Note: you can also sort levels alphabetically: myLevels &lt;- levels(data$group) data$group &lt;- factor(data$group , levels=sort(myLevels) ) # Note: sort followinig values at time = 5 myLevels &lt;- data %&gt;% filter(time==6) %&gt;% arrange(value) data$group &lt;- factor(data$group , levels=myLevels$group ) 9.1.72 Proportional Stacked Area Chart In a proportional stacked area graph, the sum of each year is always equal to hundred and value of each group is represented through percentages. To make it, you have to calculate these percentages first. This can be done using dplyr of with base R. # Compute percentages with dplyr library(dplyr) data &lt;- data %&gt;% group_by(time, group) %&gt;% summarise(n = sum(value)) %&gt;% mutate(percentage = n / sum(n)) # Plot ggplot(data, aes(x=time, y=percentage, fill=group)) + geom_area(alpha=0.6 , size=1, colour=&quot;black&quot;) # Note: compute percentages without dplyr: my_fun &lt;- function(vec){ as.numeric(vec[2]) / sum(data$value[data$time==vec[1]]) *100 } data$percentage &lt;- apply(data , 1 , my_fun) 9.1.73 Color &amp; Style Let’s improve the chart general appearance: Usage of the viridis color scale. theme_ipsum of the hrbrthemes package. Add title with ggtitle. # Library library(viridis) library(hrbrthemes) # Plot ggplot(data, aes(x=time, y=value, fill=group)) + geom_area(alpha=0.6 , size=.5, colour=&quot;white&quot;) + scale_fill_viridis(discrete = T) + theme_ipsum() + ggtitle(&quot;The race between ...&quot;) 9.2 Data Art Sometimes programming can be used to generate figures that are aestetically pleasing, but don’t bring any insight. Here are a few pieces of data art built from R and ggplot2. Visit data-to-art.com for more. 9.2.1 Using R and ggplot2 for Data Art. R and ggplot2 are awesome tool to produce random shapes. Welcome in the field of generative coding or data art. set.seed(345) library(ggplot2) library(RColorBrewer) ngroup=30 names=paste(&quot;G_&quot;,seq(1,ngroup),sep=&quot;&quot;) DAT=data.frame() for(i in seq(1:30)){ data=data.frame( matrix(0, ngroup , 3)) data[,1]=i data[,2]=sample(names, nrow(data)) data[,3]=prop.table(sample( c(rep(0,100),c(1:ngroup)) ,nrow(data))) DAT=rbind(DAT,data) } colnames(DAT)=c(&quot;Year&quot;,&quot;Group&quot;,&quot;Value&quot;) DAT=DAT[order( DAT$Year, DAT$Group) , ] coul = brewer.pal(12, &quot;Paired&quot;) coul = colorRampPalette(coul)(ngroup) coul=coul[sample(c(1:length(coul)) , size=length(coul) ) ] ggplot(DAT, aes(x=Year, y=Value, fill=Group )) + geom_area(alpha=1 )+ theme_bw() + #scale_fill_brewer(colour=&quot;red&quot;, breaks=rev(levels(DAT$Group)))+ scale_fill_manual(values = coul)+ theme( text = element_blank(), line = element_blank(), title = element_blank(), legend.position=&quot;none&quot;, panel.border = element_blank(), panel.background = element_blank()) 9.2.2 Random Shapes set.seed(345) library(ggplot2) library(RColorBrewer) ngroup=30 names=paste(&quot;G_&quot;,seq(1,ngroup),sep=&quot;&quot;) DAT=data.frame() for(i in seq(1:30)){ data=data.frame( matrix(0, ngroup , 3)) data[,1]=i data[,2]=sample(names, nrow(data)) data[,3]=prop.table(sample( c(rep(0,100),c(1:ngroup)) ,nrow(data))) DAT=rbind(DAT,data) } colnames(DAT)=c(&quot;Year&quot;,&quot;Group&quot;,&quot;Value&quot;) DAT=DAT[order( DAT$Year, DAT$Group) , ] coul = brewer.pal(12, &quot;Paired&quot;) coul = colorRampPalette(coul)(ngroup) coul=coul[sample(c(1:length(coul)) , size=length(coul) ) ] ggplot(DAT, aes(x=Year, y=Value, fill=Group )) + geom_area(alpha=1 )+ theme_bw() + #scale_fill_brewer(colour=&quot;red&quot;, breaks=rev(levels(DAT$Group)))+ scale_fill_manual(values = coul)+ theme( text = element_blank(), line = element_blank(), title = element_blank(), legend.position=&quot;none&quot;, panel.border = element_blank(), panel.background = element_blank()) 9.2.3 R Snail A piece of generative art built by Christophe Cariou with R. par(mfrow=c(1,1),mar=c(0,0,0,0),oma=c(1,1,1,1)) plot(0,0,type=&quot;n&quot;, xlim=c(-2,32), ylim=c(3,27), xaxs=&quot;i&quot;, yaxs=&quot;i&quot;, axes=FALSE, xlab=NA, ylab=NA, asp=1) for (j in 0:35) { for (i in 0:35) { R &lt;- 8 alpha &lt;- j*10 X &lt;- 15+R*cos(alpha/180*pi) Y &lt;- 15+R*sin(alpha/180*pi) r &lt;- 3 beta &lt;- i*10 x &lt;- 15+r*cos(beta/180*pi) y &lt;- 15+r*sin(beta/180*pi) d1 &lt;- sqrt((X-x)^2+(Y-y)^2) xc &lt;- x yc &lt;- y n &lt;- 180-atan((Y-y)/(X-x))/pi*180 alpha2 &lt;- -(0:n) theta &lt;- alpha2/180*pi b &lt;- d1/(n/180*pi) r &lt;- b*theta x1 &lt;- xc+r*cos(theta) y1 &lt;- yc+r*sin(theta) lines(x1,y1, col=&quot;black&quot;) } } 9.3 Animation An animated chart displays several chart states one after the other. It must not be confounded with an interactive chart that allows interaction like zooming or hovering. This section describes 2 methods to build animations with R. The first method builds many png images and concatenate them in a gif using image magick. The second relies on the gganimate package that automatically builds the animation for you. Here is a great interactive course that helps getting started with animations. 9.3.0.1 Build-Animation Directly with gganimate The gganimate library is a ggplot2 extension that allows to easily create animation from your data. Basically it allows to provide a frame (the step in the animation) as another aesthetic. Note that this course is dedicated to it. 9.3.1 Animated Bubble Chart with R and gganimate The gganimate package allows to build animated chart using the ggplot2 syntax directly from R. This section shows how to apply it on a bubble chart, to show an evolution in time. 9.3.2 Animated Bubble Chart Before trying to build an animated plot with gganimate, make sure you understood how to build a basic bubble chart with R and ggplot2. The idea is to add an additional aesthetics called transition_..() that provides a frame variable. For each value of the variable, a step on the chart will be drawn. Here, transition_time() is used since the frame variable is numeric. Note that the gganimate automatically performs a transition between state. Several options are available, set using the ease_aes() function. # Get data: library(gapminder) # Charge libraries: library(ggplot2) library(gganimate) # Make a ggplot, but add frame=year: one image per year ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, color = continent)) + geom_point() + scale_x_log10() + theme_bw() + # gganimate specific bits: labs(title = &#39;Year: {frame_time}&#39;, x = &#39;GDP per capita&#39;, y = &#39;life expectancy&#39;) + transition_time(year) + ease_aes(&#39;linear&#39;) # Save at gif: anim_save(&quot;271-ggplot2-animated-gif-chart-with-gganimate1.gif&quot;) 9.3.3 Use Small Multiple Since gganimate is a ggplot2 extension, any ggplot2 option can be used to customize the chart. Here, an example using facet_wrap() to use small multiple on the previous chart, spliting the chart window per continent. Important note: this example comes from the gganimate homepage. # Get data: library(gapminder) # Charge libraries: library(ggplot2) library(gganimate) # Make a ggplot, but add frame=year: one image per year ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) + geom_point(alpha = 0.7, show.legend = FALSE) + scale_colour_manual(values = country_colors) + scale_size(range = c(2, 12)) + scale_x_log10() + facet_wrap(~continent) + # Here comes the gganimate specific bits labs(title = &#39;Year: {frame_time}&#39;, x = &#39;GDP per capita&#39;, y = &#39;life expectancy&#39;) + transition_time(year) + ease_aes(&#39;linear&#39;) # Save at gif: anim_save(&quot;271-ggplot2-animated-gif-chart-with-gganimate2.gif&quot;) 9.3.4 Smooth Barplot Transition Before trying to build an animated plot with gganimate, make sure you understood how to build a basic bar chart with R and ggplot2. The idea is to add an additional aesthetics called transition_..() that provides a frame variable. For each value of the variable, a step on the chart will be drawn. Here, transition_states() is used since the frame variable is categorical. Note that the gganimate automatically performs a transition between state. Several options are available, set using the ease_aes() function. # libraries: library(ggplot2) library(gganimate) # Make 2 basic states and concatenate them: a &lt;- data.frame(group=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;), values=c(3,2,4), frame=rep(&#39;a&#39;,3)) b &lt;- data.frame(group=c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;), values=c(5,3,7), frame=rep(&#39;b&#39;,3)) data &lt;- rbind(a,b) # Basic barplot: ggplot(a, aes(x=group, y=values, fill=group)) + geom_bar(stat=&#39;identity&#39;) # Make a ggplot, but add frame=year: one image per year ggplot(data, aes(x=group, y=values, fill=group)) + geom_bar(stat=&#39;identity&#39;) + theme_bw() + # gganimate specific bits: transition_states( frame, transition_length = 2, state_length = 1 ) + ease_aes(&#39;sine-in-out&#39;) # Save at gif: anim_save(&quot;288-animated-barplot-transition.gif&quot;) 9.3.5 Progressive Line Chart Rendering # libraries: library(ggplot2) library(gganimate) library(babynames) library(hrbrthemes) # Keep only 3 names don &lt;- babynames %&gt;% filter(name %in% c(&quot;Ashley&quot;, &quot;Patricia&quot;, &quot;Helen&quot;)) %&gt;% filter(sex==&quot;F&quot;) # Plot don %&gt;% ggplot( aes(x=year, y=n, group=name, color=name)) + geom_line() + geom_point() + scale_color_viridis(discrete = TRUE) + ggtitle(&quot;Popularity of American names in the previous 30 years&quot;) + theme_ipsum() + ylab(&quot;Number of babies born&quot;) + transition_reveal(year) # Save at gif: anim_save(&quot;287-smooth-animation-with-tweenr.gif&quot;) 9.3.6 Concatenate .png Images with Image Magick Image Magick is a software that allows to work with images in command lines. You can create and output a set of images doing a loop in R. Then, give all these images to Image magick and it will convert them into a .gif format. 9.3.7 Most Basic Animation with R and Image Magick This section describes how to build a basic count down .gif animation. It uses R to make 10 images, and Image Magick to concatenated them in a .gif. This is probably the most basic animated plot (.gif format) you can do with R and Image Magick. Start by building 10 images with R. Use Image magick to concatenate them in a gif. Of course, Image Magick must be installed on your computer. See here to install it. Note: : This example has been found on Mark Heckmann’s R you ready website. # Build 10 images -&gt; save them at .png format png(file=&quot;example%02d.png&quot;, width=480, height=480) par(bg=&quot;grey&quot;) for (i in c(10:1, &quot;G0!&quot;)){ plot.new() text(.5, .5, i, cex = 6 ) } dev.off() # Use image magick system(&quot;convert -delay 80 *.png animated_count_down.gif&quot;) # Remove png files file.remove(list.files(pattern=&quot;.png&quot;)) 9.3.8 Animated 3d Chart with R This section shows how to build a 3d scatterplot and make it spin thanks to the rgl package. Reproducible code is provided. The rgl package is the best option to build 3d charts in R. Please see this post for an introduction to 3d scatterplots using it. It also provides the plot3d() and play3d() functions that allow to animate the 3d chart, and eventually to export the result at a .gif format. Here is an application to the famous iris dataset, with a nice animated 3d scatterplot chart. library( rgl ) library(magick) # Let&#39;s use the iris dataset # iris # This is ugly colors &lt;- c(&quot;royalblue1&quot;, &quot;darkcyan&quot;, &quot;oldlace&quot;) iris$color &lt;- colors[ as.numeric( as.factor(iris$Species) ) ] # Static chart plot3d( iris[,1], iris[,2], iris[,3], col = iris$color, type = &quot;s&quot;, radius = .2 ) # We can indicate the axis and the rotation velocity play3d( spin3d( axis = c(0, 0, 1), rpm = 20), duration = 10 ) # Save like gif movie3d( movie=&quot;3dAnimatedScatterplot&quot;, spin3d( axis = c(0, 0, 1), rpm = 7), duration = 10, dir = &quot;~/Desktop&quot;, type = &quot;gif&quot;, # Library for 3D library(lattice) # Initiate data b0 &lt;- 10 b1 &lt;- .5 b2 &lt;- .3 int12 &lt;- .2 g &lt;- expand.grid(x = 1:20, y = 1:20) g$z &lt;- b0 + b1*g$x + b2*g$y + int12*g$x*g$y # Make several .png images png(file=&quot;example%03d.png&quot;, width=480, heigh=480) for (i in seq(0, 350 ,10)){ print(wireframe(z ~ x * y, data = g, screen = list(z = i, x = -60), drape=TRUE)) } dev.off() # convert pdf to gif using ImageMagick system(&quot;convert -delay 40 *.png animated_3D_plot.gif&quot;) # cleaning up file.remove(list.files(pattern=&quot;.png&quot;)) 9.4 3D Charts R allows to build three dimensional charts, mainly thanks to the rgl package. Even if 3D is often a bad practice, it can be useful in specific situation. This section provides several examples made in R. 9.4.1 3d Surface Plot with R and plotly A surface plot displays the evolution of a numeric variable on a grid. The R plotly package offers some great functions to build that kind of chart. 9.4.1.1 Most Basic Bubble Chart with geom_point() Plotly allows to build charts thanks to it plot_ly() function. It offers several type option. surfaceallows to make surface plots and expect a matrix as input. Rows and columns actually describe a grid, and the cell value will be mapped to the surface height. Once the chart is done, you can hover and zoom on the chart for more details. # Library library(plotly) # Data: volcano is provided by plotly # Plot p &lt;- plot_ly(z = volcano, type = &quot;surface&quot;) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/generalHtml/3dSurface.html&quot;)) 9.4.2 Building a 3D Knot with R and rgl This is an illustration of what is possible to do with R and the rgl library: a 3D knot. With the rgl package, you can make the image moove and zoom in an out. Find this image in the interactive mode here. # Library rgl library(rgl) #Choose the size of the image on the output (800,650 to have 800 x 600) r3dDefaults$windowRect &lt;- c(0,50, 800, 650) open3d() #If you want to put line on the background #bg3d(sphere = TRUE, color = c(&quot;grey&quot;, &quot;white&quot;), lit = TRUE, back = &quot;lines&quot; ,lwd=2) # This is to output a rgl plot in a rmarkdown document. Note that you must add webgl=TRUE, results=&#39;hide&#39; in the chunck header library(knitr) knit_hooks$set(webgl = hook_webgl) # plot bg3d( col=rgb(0.2,0.8,0.5,0.8) ) theta &lt;- seq(0, 2*pi, len = 50) knot &lt;- cylinder3d( center = cbind(sin(theta) + 3*sin(2*theta), 2*sin(3*theta), cos(theta) - 2*cos(2*theta)), e1 = cbind(cos(theta) + 4*cos(2*theta),6*cos(3*theta),sin(theta) + 4*sin(2*theta)),radius = 0.9,closed = TRUE) shade3d(addNormals(subdivision3d(knot, depth = 2)), col = rgb(0.4,0.2,0.8,0.3)) # save it as png # rgl.snapshot( &quot;~/Desktop/#20_portfolio_knot_3D.png&quot;, fmt=&quot;png&quot;, top=TRUE ) # Export as an html file if needed: writeWebGL( filename=&quot;generalHtml/3dknot.html&quot; , width=600, height=600) 9.4.3 Nifty Graph: A 3d Imitation with R A graph by Matt Asher showing probability function in a data art fashion. moxbuller = function(n) { u = runif(n) v = runif(n) x = cos(2*pi*u)*sqrt(-2*log(v)) y = sin(2*pi*v)*sqrt(-2*log(u)) r = list(x=x, y=y) return(r) } r = moxbuller(50000) par(bg=&quot;black&quot;) par(mar=c(0,0,0,0)) plot(r$x,r$y, pch=&quot;.&quot;, col=&quot;blue&quot;, cex=1.2) 9.4.4 Animated 3d Chart with R This post shows how to build a 3d scatterplot and make it spin thanks to the rgl package. Reproducible code is provided. The rgl package is the best option to build 3d charts in R. Please see this post for an introduction to 3d scatterplots using it. It also provides the plot3d() and play3d() functions that allow to animate the 3d chart, and eventually to export the result at a .gif format. Here is an application to the famous iris dataset, with a nice animated 3d scatterplot chart. library( rgl ) library(magick) # Let&#39;s use the iris dataset # iris # This is ugly colors &lt;- c(&quot;royalblue1&quot;, &quot;darkcyan&quot;, &quot;oldlace&quot;) iris$color &lt;- colors[ as.numeric( as.factor(iris$Species) ) ] # Static chart plot3d( iris[,1], iris[,2], iris[,3], col = iris$color, type = &quot;s&quot;, radius = .2 ) # We can indicate the axis and the rotation velocity play3d( spin3d( axis = c(0, 0, 1), rpm = 20), duration = 10 ) # Save like gif movie3d( movie=&quot;3dAnimatedScatterplot&quot;, spin3d( axis = c(0, 0, 1), rpm = 7), duration = 10, dir = &quot;~/Desktop&quot;, type = &quot;gif&quot;, clean = TRUE ) 9.5 Interactive Charts An interactive charts allows the user to perform actions: zooming, hovering a marker to get a tooltip, choosing a variable to display and more. R offers a set of packages called the html widgets: they allow to build interactive dataviz directly from R. 9.5.0.1 Scatter and Bubble Plots: Use Plotly The best way to build an interactive bubble chart from R is through the plotly library. If you know how to make a ggplot2 chart, you are 10 seconds away to rendering an interactive version= just call the ggplotly() function, and you’re done. library(ggplot2) library(plotly) library(gapminder) p &lt;- gapminder %&gt;% filter(year==1977) %&gt;% ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() + theme_bw() ggplotly(p) 9.5.1 Streamgraph with Dropdown Button The streamgraph package allows to add a dropdown button that controls which group to highlight. See how to use this option with explanation and reproducible code. # Library library(streamgraph) # Create data: data &lt;- data.frame( year=rep(seq(1990,2016) , each=10), name=rep(letters[1:10] , 27), value=sample( seq(0,1,0.0001) , 270) ) # Stream graph with a legend pp &lt;- streamgraph(data, key=&quot;name&quot;, value=&quot;value&quot;, date=&quot;year&quot;, height=&quot;300px&quot;, width=&quot;1000px&quot;) %&gt;% sg_legend(show=TRUE, label=&quot;names: &quot;) # save the widget # library(htmlwidgets) # saveWidget(pp, file=paste0( getwd(), &quot;/generalHtml/streamgraphDropdown.html&quot;)) 9.5.2 Interactive Chord Diagram with R This section describes how to build an interactive chord diagram on which you can hover groups to highlight flows. # Load package # devtools::install_github(&quot;mattflor/chorddiag&quot;) library(chorddiag) # Create dummy data m &lt;- matrix(c(11975, 5871, 8916, 2868, 1951, 10048, 2060, 6171, 8010, 16145, 8090, 8045, 1013, 990, 940, 6907), byrow = TRUE, nrow = 4, ncol = 4) # A vector of 4 colors for 4 groups haircolors &lt;- c(&quot;black&quot;, &quot;blonde&quot;, &quot;brown&quot;, &quot;red&quot;) dimnames(m) &lt;- list(have = haircolors, prefer = haircolors) groupColors &lt;- c(&quot;#000000&quot;, &quot;#FFDD89&quot;, &quot;#957244&quot;, &quot;#F26223&quot;) # Build the chord diagram: p &lt;- chorddiag(m, groupColors = groupColors, groupnamePadding = 20) p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/generalHtml/chord_interactive.html&quot;)) 9.5.3 Interactive Network Chart with R The networkD3 package allows to build interactive network diagram directly from R. It allows to zoom, hover nodes, reorganize the layout and more. This post explains how to use the library with reproducible examples. # Libraries library(igraph) library(networkD3) # create a dataset: data &lt;- data_frame( from=c(&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;K&quot;, &quot;A&quot;, &quot;M&quot;), to=c(&quot;B&quot;, &quot;E&quot;, &quot;F&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;Z&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;K&quot;) ) # Plot p &lt;- simpleNetwork(data, height=&quot;100px&quot;, width=&quot;100px&quot;) # p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/generalHtml/networkInteractive1.html&quot;)) # Libraries library(igraph) library(networkD3) # create a dataset: data &lt;- data_frame( from=c(&quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;D&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;K&quot;, &quot;A&quot;, &quot;M&quot;), to=c(&quot;B&quot;, &quot;E&quot;, &quot;F&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;Z&quot;, &quot;A&quot;, &quot;C&quot;, &quot;A&quot;, &quot;B&quot;, &quot;K&quot;) ) # Plot p &lt;- simpleNetwork(data, height=&quot;100px&quot;, width=&quot;100px&quot;, Source = 1, # column number of source Target = 2, # column number of target linkDistance = 10, # distance between node. Increase this value to have more space between nodes charge = -900, # numeric value indicating either the strength of the node repulsion (negative value) or attraction (positive value) fontSize = 14, # size of the node names fontFamily = &quot;serif&quot;, # font og node names linkColour = &quot;#666&quot;, # colour of edges, MUST be a common colour for the whole graph nodeColour = &quot;#69b3a2&quot;, # colour of nodes, MUST be a common colour for the whole graph opacity = 0.9, # opacity of nodes. 0=transparent. 1=no transparency zoom = T # Can you zoom on the figure? ) #p # save the widget # library(htmlwidgets) # saveWidget(p, file=paste0( getwd(), &quot;/generalHtml/networkInteractive2.html&quot;)) 9.6 Caveats .col3 { display: grid; columns: 3 100px; align-content: space-evenly; grid-template-columns: auto auto auto; grid-gap: 10px; padding: 10px; text-align: center; padding: 20px 0; font-size: 10px; -webkit-columns: 3 100px; -moz-columns: 3 100px; } Cut or Not to Cut (the Y Axis) Cutting the Y-axis is one fo the most controversial practice in data viz. See why. Order your Data When displaying the value of several entities, ordering them makes the graph much more insightful. The Spaghetti Chart A line graph with too many lines becomes unreadable: it is called a spaghetti graph. Piecharts The human eye is bad at reading angles. See how to replace the most criticized chart ever. Play with your Histogram Bin Size Always try different bin sizes when you build a histogram, it can lead to different insights. Do boxplots hide information? Boxplots are a great way to summarize a distribution but hide the sample size and their distribution. The Problem with Error Bars Barplots with error bars must be used with great care. See why and how to replace them. Too Many Distributions If you need to compare the distributions of many variables, don’t clutter your graphic. How to Avoid Overplotting Too many points on your scatter plot makes it unreadable? Techniques exist to avoid overplotting. Rainbow Color Palette Avoid the rainbow color palette when you map a numeric variable So many better palettes exist. Faceting Horizontal or Vertical? Placing the individual plot horizontally or vertically is an important choice to make. Don’t be Counter Intuitive Your audience is used to a few dataviz standards. Not respecting standards can be misleading. The Problem with Dual Axis Using dual axes is a good way to manipulate the history behind your data. Avoid it. (blog by datawrapper). Calculation Errors Always double-check the values written on the chart. Does your sum make sense? Barplots with Radical Coordinates This kind of barplot distorts reality: outer bars tend to look bigger than the inner ones. Connect the Dots when X-Axis is Ordered If your X-axis is ordered, connecting the dots will make the message much clearer. Color that Communicates Nothing A bad use of colors can be misleading. If your color does not represent anything, don’t use it. Bubble Size: Radius or Area When using bubbles on a chart, their must be proportional to the underlying variable. Not their radius. When axis labels break your neck Having long and vertical axis labels can be annoyig. If you can, flip your chart. Circular Plots and Distortion Set a sufficient inner circle size to avoid bar shape distortion. The issue with Stacking Stacking makes it difficult to analyze each represented group. See when to use it. Mental Arithmetic Don’t ask the reader to do mental arithmetic, it is hard to compare shapes. Area is a Poor Metaphor Human brains struggle to translate areas to precise values. Prefer other shapes. Grouped Barplot must be Grouped In a grouped barplot, bars in the same group must be close to each other. It makes grouping obvious. De-clutter your Chart Keep on what’s necessary on your graphic: 3d, color effect, redundant info, etc. hide the story. Mind your Legend A few tips for a useful legend. Hint: you should worry if you have 14 groups. Consistency between Charts If you present several graphics, be consistent. Does each color always represent the same group. Spider Chart and its Caveats Spider or radar charts are often criticized in dataviz, here is an overview of the topic. What you should Consider when doing Heatmaps Heatmaps are a powerful way of visualizing information. A few features must be considered. The Simpson Paradox When a trend appears in several different groups of data but reverses when these groups are combined. Annotate your Chart Help the reader understand your point: highlight the important part. The Moire Effect If you have a barplot with many bars of similar length, consider a lollipop chart instead. Choropleth and Normalization If you don’t scale your data, your choropleth will basically look like a population heatmap. How to Read a Log Scale Comparing percentage change on a linear scale can be misleading, use a log scale instead. By datawrapper. There is no ‘L’ in choropleth And people won’t miss an opportunity to make you notice. "],
["references.html", "References", " References Holtz, Yan. 2018. R Graph Gallery. https://www.r-graph-gallery.com/ Xie, Yihui. 2015. Dynamic Documents with R and Knitr. 2nd ed. Boca Raton, Florida: Chapman; Hall/CRC. http://yihui.org/knitr/. ——. 2020. Bookdown: Authoring Books and Technical Documents with r Markdown. https://CRAN.R-project.org/package=bookdown. "]
]
